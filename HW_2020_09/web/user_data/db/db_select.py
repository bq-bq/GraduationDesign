
class db_select_py:
	def __init__(self):
		global user_info
		app = user_info[2]
		db_ids2 = [
			'academic',
			'academic',
			'activity_1',
			'aircraft',
			'allergy_1',
			'apartment_rentals',
			'architecture',
			'assets_maintenance',
			'baseball_1',
			'battle_death',
			'behavior_monitoring',
			'bike_1',
			'body_builder',
			'book_2',
			'browser_web',
			'candidate_poll',
			'car_1',
			'chinook_1',
			'cinema',
			'city_record',
			'climbing',
			'club_1',
			'coffee_shop',
			'college_1',
			'college_2',
			'college_3',
			'company_1',
			'company_employee',
			'company_office',
			'concert_singer',
			'county_public_safety',
			'course_teach',
			'cre_Doc_Control_Systems',
			'cre_Doc_Template_Mgt',
			'cre_Doc_Tracking_DB',
			'cre_Docs_and_Epenses',
			'cre_Drama_Workshop_Groups',
			'cre_Theme_park',
			'csu_1',
			'culture_company',
			'customer_complaints',
			'customer_deliveries',
			'customers_and_addresses',
			'customers_and_invoices',
			'customers_and_products_contacts',
			'customers_campaigns_ecommerce',
			'customers_card_transactions',
			'debate',
			'decoration_competition',
			'department_management',
			'department_store',
			'device',
			'document_management',
			'dog_kennels',
			'dorm_1',
			'driving_school',
			'e_government',
			'e_learning',
			'election',
			'election_representative',
			'employee_hire_evaluation',
			'entertainment_awards',
			'entrepreneur',
			'epinions_1',
			'farm',
			'film_rank',
			'flight_1',
			'flight_2',
			'flight_4',
			'flight_company',
			'formula_1',
			'game_1',
			'game_injury',
			'gas_company',
			'geo',
			'gymnast',
			'hospital_1',
			'hr_1',
			'icfp_1',
			'imdb',
			'inn_1',
			'insurance_and_eClaims',
			'insurance_fnol',
			'insurance_policies',
			'journal_committee',
			'loan_1',
			'local_govt_and_lot',
			'local_govt_in_alabama',
			'local_govt_mdm',
			'machine_repair',
			'manufactory_1',
			'manufacturer',
			'match_season',
			'medicine_enzyme_interaction',
			'mountain_photos',
			'movie_1',
			'museum_visit',
			'music_1',
			'music_2',
			'music_4',
			'musical',
			'network_1',
			'network_2',
			'news_report',
			'orchestra',
			'party_host',
			'party_people',
			'performance_attendance',
			'perpetrator',
			'pets_1',
			'phone_1',
			'phone_market',
			'pilot_record',
			'poker_player',
			'product_catalog',
			'products_for_hire',
			'products_gen_characteristics',
			'program_share',
			'protein_institute',
			'race_track',
			'railway',
			'real_estate_properties',
			'restaurant_1',
			'restaurants',
			'riding_club',
			'roller_coaster',
			'sakila_1',
			'scholar',
			'school_bus',
			'school_finance',
			'school_player',
			'scientist_1',
			'ship_1',
			'ship_mission',
			'shop_membership',
			'singer',
			'small_bank_1',
			'soccer_1',
			'soccer_2',
			'solvency_ii',
			'sports_competition',
			'station_weather',
			'store_1',
			'store_product',
			'storm_record',
			'student_1',
			'student_assessment',
			'student_transcripts_tracking',
			'swimming',
			'theme_gallery',
			'tracking_grants_for_research',
			'tracking_orders',
			'tracking_share_transactions',
			'tracking_software_problems',
			'train_station',
			'tvshow',
			'twitter_1',
			'university_basketball',
			'voter_1',
			'voter_2',
			'wedding',
			'wine_1',
			'workshop_paper',
			'world_1',
			'wrestler',
			'wta_1',
			'yelp']
		db_ids3 = [
			'2018年各校招生计划',
			'2018年各校招生计划',
			'2019年各城市马拉松',
			'AI峰会',
			'CCTV中国经济年度人物',
			'IMAX电影院',
			'NBA奖项',
			'NBA篮球',
			'NLP会议',
			'X公司工资',
			'双11活动',
			'动物',
			'医院',
			'台风',
			'地震',
			'坚果',
			'小说',
			'手机',
			'文集',
			'朝代',
			'期刊',
			'植物',
			'榜单',
			'水果',
			'汽车',
			'游戏',
			'空调',
			'论文',
			'诗词',
			'车展',
			'酒店',
			'银行',
			'医美APP',
			'中国CBA',
			'二手车',
			'收视率',
			'洗衣机',
			'电视机',
			'羽毛球',
			'购物城',
			'世界河流',
			'世界高山',
			'世界高校',
			'两院院士',
			'中国交通',
			'中国城市',
			'中国姓氏',
			'中国戏剧',
			'中国景点',
			'中国民族',
			'中国菜系',
			'中国高校',
			'举重比赛',
			'交通运输',
			'人物传记',
			'企业融资',
			'公司广告',
			'公司招聘',
			'公司收购',
			'动物榜单',
			'北京小学',
			'北京驾校',
			'卫星天体',
			'历史战役',
			'友好城市',
			'古代人物',
			'地图软件',
			'城市地铁',
			'城市拥堵',
			'城市消费',
			'基金公司',
			'外卖预定',
			'外文书籍',
			'央视晚会',
			'学术比赛',
			'影视企业',
			'快递公司',
			'房产公司',
			'打车软件',
			'数字单位',
			'明星关系',
			'明星富豪',
			'智能音箱',
			'朝代货币',
			'机票预定',
			'枪击事件',
			'汉语词语',
			'游泳比赛',
			'理财公司',
			'相亲软件',
			'社交软件',
			'综艺节目',
			'网红食品',
			'视频软件',
			'豆瓣电影',
			'豆瓣读书',
			'购书平台',
			'购物网站',
			'足球奖项',
			'软件排行',
			'酒店预订',
			'食物功效',
			'饭店预订',
			'中国文学奖',
			'中国旅行社',
			'互联网企业',
			'公务员考试',
			'冬季奥运会',
			'华语电影奖',
			'历史类书籍',
			'各城市垃圾',
			'各城市天气',
			'各学校假期',
			'国家与宗教',
			'大洲与国家',
			'大麦网话剧',
			'奢侈品消费',
			'建筑类奖项',
			'朝代影视剧',
			'欧洲杯球队',
			'歌手演唱会',
			'毕业生薪资',
			'澳网公开赛',
			'火车票预定',
			'电影票预定',
			'福利及法规',
			'笔记本电脑',
			'网易云阅读',
			'诺贝尔奖项',
			'豆瓣音乐人',
			'足球欧洲杯',
			'音乐金曲奖',
			'世界旅游城市',
			'世界经济峰会',
			'中国传统节日',
			'中国体育场馆',
			'中国卫视频道',
			'中国历史名城',
			'中国城市称号',
			'中国基础设施',
			'中国宜居城市',
			'中国资源城市',
			'中国餐饮公司',
			'卫视播放节目',
			'在线学习平台',
			'在线英语教学',
			'城市市民市容',
			'城市活力研究',
			'城市财政收入',
			'大麦网演唱会',
			'奥斯卡金像奖',
			'奥运会举办国',
			'平台自制节目',
			'当前上映电影',
			'房屋中介软件',
			'植物经济价值',
			'用户出行用车',
			'赚钱公司榜单',
			'赛事运动项目',
			'软件赞助节目',
			'银行理财产品',
			'世博会、园博会',
			'世界篮球国家队',
			'中国城市的企业',
			'中国演员和电影',
			'中国电视剧奖项',
			'公司联合实验室',
			'动物天敌和朋友',
			'各城市购房报告',
			'各城市院士情况',
			'城市外资吸引力',
			'奥运会参赛队伍',
			'小说改编电视剧',
			'手机品牌代言人',
			'招聘会和宣讲会',
			'教材辅助参考书',
			'明星与经纪公司',
			'运动员比赛记录',
			'中国城市体育活动',
			'中国演员和电视剧',
			'体育明星商业活动',
			'劳伦斯世界体育奖',
			'国庆假期旅游数据',
			'智能手机全球占比',
			'各城市一二三产业经济']	
		db_ids = (db_ids2 if app == 'db2' else sorted(db_ids3))
		self.elt = html.DIV(**{'class':'dropdown'})
		button = html.BUTTON('请选择数据库', **{'class':'btn btn-primary btn-sm dropdown-toggle', 'data-toggle':'dropdown', 'aria-haspopup':'true', 'aria-expanded':'true'})
		self.elt <= button
		dropdown_menu = html.DIV(**{'class':'dropdown-menu', 'aria-labelledby':'dropdownMenuLink'})
		self.elt <= dropdown_menu
		# self.event_listener = None
		self.selected_db = {'filed_types':['text'], 'filed_names':['db_id'], 'rows':[[ '?' ]]}
		self.selected_table = None
		for db_id in db_ids:
			li = html.A(db_id, **{'class':'dropdown-item small'})
			dropdown_menu <= li
			def on_click(ev):
				selected_db = ev.target.text
				button.text = selected_db
				self.selected_db['rows'][0][0] = selected_db
				if self.event_listener is not None:
					global data_hub
					self.selected_table = None
					self.event_listener('change', 'selected_table')
					for data_name in list(data_hub.data.keys()):
						if data_name != 'selected_db':
							del data_hub.data[data_name]
					data_hub.data['__schema__'] = {'__update_time__':-1}
					data_hub.update_data(None, '__schema__')
					self.event_listener('change', 'selected_db')
					self.event_listener('change_db', None)
			li.bind('click', on_click)

	def get_data(self, data_name):
		if data_name == 'selected_db':
			return self.selected_db
		if data_name == 'selected_table':
			return self.selected_table

	def set_data(self, data_name, data):
		if data_name == 'selected_db':
			self.selected_db = data
		if data_name == 'selected_table':
			self.selected_table = data
