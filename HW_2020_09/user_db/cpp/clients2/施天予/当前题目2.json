{
    "__update_time__": 1595817458.0061564,
    "field_names": [
        "题目名",
        "问题",
        "主程序",
        "答案",
        "评语",
        "开始时间",
        "截止时间",
        "分数",
        "提交时间"
    ],
    "field_types": [
        "text",
        "text",
        "text",
        "text",
        "text",
        "time",
        "time",
        "number",
        "time"
    ],
    "rows": [
        [
            "A.5 (C++)",
            "<p>写出一个键和值的类型都可以是string或int的哈希表类, HT。<br>本题难度大，参考答案有270行，截止时间延长8天。<br>注意<br></p><ol><li>HT不是一个模版类，但是HT的一个对象可以同时使用int和string的对象作为键。</li><li>HT中去掉了put函数，HT的[]操作符同时具有get和put的功能。</li></ol><p><span style=\"font-weight: bolder;\">EXAMPLE INPUT</span></p><pre style=\"font-size: 14px;\">1 2 3 4 5 6 7 8\n</pre><p><span style=\"font-weight: bolder;\">EXAMPLE OUTPUT</span></p><pre style=\"font-size: 14px;\">4\n2\n4\n6\n8</pre>",
            "#include \"source.cpp\"\n\n#include <iostream>\n#include <sstream>\nusing namespace std;\n\nint main() {\n\tHT map;\n\t\n\tint key1;\n\tint value1;\n\tcin >> key1 >> value1;\n\tmap[key1] = value1;\n\t\n\tstring key2;\n\tstring value2;\n\tcin >> key2 >> value2;\n\tmap[key2] = value2;\n\t\n\tint key3;\n\tstring value3;\n\tcin >> key3 >> value3;\n\tmap[key3] = value3;\n\t\n\tstring key4;\n\tint value4;\n\tcin >> key4 >> value4;\n\tmap[key4] = value4;\n\t\n\tcout << map.size() << endl;\n\tcout << (int)map[key1] << endl;\n\tcout << (string)map[key2] << endl;\n\tcout << (string)map[key3] << endl;\n\tcout << (int)map[key4] << endl;\n}",
            "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n#include <stdexcept>\nusing namespace std;\n\n#define I(i,n) for (size_t i = 0; i < n; ++ i)\n\nclass NoSuchKeyException {};\n\nclass Mix\n{\npublic:\n    int x = 0;\n    string y = \"\";\n \n    Mix() {}\n    Mix(const int a) : x(a) {}\n    Mix(const string b) : y(b) {}\n\n    explicit operator int () const{\n        return x;\n    }\n\n    explicit operator string () const{\n        return y;\n    }\n};\n\nsize_t hash_function(const Mix & key) {\n    if(key.x != 0){\n        size_t code = key.x;\n        return code;\n    }\n    else{\n        size_t code = stoi(key.y) + 5*key.y.size();\n        return code;\n    }\n}\n\nclass HT\n{\n    class Tuple\n    {\n    public:\n        Mix key;\n        Mix val;\n        bool in_use;\n        Tuple() : in_use(false){}\n    };\n    vector<Tuple> tuples;\n    size_t _size;\n    \n    size_t indexOfKey(const Mix & key) const {\n        return hash_function(key);\n    }\npublic:\n    HT() : _size(0) {\n        tuples.resize(200);\n    }\n    bool containsKey(const int & key) const {\n        size_t index = indexOfKey(key);\n        return tuples[index].in_use;\n    }\n\n    Mix & operator [] (const Mix & key){\n        size_t index = indexOfKey(key);\n        if (! tuples[index].in_use) {\n            tuples[index].key = key;\n            tuples[index].in_use = true;\n            ++ _size;\n            if (2 * _size > tuples.size())\n                _double_tuples();\n        }\n        return tuples[index].val;\n    }\n    void put(const Mix & key, const Mix & val) {\n        size_t index = indexOfKey(key);\n        tuples[index].key = key;\n        tuples[index].val = val;\n        if (tuples[index].in_use) return;\n        tuples[index].in_use = true;\n        ++ _size;\n        if (2 * _size > tuples.size())\n            _double_tuples();\n    }\n\n    size_t size(){\n        return _size;\n    }\n\n    void clear() {\n        I(i, tuples.size())\n            tuples[i].in_use = false;\n        _size = 0;\n    }\n    void _double_tuples() {\n        vector<Tuple> non_empty_tuples;\n        I(i, tuples.size())\n            if (tuples[i].in_use)\n                non_empty_tuples.push_back(tuples[i]);\n        clear();\n        tuples.resize(tuples.size() * 2);\n        I(i, non_empty_tuples.size())\n            put(non_empty_tuples[i].key, non_empty_tuples[i].val);\n    }\n};",
            "",
            1594951200,
            1596200400,
            0,
            -2209017943.0
        ]
    ]
}