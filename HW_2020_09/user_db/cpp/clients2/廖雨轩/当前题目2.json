{
    "__update_time__": 1595472066.1781433,
    "field_names": [
        "题目名",
        "问题",
        "主程序",
        "答案",
        "评语",
        "开始时间",
        "截止时间",
        "分数",
        "提交时间"
    ],
    "field_types": [
        "text",
        "text",
        "text",
        "text",
        "text",
        "time",
        "time",
        "number",
        "time"
    ],
    "rows": [
        [
            "A.3 (C++)",
            "在课堂上讲的哈希表的基础上，写一个以整数为键的只有一个类型参数的哈希表类, HT&lt;E&gt;。<br><p><span style=\"font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;; font-size: 1rem;\">另外，请添加一个函数 getKeys，该函数返回所有二元组(tuple)中的键(key)。</span></p><p><span style=\"font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;; font-size: 1rem; font-weight: bolder;\">HINT</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;; font-size: 1rem;\">：尝试通过添加额外代码(&lt;10行)完成该题。</span><br></p><p><span style=\"font-weight: bolder;\">EXAMPLE INPUT</span></p><pre style=\"font-size: 14px;\">2000\n</pre><p><span style=\"font-weight: bolder;\">EXAMPLE OUTPUT</span></p><pre style=\"font-size: 14px;\">2000\ntext51\ntext151\ntext251\ntext351\ntext451\ntext551\ntext651\ntext751\ntext851\ntext951\ntext1051\ntext1151\ntext1251\ntext1351\ntext1451\ntext1551\ntext1651\ntext1751\ntext1851\ntext1951\n0</pre>",
            "\n#include \"source.cpp\"\n\n#include <iostream>\n#include <sstream>\nusing namespace std;\n\nint main() {\n\tint test_count;\n\tcin >> test_count;\n\tHT<string> map;\n\tfor (int i = 0; i < test_count; ++ i) {\n\t\tstringstream ss;\n\t\tss << \"text\" << (1 + i);\n\t\tmap.put(i * 10, ss.str());\n\t}\n\tcout << map.size() << endl;\n\tfor (int i = 0; i < test_count; ++ i) {\n\t\tif (! map.containsKey(i * 10)) {\n\t\t\tcout << \"bad\" << endl;\n\t\t}\n\t\telse if (i % 100 == 50) {\n\t\t\tcout << map[i * 10] << endl;\n\t\t}\n\t}\n\tvector<int> keys = map.getKeys();\n\tfor (int i = 0; i < keys.size(); ++ i) {\n\t\tmap.remove(keys[i]);\n\t}\n\tcout << map.size() << endl;\n}",
            "// put  size containsKey [] getKeys remove\n#include <vector>\n#include <iostream>\n#include <sstream>\nusing namespace std;\nclass NoSuchKeyException\n{\n};\ntemplate <typename E>\nclass HT\n{\n    class Tuple\n    {\n    public:\n        int key;\n        E value;\n        Tuple(int key, E value) : key(key), value(value) {}\n    };\n    vector<Tuple> tuples;\n    int _size;\n\npublic:\n    void put(int key, E value)\n    {\n        Tuple temp(key, value);\n        tuples.push_back(temp);\n        ++_size;\n    }\n    int size() const { return _size; }\n    bool containsKey(const int &key) const\n    {\n        bool flag = false;\n        for (auto &t : tuples)\n        {\n            if (t.key == key)\n            {\n                flag = true;\n                break;\n            }\n        }\n        return flag;\n    }\n    E &operator[](const int &key)\n    {\n        bool flag = false;\n        for (auto &t : tuples)\n        {\n            if (t.key == key)\n            {\n                flag = true;\n                return t.value;\n            }\n        }\n        if (flag == false)\n            throw NoSuchKeyException();\n    }\n    vector<int> getKeys()\n    {\n        vector<int> keys;\n        for (auto &t : tuples)\n        {\n            keys.push_back(t.key);\n        }\n        return keys;\n    }\n    void remove(const int &key)\n    {\n        for (auto &t : tuples)\n        {\n            if (t.key == key)\n            {\n                t.key = -1;\n            }\n        }\n        --_size;\n    }\n};\n",
            "In file included from main.cpp:2:0:\nsource.cpp: In instantiation of ‘void HT<E>::remove(const int&) [with E = std::__cxx11::basic_string<char>]’:\nmain.cpp:28:21:   required from here\nsource.cpp:72:17: error: no matching function for call to ‘std::vector<HT<std::__cxx11::basic_string<char> >::Tuple, std::allocator<HT<std::__cxx11::basic_string<char> >::Tuple> >::erase(HT<std::__cxx11::basic_string<char> >::Tuple&)’\n                 tuples.erase(t);\n                 ^\nIn file included from /usr/include/c++/5/vector:64:0,\n                 from source.cpp:2,\n                 from main.cpp:2:\n/usr/include/c++/5/bits/stl_vector.h:1146:7: note: candidate: std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp, _Alloc>::const_iterator) [with _Tp = HT<std::__cxx11::basic_string<char> >::Tuple; _Alloc = std::allocator<HT<std::__cxx11::basic_string<char> >::Tuple>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<HT<std::__cxx11::basic_string<char> >::Tuple*, std::vector<HT<std::__cxx11::basic_string<char> >::Tuple, std::allocator<HT<std::__cxx11::basic_string<char> >::Tuple> > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = HT<std::__cxx11::basic_string<char> >::Tuple*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const HT<std::__cxx11::basic_string<char> >::Tuple*, std::vector<HT<std::__cxx11::basic_string<char> >::Tuple, std::allocator<HT<std::__cxx11::basic_string<char> >::Tuple> > >; typename __gnu_cxx::__alloc_traits<typename std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const HT<std::__cxx11::basic_string<char> >::Tuple*]\n       erase(const_iterator __position)\n       ^\n/usr/include/c++/5/bits/stl_vector.h:1146:7: note:   no known conversion for argument 1 from ‘HT<std::__cxx11::basic_string<char> >::Tuple’ to ‘std::vector<HT<std::__cxx11::basic_string<char> >::Tuple, std::allocator<HT<std::__cxx11::basic_string<char> >::Tuple> >::const_iterator {aka __gnu_cxx::__normal_iterator<const HT<std::__cxx11::basic_string<char> >::Tuple*, std::vector<HT<std::__cxx11::basic_string<char> >::Tuple, std::allocator<HT<std::__cxx11::basic_string<char> >::Tuple> > >}’\n/usr/include/c++/5/bits/stl_vector.h:1173:7: note: candidate: std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp, _Alloc>::const_iterator, std::vector<_Tp, _Alloc>::const_iterator) [with _Tp = HT<std::__cxx11::basic_string<char> >::Tuple; _Alloc = std::allocator<HT<std::__cxx11::basic_string<char> >::Tuple>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<HT<std::__cxx11::basic_string<char> >::Tuple*, std::vector<HT<std::__cxx11::basic_string<char> >::Tuple, std::allocator<HT<std::__cxx11::basic_string<char> >::Tuple> > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = HT<std::__cxx11::basic_string<char> >::Tuple*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const HT<std::__cxx11::basic_string<char> >::Tuple*, std::vector<HT<std::__cxx11::basic_string<char> >::Tuple, std::allocator<HT<std::__cxx11::basic_string<char> >::Tuple> > >; typename __gnu_cxx::__alloc_traits<typename std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const HT<std::__cxx11::basic_string<char> >::Tuple*]\n       erase(const_iterator __first, const_iterator __last)\n       ^\n/usr/include/c++/5/bits/stl_vector.h:1173:7: note:   candidate expects 2 arguments, 1 provided\n",
            1595469600,
            1595475600,
            0,
            1595471937.8964944
        ]
    ]
}