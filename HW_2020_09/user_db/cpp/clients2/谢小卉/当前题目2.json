{
    "__update_time__": 1595474542.639618,
    "field_names": [
        "题目名",
        "问题",
        "主程序",
        "答案",
        "评语",
        "开始时间",
        "截止时间",
        "分数",
        "提交时间"
    ],
    "field_types": [
        "text",
        "text",
        "text",
        "text",
        "text",
        "time",
        "time",
        "number",
        "time"
    ],
    "rows": [
        [
            "A.3 (C++)",
            "在课堂上讲的哈希表的基础上，写一个以整数为键的只有一个类型参数的哈希表类, HT&lt;E&gt;。<br><p><span style=\"font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;; font-size: 1rem;\">另外，请添加一个函数 getKeys，该函数返回所有二元组(tuple)中的键(key)。</span></p><p><span style=\"font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;; font-size: 1rem; font-weight: bolder;\">HINT</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;; font-size: 1rem;\">：尝试通过添加额外代码(&lt;10行)完成该题。</span><br></p><p><span style=\"font-weight: bolder;\">EXAMPLE INPUT</span></p><pre style=\"font-size: 14px;\">2000\n</pre><p><span style=\"font-weight: bolder;\">EXAMPLE OUTPUT</span></p><pre style=\"font-size: 14px;\">2000\ntext51\ntext151\ntext251\ntext351\ntext451\ntext551\ntext651\ntext751\ntext851\ntext951\ntext1051\ntext1151\ntext1251\ntext1351\ntext1451\ntext1551\ntext1651\ntext1751\ntext1851\ntext1951\n0</pre>",
            "\n#include \"source.cpp\"\n\n#include <iostream>\n#include <sstream>\nusing namespace std;\n\nint main() {\n\tint test_count;\n\tcin >> test_count;\n\tHT<string> map;\n\tfor (int i = 0; i < test_count; ++ i) {\n\t\tstringstream ss;\n\t\tss << \"text\" << (1 + i);\n\t\tmap.put(i * 10, ss.str());\n\t}\n\tcout << map.size() << endl;\n\tfor (int i = 0; i < test_count; ++ i) {\n\t\tif (! map.containsKey(i * 10)) {\n\t\t\tcout << \"bad\" << endl;\n\t\t}\n\t\telse if (i % 100 == 50) {\n\t\t\tcout << map[i * 10] << endl;\n\t\t}\n\t}\n\tvector<int> keys = map.getKeys();\n\tfor (int i = 0; i < keys.size(); ++ i) {\n\t\tmap.remove(keys[i]);\n\t}\n\tcout << map.size() << endl;\n}",
            "#include <vector>\nusing namespace std;\n\ntemplate <typename E>\nclass Tuple{\npublic:\n\tint key;\n\tE val;\n\tbool in_use;\n \n\tTuple(){in_use = false;}\n};\n\ntemplate <typename E>\nclass HT{\nprivate:\n\tvector<Tuple<E>> tuples;\n\tint _size;\n\npublic:\n\tHT(){\n\t\ttuples.resize(4000);\n\t\t_size = 0;\n\t}\n \t\n\tint hashfunction(int key){\n\t\tint hashcode = 0;\n\t\twhile (key){\n\t\t\thashcode = (hashcode << 5) + (key % 10);\n   \t\t\tkey /= 10;\n  \t\t}\n  \t\treturn hashcode % tuples.size();\n \t}\n \n \tint indexofkey(int key){\n  \t\tint index = hashfunction(key);\n \t\twhile (true){\n   \t\t\tif (tuples[index].in_use == false)\n    \t\t\treturn index;\n   \t\t\tif (tuples[index].key == key)\n    \t\t\treturn index;\n   \t\t\tindex = (index + 1) % tuples.size();\n  \t\t}\n \t}\n \n \tvoid put(int key, E val){\n  \t\tint index = indexofkey(key);\n  \t\ttuples[index].val = val;\n  \t\ttuples[index].key = key;\n  \t\tif (tuples[index].in_use == false){\n   \t\t\ttuples[index].in_use = true;\n   \t\t\t_size++;\n  \t\t}\n \t}\n \n \tint size(){return _size;}\n \n \tbool containsKey(int key){\n  \t\tint index = indexofkey(key);\n  \t\treturn tuples[index].in_use == true;\n \t}\n \n \tE operator[](int key){\n  \t\tint index = indexofkey(key);\n  \t\treturn tuples[index].val;\n \t}\n \n \tvector<int> getKeys(){\n  \t\tvector<int> ans;\n  \t\tfor (int i = 0; i < tuples.size(); i++){\n   \t\t\tif (tuples[i].in_use) ans.push_back(tuples[i].key);\n   \t\t}\n  \t\treturn ans;\n \t}\n \n \tvoid remove(int key){\n  \t\tint index = indexofkey(key);\n  \t\ttuples[index].in_use = false;\n \t \t_size--;\n \t}\n};",
            "",
            1595469600,
            1595475600,
            0,
            -2209017943.0
        ]
    ]
}