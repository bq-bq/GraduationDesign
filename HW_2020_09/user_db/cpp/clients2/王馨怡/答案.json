{
    "__update_time__": 1595475409.7533033,
    "field_names": [
        "题目名",
        "用户名",
        "答案",
        "提交时间",
        "分数",
        "评语"
    ],
    "field_types": [
        "text",
        "text",
        "text",
        "time",
        "number",
        "text"
    ],
    "foreign_keys": {},
    "primary_keys": [],
    "rows": [
        [
            "测试2",
            "王馨怡",
            "#include<iostream>\n#include<cstring>\nusing namespace std;\nint main() {\n\tstring arr[10];\n\tint i=0;\n\tfor(i=0;i<10;i++) cin >> arr[i];\n\tfor(i=0;i<9;i++){\n\t\tfor(int j=0;j<9-i;++j){\n\t\t\tif(arr[j]>arr[j+1]){\n\t\t\t\tstring temp=arr[j];\n\t\t\t\tarr[j]=arr[j+1];\n\t\t\t\tarr[j+1]=temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor(i=0;i<10;i++) cout<<arr[i]<<\" \";\n\tcout<<endl;\n}",
            1587611044.7393558,
            100,
            "# 答案正确"
        ],
        [
            "测试1",
            "王馨怡",
            "#include <iostream>\nusing namespace std;\nint main () {\n\tstring a[3];\n\tfor(int i=0;i<3;i++){\n\t\tcin>>a[i];\n\t}\n\tfor(int i=2;i>=0;i--){\n\t\tcout<<a[i]<<\" \";\n\t}\n\tcout<<endl;\n}",
            1587611400.9389646,
            100,
            "# 答案正确"
        ],
        [
            "1.1 (C++)",
            "王馨怡",
            "class Matrix5x5\n{\npublic:\n\tdouble arr[5][5];\n\t\n\tMatrix5x5(){\n\t\tfor(int i=0;i<5;++i){\n\t\t\tfor(int j=0;j<5;++j){\n\t\t\t   arr[i][j]=0;\n\t\t    }\n\t    }\n\t}\n\t\n\tdouble get(int row,int col){\n\t\treturn this->arr[row][col];\n\t}\n\t\n\tvoid set(int row ,int col ,double value){\n\t\tthis->arr[row][col]=value;\n\t}\n\t\n\tMatrix5x5 operator + (const Matrix5x5 & x){\n\t\tMatrix5x5 temp;\n\t\tfor(int i=0;i<5;++i){\n\t\t\tfor(int j=0;j<5;++j){\n\t\t\t\ttemp.arr[i][j]=this->arr[i][j]+x.arr[i][j];\n\t\t\t}\n\t\t}\n\t\treturn temp;\n\t}\n\t\n};",
            1588157462.8751724,
            100,
            "# 答案正确"
        ],
        [
            "1.2 (C++)",
            "王馨怡",
            "#include <cstring>\nusing namespace std;\nclass School\n{\npublic:\n\tchar *name;\n\tint age;\n\tSchool(){\n\t\tthis->name=new char[10];\n\t\tstrcpy(this->name,\"NO_NAME\");\n\t\tthis->age=0;\n\t}\n\tvoid setName(char name[]){\n\t\tdelete[] this->name;\n\t\t//this->name=new char[strlen(name)+1];\n\t\tstrcpy(this->name,name);\n\t}\n\tvoid setAge(int year){\n\t\tthis->age=year;\n\t}\n\tvoid operator ++ (){\n\t\tthis->age++;\n\t}\n};",
            1588214663.9803815,
            100,
            "# 答案正确"
        ],
        [
            "2020/05/08",
            "王馨怡",
            "double & Tensor_get(int dimensions, const int sizes[],double data[], int x0, int x1, int x2, int x3) {\n\t\n\tif (dimensions == 1) {\n\t\treturn data[x0];\n\t}\n\telse if (dimensions == 2) {\n\t\treturn data[x1 * sizes[0] + x0];\n\t}\n\telse if (dimensions == 3) {\n\t\treturn data[x1 * sizes[0] + x0 + x2 * sizes[0] * sizes[1]];\n\t}\n\telse {\n\t\treturn data[x3 * sizes[0] * sizes[1] * sizes[2] + x2 * sizes[1] * sizes[0] + x1 * sizes[0] + x0];\n\t}\n\t\n}",
            1588908593.5105925,
            100,
            "# 答案正确"
        ],
        [
            "2020/05/14",
            "王馨怡",
            "#include <iostream>\nusing namespace std;\nvoid Tensor_print(int dimensions, const int sizes[], const double data[]){\n\tif ( dimensions == 1){\n\t\tcout << \"Tensor of \"<<sizes[0]<<\"\\n\";\n\t\tfor (int i = 0; i < sizes[0]; ++ i)  cout << data[i] <<\"\\n\";\n\t}\n\telse if (dimensions == 2){\n\t\tint k=0;\n\t\tcout << \"Tensor of \"<<sizes[0]<<\"x\"<<sizes[1]<<\"\\n\";\n\t\tfor (int i = 0; i < sizes[0]; ++ i) {\n\t\t\tfor (int j = 0; j < sizes[1]; ++ j) cout << \"    \"<<data[k++];\n\t\t\tcout << \"\\n\";\n\t\t}\n\t}\n\t\n\telse if(dimensions == 3){\n\t\tint k=0;\n\t\tcout << \"Tensor of \"<<sizes[0]<<\"x\"<<sizes[1]<<\"x\"<<sizes[2]<<\"\\n\";\n\t\tfor (int i = 0; i < sizes[0]; ++ i) {\n\t\t\tcout <<\"data[\"<<i<<\"]\"<<\"\\n\";\n\t\t\tfor (int j = 0; j < sizes[1]; ++ j){\n\t\t\t\tfor (int b = 0; b < sizes[2]; ++ b) cout <<\"    \"<< data[k++];\n\t\t\t\tcout << \"\\n\";\n\t\t\t}\n\t\t}\n\t}\n\telse if(dimensions==4){\n\t\tint a=0,k=0;\n\t\tcout << \"Tensor of \"<<sizes[0]<<\"x\"<<sizes[1]<<\"x\"<<sizes[2]<<\"x\"<<sizes[3]<<\"\\n\";\n\t\tfor (int i = 0; i < sizes[0]; ++ i) {\n\t\t\tfor (int j = 0; j < sizes[1]; ++ j){\n\t\t\t\tcout << \"data[\" << i <<\"][\"<< j <<\"]\" << \"\\n\";\n\t\t\t\tfor (int x = 0; x < sizes[2]; ++ x){\n\t\t\t\t\tfor (int y = 0; y < sizes[3]; ++ y) cout <<\"    \" <<data[k++];\n\t\t\t\t\tcout << \"\\n\";\n\t\t\t\t} \n\t\t\t} \n\t\t}\n\t}\n}",
            1589426815.936286,
            100,
            "# 答案正确"
        ],
        [
            "2.1 (C++)",
            "王馨怡",
            "#include <iostream>\nusing namespace std;\nclass Matrix\n{\nprivate:\n\tint rows;\n\tint columns;\n\tdouble * values;\npublic:\n\t\n\tMatrix (int rows, int columns){\n\t\tthis-> rows=rows;\n\t\tthis->columns=columns;\n\t\tint k=0;\n\t\tthis->values=new double [rows*columns];\n\t\tfor (int i = 0; i < rows; ++ i){\n\t\t\tfor (int j = 0; j < columns; ++ j) {\n\t\t\t\tthis->values[k++]=0;\n\t\t\t}\n\t\t} \n\t}\n\tint print() const{\n\t\t\tint k=0;\n\t\t\tfor (int i = 0; i < rows; ++ i){\n\t\t\t\tfor(int j=0;j<columns;j++){\n\t\t\t\t\tcout << \"    \"<<values[k++];\n\t\t\t\t}\n\t\t\t\tcout<<\"\\n\";\n\t\t\t} \n\t}\n\t\n\t~Matrix(){\n\t\tdelete []values;\n\t}\n};",
            1589439447.3452194,
            100,
            "# 答案正确"
        ],
        [
            "2.2 (C++)",
            "王馨怡",
            "#include <iostream>\n#include <iomanip>\nusing namespace std;\nclass Matrix\n{\nprivate:\n\tint rows;\n\tint columns;\n\tdouble * values;\npublic:\n\t\n\tMatrix (int rows, int columns,double values[]){\n\t\tthis-> rows=rows;\n\t\tthis->columns=columns;\n\t\tint k=0;\n\t\tint i=0;\n\t\tthis->values=new double [rows*columns];\n\t\tfor (int p = 0; p < rows; ++ p){\n\t\t\tfor (int q = 0; q < columns; ++ q) {\n\t\t\t\tthis->values[k++]=values[i++];\n\t\t\t}\n\t\t} \n\t}\n\tint print() const{\n\t\t\tint k=0;\n\t\t\tfor (int i = 0; i < rows; ++ i){\n\t\t\t\tfor(int j=0;j<columns;j++){\n\t\t\t\t\tcout <<setw(5)<<setiosflags(ios::right)<<values[k++];\n\t\t\t\t}\n\t\t\t\tcout<<\"\\n\";\n\t\t\t} \n\t}\n\t\n\t~Matrix(){\n\t\tdelete []values;\n\t}\n};",
            1589440298.6481366,
            100,
            "# 答案正确"
        ],
        [
            "2.3 (C++)",
            "王馨怡",
            "#include <iostream>\nusing namespace std;\nclass Matrix\n{\nprivate:\n\tint rows;\n\tint columns;\n\tdouble * values;\npublic:\n\t\n\tMatrix (int rows, int columns,double values[]){\n\t\tthis-> rows=rows;\n\t\tthis->columns=columns;\n\t\tint k=0;\n\t\tint i=0;\n\t\tthis->values=new double [rows*columns];\n\t\tfor (int p = 0; p < rows; ++ p){\n\t\t\tfor (int q = 0; q < columns; ++ q) {\n\t\t\t\tthis->values[k++]=values[i++];\n\t\t\t}\n\t\t} \n\t}\n\tMatrix(const Matrix & matrix1){\n\t\tthis->rows=matrix1.rows;\n\t\tthis->columns=matrix1.columns;\n\t\tthis->values=new double [rows*columns];\n\t\tfor (int i = 0; i < rows*columns; ++ i) {\n\t\t\tthis->values[i]=matrix1.values[i];\n\t\t}\n\t}\n\tint print() const{\n\t\t\tint k=0;\n\t\t\tfor (int i = 0; i < rows; ++ i){\n\t\t\t\tfor(int j=0;j<columns;j++){\n\t\t\t\t\tcout << \"    \"<<values[k++];\n\t\t\t\t}\n\t\t\t\tcout<<\"\\n\";\n\t\t\t} \n\t}\n\t\n\t~Matrix(){\n\t\tdelete []values;\n\t}\n};",
            1589441847.1232455,
            100,
            "# 答案正确"
        ],
        [
            "2.5 (C++)",
            "王馨怡",
            "#include <iostream>\nusing namespace std;\nclass Matrix\n{\nprivate:\n\tint rows;\n\tint columns;\n\tdouble * values;\npublic:\n\t\n\tMatrix (int rows, int columns){\n\t\tthis-> rows=rows;\n\t\tthis->columns=columns;\n\t\tint k=0;\n\t\tthis->values=new double [rows*columns];\n\t\tfor (int i = 0; i < rows; ++ i){\n\t\t\tfor (int j = 0; j < columns; ++ j) {\n\t\t\t\tthis->values[k++]=0;\n\t\t\t}\n\t\t} \n\t}\n\t\n\tMatrix (int rows, int columns,double values[]){\n\t\tthis-> rows=rows;\n\t\tthis->columns=columns;\n\t\tint k=0;\n\t\tint i=0;\n\t\tthis->values=new double [rows*columns];\n\t\tfor (int p = 0; p < rows; ++ p){\n\t\t\tfor (int q = 0; q < columns; ++ q) {\n\t\t\t\tthis->values[k++]=values[i++];\n\t\t\t}\n\t\t} \n\t}\n\t\n\tint print() const{\n\t\t\tint k=0;\n\t\t\tfor (int i = 0; i < rows; ++ i){\n\t\t\t\tfor(int j=0;j<columns;j++){\n\t\t\t\t\tcout << \"    \"<<values[k++];\n\t\t\t\t}\n\t\t\t\tcout<<\"\\n\";\n\t\t\t} \n\t}\n\t\n\tMatrix getRow(int row){\n\t\tMatrix temp(1,columns);\n\t\tint k=(rows-1)*columns;\n\t\tfor (int i = 0; i < this->columns; ++ i){\n\t\t\ttemp.values[i]=this->values[k+i];\n\t\t} \n\t\treturn temp;\n\t} \n\t\n\t/*Matrix getRow(int row){\n\t\tMatrix temp(1,columns);\n\t\tfor (int i = 0; i < this->columns; ++ i)  temp.values[i]=this->values[(row-1)*this->columns+i];\n\t\treturn temp;\n\t   }*/\n\tMatrix getColumn(int columns){\n\t\tMatrix temp(rows,1);\n\t\tint k=columns-1;\n\t\tfor(int i=0;i<this->rows;i++){\n\t\t\ttemp.values[i]=this->values[k];\n\t\t\tk=k+this->columns;\n\t\t}\n\t\treturn temp;\n\t}\n\t\n\t~Matrix(){\n\t\tdelete []values;\n\t}\n};",
            1589445035.9775069,
            100,
            "# 答案正确"
        ],
        [
            "2.6 (C++)",
            "王馨怡",
            "#include <iostream>\nusing namespace std;\nclass Matrix\n{\nprivate:\n\tint rows;\n\tint columns;\n\tdouble * values;\npublic:\n\t\n\tMatrix (int rows, int columns,double values[]){\n\t\tthis-> rows=rows;\n\t\tthis->columns=columns;\n\t\tint k=0;\n\t\tint i=0;\n\t\tthis->values=new double [rows*columns];\n\t\tfor (int p = 0; p < rows; ++ p){\n\t\t\tfor (int q = 0; q < columns; ++ q) {\n\t\t\t\tthis->values[k++]=values[i++];\n\t\t\t}\n\t\t} \n\t}\n\t\n\tint print() const{\n\t\t\tint k=0;\n\t\t\tfor (int i = 0; i < rows; ++ i){\n\t\t\t\tfor(int j=0;j<columns;j++){\n\t\t\t\t\tcout << \"    \"<<values[k++];\n\t\t\t\t}\n\t\t\t\tcout<<\"\\n\";\n\t\t\t} \n\t}\n\t\n\tMatrix concatenateRows(const Matrix & matrix2) const{\n\t\tdouble arr[(this->rows+matrix2.rows)*matrix2.columns];\n\t\tfor (int i = 0; i < this->rows*this->columns; ++ i)  arr[i]=this->values[i];\n\t\tfor (int i = this->rows*this->columns; i < (this->rows+matrix2.rows)*matrix2.columns; ++ i)  \n\t\t\tarr[i]=matrix2.values[i-this->rows*this->columns];\n\t\t\tMatrix temp(this->rows+matrix2.rows , matrix2.columns ,arr);\n\t\t\treturn temp;\n\t}\n\t\n\tMatrix concatenateColumns(const Matrix & matrix2) const{\n\t\tdouble arr[(this->columns+matrix2.columns)*matrix2.rows];\n\t\tint k=0;\n\t\tfor(int m=0;m<matrix2.rows;m++){\n\t\t\tfor(int n=0;n<this->columns+matrix2.columns;n++){\n\t\t\t\tif(n<this->columns) arr[k++]=this->values[n+m*this->columns];\n\t\t\t\tif(n>=this->columns&&n<(this->columns+matrix2.columns)) arr[k++]=matrix2.values[n-this->columns+m*matrix2.columns];\n\t\t\t}\n\t\t}\n\t\t\tMatrix temp( matrix2.rows ,this->columns+matrix2.columns ,arr);\n\t\t\treturn temp;\n\t}\n\n\t~Matrix(){\n\t\tdelete []values;\n\t}\n};",
            1589455193.1969628,
            100,
            "# 答案正确"
        ],
        [
            "2.9 (C++)",
            "王馨怡",
            "#include <iostream>\nusing namespace std;\n\nclass Matrix{\n\tprivate:\n\t  int rows;\n\t  int columns;\n\t  double *values;\n\tpublic:\n\t  Matrix(int rows, int columns, double values[]){\n\t\t  this->rows=rows;\n\t\t  this->columns=columns;\n\t\t  this->values=new double[rows*columns];\n\t\t  for (int i = 0; i < rows*columns; ++ i)   this->values[i]=values[i];\n\t  }\n\t\n\t  Matrix(const Matrix & matrix2){\n\t\t  this->rows=matrix2.rows;\n\t\t  this->columns=matrix2.columns;\n\t\t  this->values=new double[rows*columns];\n\t\t  for (int i = 0; i < rows*columns; ++ i)  this->values[i]=matrix2.values[i];\n\t  }\n\t\n\t  ~Matrix(){\n\t\t  delete[]values;\n\t  }\n\t\n\t void print(){\n\t\t  int k=0;\n\t\t  for (int i = 0; i < rows; ++ i) {\n\t\t\t  for (int j = 0; j < columns; ++ j)  cout << \"    \" << values[k++];\n\t\t\t  cout << \"\\n\";\n\t\t  }\n\t  }\n\t\n\t  Matrix operator + (const Matrix & matrix2) const{\n\t\t  double value[rows*columns];\n\t\t  for (int i = 0; i < rows*columns; ++ i) value[i]=matrix2.values[i]+this->values[i];\n\t\t  Matrix temp(this->rows,this->columns,value);\n\t\t  return temp;\n\t  }\n\t\n\t  Matrix operator - (const Matrix & matrix2) const{\n\t\t  double value[rows*columns];\n\t\t  for (int i = 0; i < rows*columns; ++ i)  value[i]=this->values[i]-matrix2.values[i];\n\t\t  Matrix temp(this->rows,this->columns,value);\n\t\t  return temp;\n\t  }\n\t\n\t  Matrix operator + (double value) const{\n\t\t  double Value[rows*columns];\n\t\t  for (int i = 0; i < rows*columns; ++ i)  Value[i]=this->values[i]+value;\n\t\t  Matrix temp(this->rows,this->columns,Value);\n\t\t  return temp;\n\t  }\n\t\n\t  Matrix operator - (double value) const{\n\t\t  double Value[rows*columns];\n\t\t  for (int i = 0; i < rows*columns; ++ i)  Value[i]=this->values[i]-value;\n\t\t  Matrix temp(this->rows,this->columns,Value);\n\t\t  return temp;\n\t  }\n\t\t  \n};",
            1590031704.4630005,
            100,
            "# 答案正确"
        ],
        [
            "2.4 (C++)",
            "王馨怡",
            "#include <iostream>\nusing namespace std;\n\nclass Matrix{\n\tprivate:\n\t  int rows;\n     int columns;\n     double * values;\n\t\n\tpublic:\n     Matrix(int rows, int columns){\n\t\t this->rows=rows;\n\t\t this->columns=columns;\n\t\t this->values=new double[rows*columns];\n\t\t for (int i = 0; i < rows*columns; ++ i)  this->values[i]=0;\n\t  }\n\t\n\t  Matrix(int rows, int columns, double values[]){\n\t\t this->rows=rows;\n\t\t this->columns=columns;\n\t\t this->values=new double[rows*columns];\n\t\t for (int i = 0; i < rows*columns; ++ i)  this->values[i]=values[i];\n\t  }\n\t\n\t  ~Matrix(){\n\t\t  delete [] values;\n\t  }\n\t\n    void print(){\n\t\t int k=0;\n\t\t for (int i = 0; i < this->rows; ++ i) {\n\t\t\t for (int j = 0; j < this->columns; ++ j)  cout << \"    \" << this->values[k++];\n\t\t\t cout << '\\n';\n\t\t }\n\t }\t\n\t\n\t void set(int row, int column, double value){\n\t\t  this->values[columns*(row-1)+column-1]=value;\n\t  }\n\t\n\t  Matrix operator = (const Matrix & matrix2){\n\t\t  delete[]values;\n\t\t  this->rows=matrix2.rows;\n\t\t  this->columns=matrix2.columns;\n\t\t  this->values=new double[rows*columns];\n\t\t  for (int i = 0; i < rows*columns; ++ i)  this->values[i]=matrix2.values[i];\n\t  }\n\t  \n};",
            1590064892.5773592,
            100,
            "# 答案正确"
        ],
        [
            "2.8 (C++)",
            "王馨怡",
            "#include <iostream>\nusing namespace std;\n\nclass Matrix{\n\tprivate:\n\t  int rows;\n     int columns;\n     double * values;\n\t\n\tpublic:\n\t\n\t  Matrix(int rows, int columns, double values[]){\n\t\t this->rows=rows;\n\t\t this->columns=columns;\n\t\t this->values=new double[rows*columns];\n\t\t for (int i = 0; i < rows*columns; ++ i)  this->values[i]=values[i];\n\t  }\n\t\n\tMatrix(const Matrix & matrix2){\n\t\t this->rows=matrix2.rows;\n\t\t this->columns=matrix2.columns;\n\t\t this->values=new double[rows*columns];\n\t\t for (int i = 0; i < rows*columns; ++ i)  this->values[i]=matrix2.values[i];\t\t\n\t}\n\t\n\tvoid print(){\n\t\tint k=0;\n\t\tfor (int i = 0; i < rows; ++ i){\n\t\t\tfor (int j = 0; j < columns; ++ j) cout << \"    \"<<values[k++];\n\t\t\tcout << \"\\n\";\n\t\t} \n\t}\n\t  ~Matrix(){\n\t\t  delete [] values;\n\t  }\n\t\n\tMatrix transpose(){\n\t\tdouble arr[rows*columns];\n\t\tint k=0;\n\t\tfor(int i=0;i<this->columns;++i){\n\t\t\tfor (int j = 0; j < this->rows; ++ j){\n\t\t\t\tarr[k++]=this->values[this->columns*j+i];\n\t\t   }\n\t\t}\n\t\t  Matrix temp(columns,rows,arr);\n\t     return temp;\n\t}\n\n  \n};",
            1590064939.3538175,
            100,
            "# 答案正确"
        ],
        [
            "2.11 (C++)",
            "王馨怡",
            "#include <iostream>\nusing namespace std;\n\nclass Matrix{\n\tprivate:\n\t  int rows;\n     int columns;\n     double * values;\n\t\n\tpublic:\n\t\n\t  Matrix(int rows, int columns, double values[]){\n\t\t this->rows=rows;\n\t\t this->columns=columns;\n\t\t this->values=new double[rows*columns];\n\t\t for (int i = 0; i < rows*columns; ++ i)  this->values[i]=values[i];\n\t  }\n\t\n\tMatrix(const Matrix & matrix2){\n\t\t this->rows=matrix2.rows;\n\t\t this->columns=matrix2.columns;\n\t\t this->values=new double[rows*columns];\n\t\t for (int i = 0; i < rows*columns; ++ i)  this->values[i]=matrix2.values[i];\t\t\n\t}\n\t\n\tvoid print(){\n\t\tint k=0;\n\t\tfor (int i = 0; i < rows; ++ i){\n\t\t\tfor (int j = 0; j < columns; ++ j) cout << \"    \"<<values[k++];\n\t\t\tcout << \"\\n\";\n\t\t} \n\t}\n\t  ~Matrix(){\n\t\t  delete [] values;\n\t  }\n\t\n     Matrix max() const{\n\t  if(this->rows>1){\n\t\t double arr[this->columns];\n\t\t int k=0;\n\t\t for (int i = 0; i < columns; ++ i) {\n\t\t\t int Max=0;\n\t\t\t for (int j = 0; j < rows; ++ j){\n\t\t\t\t if(values[j*columns+i]>Max) Max=values[j*columns+i];\n\t\t\t } \n\t\t\t arr[k++]=Max;\n\t\t }\n\t\t \t  Matrix temp(1,this->columns,arr);\n\t\t\t  return temp;\n\t  }\n\t\t else{\n\t\t\t double arr[1];\n\t\t\t int Max=0;\n\t\t\t for (int i = 0; i < columns; ++ i)  if(values[i]>Max) Max=values[i];\n\t\t\t arr[0]=Max;\n\t\t\t Matrix temp(1,1,arr);\n\t\t\t return temp;\n\t\t }\n\t }\n\t\n\t  Matrix min() const{\n\t  if(this->rows>1){\n\t\t double arr[this->columns];\n\t\t int k=0;\n\t\t for (int i = 0; i < columns; ++ i) {\n\t\t\t int Min=values[0];\n\t\t\t for (int j = 0; j < rows; ++ j){\n\t\t\t\t if(values[j*columns+i]<Min) Min=values[j*columns+i];\n\t\t\t } \n\t\t\t arr[k++]=Min;\n\t\t }\n\t\t \t  Matrix temp(1,this->columns,arr);\n\t\t\t  return temp;\n\t  }\n\t\t else{\n\t\t\t double arr[1];\n\t\t\t int Min=values[0];\n\t\t\t for (int i = 0; i < columns; ++ i)  if(values[i]<Min) Min=values[i];\n\t\t\t arr[0]=Min;\n\t\t\t Matrix temp(1,1,arr);\n\t\t\t return temp;\n\t\t }\n\t  }\n\t\n\t  Matrix sum() const{\n\t\t  if(this->rows>1){\n\t\t double arr[this->columns];\n\t\t int k=0;\n      for(int i=0;i<columns;++i){\n\t\t  arr[k]=0;\n\t\t  for(int j=0;j<rows;++j) arr[k]=arr[k]+this->values[columns*j+i];\n\t\t  ++k;\n\t  }\n\t\t Matrix temp(1,this->columns,arr); \n\t\t return temp;\n\t  }\n\t\t  else{\n\t\t\t  double sum[1];\n\t\t\t  sum[0]=0;\n\t\t\t  for (int i = 0; i < this->columns; ++ i)  sum[0]=sum[0]+this->values[i];\n\t\t\t  Matrix temp(1,1,sum);\n\t\t\t  return temp;\n\t\t  }\n\t  }\n\t  \n\t\t \n};",
            1590065016.514447,
            100,
            "# 答案正确"
        ],
        [
            "2.7 (C++)",
            "王馨怡",
            "#include <iostream>\nusing namespace std;\n\nclass Matrix{\n\tprivate:\n\t  int rows;\n     int columns;\n     double * values;\n\t\n\tpublic:\n\t\n\t  Matrix(int rows, int columns, double values[]){\n\t\t this->rows=rows;\n\t\t this->columns=columns;\n\t\t this->values=new double[rows*columns];\n\t\t for (int i = 0; i < rows*columns; ++ i)  this->values[i]=values[i];\n\t  }\n\t\n\tMatrix(const Matrix & matrix2){\n\t\t this->rows=matrix2.rows;\n\t\t this->columns=matrix2.columns;\n\t\t this->values=new double[rows*columns];\n\t\t for (int i = 0; i < rows*columns; ++ i)  this->values[i]=matrix2.values[i];\t\t\n\t}\n\t\n\tvoid print(){\n\t\tint k=0;\n\t\tfor (int i = 0; i < rows; ++ i){\n\t\t\tfor (int j = 0; j < columns; ++ j) cout << \"    \"<<values[k++];\n\t\t\tcout << \"\\n\";\n\t\t} \n\t}\n\t  ~Matrix(){\n\t\t  delete [] values;\n\t  }\n\t\n\tMatrix reshape(int rows, int columns) const{\n\t\tdouble arr[rows*columns];\n\t\tint k=0,a=0,b=0;\n\t\tfor(int i=0;i<this->columns;++i){\n\t\t\tfor (int j = 0; j < this->rows; ++ j){\n\t\t\t\tarr[a*columns+b]=this->values[this->columns*j+i];\n\t\t\t\ta++;\n\t\t\t\tif(a==rows){\n\t\t\t\t\ta=0; \n\t\t\t\t\tb++;\n\t\t\t\t}\n\t\t   }\n\t\t}\n\t\t  Matrix temp(rows,columns,arr);\n\t     return temp;\n\t}\n\n  \n};",
            1590064917.5921445,
            100,
            "# 答案正确"
        ],
        [
            "2.10 (C++)",
            "王馨怡",
            "#include <iostream>\nusing namespace std;\n\nclass Matrix{\n\tprivate:\n\t  int rows;\n     int columns;\n     double * values;\n\t\n\tpublic:\n\t\n\t  Matrix(int rows, int columns, double values[]){\n\t\t this->rows=rows;\n\t\t this->columns=columns;\n\t\t this->values=new double[rows*columns];\n\t\t for (int i = 0; i < rows*columns; ++ i)  this->values[i]=values[i];\n\t  }\n\t\n\tMatrix(const Matrix & matrix2){\n\t\t this->rows=matrix2.rows;\n\t\t this->columns=matrix2.columns;\n\t\t this->values=new double[rows*columns];\n\t\t for (int i = 0; i < rows*columns; ++ i)  this->values[i]=matrix2.values[i];\t\t\n\t}\n\t\n\tvoid print(){\n\t\tint k=0;\n\t\tfor (int i = 0; i < rows; ++ i){\n\t\t\tfor (int j = 0; j < columns; ++ j) cout << \"    \"<<values[k++];\n\t\t\tcout << \"\\n\";\n\t\t} \n\t}\n\t  ~Matrix(){\n\t\t  delete [] values;\n\t  }\n\t\n    Matrix  operator * (const Matrix & matrix2) const{\n\t\tdouble arr[this->rows*matrix2.columns];\n\t\tint i=0;\n\n\t\t\tfor (int a = 0; a < this->rows; ++ a){\n\t\t\t\tfor (int b = 0; b < matrix2.columns; ++ b) {\n\t\t\t\t\tarr[i]=0;\n\t\t\t\t\tfor (int j = 0;j<matrix2.rows; ++ j) \n\t\t\t\t\t\tarr[i]=arr[i]+ this->values[a*this->columns+j]*matrix2.values[matrix2.columns*j+b];\n\t\t\t\t\t++i;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\tMatrix temp(this->rows,matrix2.columns,arr);\n\t\treturn temp;\n\t}\n\n    Matrix  operator * (double value) const{\n\t\tdouble arr[rows*columns];\n\t\tfor (int i = 0; i < rows*columns; ++ i)  arr[i]=this->values[i]*value;\n\t\tMatrix temp(rows,columns,arr);\n\t\treturn temp;\n\t}\n};",
            1590064954.258573,
            100,
            "# 答案正确"
        ],
        [
            "2.12 (C++)",
            "王馨怡",
            "#include <iostream>\n#include<cmath>\nusing namespace std;\n\nclass Matrix{\n\tprivate:\n\t  int rows;\n     int columns;\n     double * values;\n\t\n\tpublic:\n\t\n\t  Matrix(int rows, int columns, double values[]){\n\t\t this->rows=rows;\n\t\t this->columns=columns;\n\t\t this->values=new double[rows*columns];\n\t\t for (int i = 0; i < rows*columns; ++ i)  this->values[i]=values[i];\n\t  }\n\t\n\tMatrix(const Matrix & matrix2){\n\t\t this->rows=matrix2.rows;\n\t\t this->columns=matrix2.columns;\n\t\t this->values=new double[rows*columns];\n\t\t for (int i = 0; i < rows*columns; ++ i)  this->values[i]=matrix2.values[i];\t\t\n\t}\n\t\n\tvoid print(){\n\t\tint k=0;\n\t\tfor (int i = 0; i < rows; ++ i){\n\t\t\tfor (int j = 0; j < columns; ++ j) cout << \"    \"<<values[k++];\n\t\t\tcout << \"\\n\";\n\t\t} \n\t}\n\t  ~Matrix(){\n\t\t  delete [] values;\n\t  }\n\tMatrix pow(double exponent){\n\t\tdouble arr[columns*rows];\n\t\tfor (int i = 0; i < columns*rows; ++ i) arr[i]=1; \n\t\tfor (int i = 0; i < columns*rows; ++ i) {\n\t\t\tfor (int j = 0; j < exponent; ++ j)  arr[i]=arr[i]*values[i];\n\t\t}\n\t\tMatrix temp(rows,columns,arr);\n\t\treturn temp;\n\t}\n   \n   Matrix exp(){\n\t\t\tdouble arr[columns*rows];\n\t\t\tfor (int i = 0; i < this->rows * this->columns; ++ i) {\n\t\t\t\tarr[i] = std::exp(this->values[i]);\n\t\t\t}\n\t      Matrix temp(this->rows, this->columns,arr);\n\t\t\treturn temp;\n\t}\n\t\n\tMatrix log(){\n\t\t\tdouble arr[columns*rows];\n\t\t\tfor (int i = 0; i < this->rows * this->columns; ++ i) {\n\t\t\t\tarr[i] = std::log(this->values[i]);\n\t\t\t}\n\t      Matrix temp(this->rows, this->columns,arr);\n\t\t\treturn temp;\t\n\t}\n\t\n\tMatrix abs(){\n\t\t\tdouble arr[columns*rows];\n\t\t\tfor (int i = 0; i < this->rows * this->columns; ++ i) {\n\t\t\t\tarr[i] = std::abs(this->values[i]);\n\t\t\t}\n\t      Matrix temp(this->rows, this->columns,arr);\n\t\t\treturn temp;\n\t}\n};",
            1590064978.459291,
            100,
            "# 答案正确"
        ],
        [
            "6.2 (C++)",
            "王馨怡",
            "#include <iostream>\n#include <typeinfo>\nusing namespace std;\n\ntemplate <typename T>\n\nclass  Matrix{\nprivate:\n\tint rows;\n\tint columns;\n\tT * values;\n\t\npublic:\n\t\n\tMatrix(int rows, int columns){\n\t\tthis->rows=rows;\n\t\tthis->columns=columns;\n\t\tthis->values=new T[rows*columns];\n\t\tfor (int i = 0; i < rows*columns; ++ i)  this->values[i]=0;\n\t}\n\t\n\tvoid print(){\n\t\tint k=0;\n\t\tfor (int i = 0; i < rows; ++ i){\n\t\t\tfor (int j = 0; j < columns; ++ j) cout << \"    \"<<values[k++];\n\t\t\tcout << \"\\n\";\n\t\t} \n\t}\n\t  ~Matrix(){\n\t\t  delete [] values;\n\t  }\n\t\n};",
            1590633215.869697,
            100,
            "# 答案正确"
        ],
        [
            "6.1 (C++)",
            "王馨怡",
            "template <typename T>\n\nclass Matrix{\n\tpublic:\n\t\tMatrix<T>(int a, int b) {\n\t\t\trows = a;\n\t\t\tcolumns = b;\n\t\t}\n\t\n\t\tMatrix<T>(int a, int b, const T v[]) {\n\t\t\trows = a;\n\t\t\tcolumns = b;\n\t\t\tfor (int i = 0; i < a * b; ++ i) {\n\t\t\t\tvalues[i] = v[i];\n\t\t\t} \n\t\t}\n\t\n\t\tvoid print() {\n\t\t\tfor (int i = 0; i < rows; ++ i) {\n\t\t\t\tfor (int j = 0; j < columns; ++ j) {\n\t\t\t\t\tcout << \"    \" << values[columns * i + j];\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t}\n\t\n\t\tT & get(int a, int b) {\n\t\t\treturn values[(a - 1) * columns + b - 1];\n\t\t}\n\t\n\t\tvoid operator=(Matrix<T> &other) {\n\t\t\tthis->rows = other.rows;\n\t\t\tthis->columns = other.columns;\n\t\t\tfor (int i = 0; i < this->rows * this->columns; ++ i) {\n\t\t\t\tthis->values[i] = other.values[i];\n\t\t\t} \n\t\t}\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tT values[1000];\n};",
            1590669497.375061,
            100,
            "# 答案正确"
        ],
        [
            "6.3 (C++)",
            "王馨怡",
            "#include <iostream>\n#include<vector>\nusing namespace std;\n\ntemplate <typename T>\n\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tvector<T> values;\n\tpublic:\n\t\tMatrix<T>(int a, int b) {\n\t\t\tthis->rows = a;\n\t\t\tthis->columns = b;\n\t\t\tfor (int i = 0; i < a * b; ++ i) {\n\t\t\t\tthis->values.push_back(0);\n\t\t\t}\n\t\t}\n\t\n\t\tMatrix<T>(int a, int b, vector<T> & v) {\n\t\t\tthis->rows = a;\n\t\t\tthis->columns = b;\n\t\t\tthis->values = v;\n\t\t}\n\t\n\t\tvoid print() {\n\t\t\tfor (int i = 0; i < rows; ++ i) {\n\t\t\t\tfor (int j = 0; j < columns; ++ j) {\n\t\t\t\t\tcout << \"    \" << values[i * columns + j];\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t}\n\t\n\t\tT & get(int a, int b) {\n\t\t\treturn values[(a - 1) * columns + b - 1];\n\t\t}\n\t\n\t\tvoid operator=(Matrix<T> &other) {\n\t\t\tthis->rows = other.rows;\n\t\t\tthis->columns = other.columns;\n\t\t\tthis->values = other.values;\n\t\t}\n\t\n\t\tMatrix<T> operator+(Matrix<T> &other) {\n\t\t\tMatrix<T> temp(this->rows, this->columns);\n\t\t\tfor (int i = 0; i < this->rows * this->columns; ++ i) {\n\t\t\t\ttemp.values[i] = this->values[i] + other.values[i];\n\t\t\t}\n\t\t\treturn temp;\n\t\t}\n\t\n\t\tMatrix<T> operator+(T a) {\n\t\t\tMatrix<T> temp(this->rows, this->columns);\n\t\t\tfor (int i = 0; i < this->rows * this->columns; ++ i) {\n\t\t\t\ttemp.values[i] = this->values[i] + a;\n\t\t\t}\n\t\t\treturn temp;\n\t\t}\n\t\n\t\tMatrix<T> operator-(Matrix<T> &other) {\n\t\t\tMatrix<T> temp(this->rows, this->columns);\n\t\t\tfor (int i = 0; i < this->rows * this->columns; ++ i) {\n\t\t\t\ttemp.values[i] = this->values[i] - other.values[i];\n\t\t\t}\n\t\t\treturn temp;\n\t\t}\n\t\n\t\tMatrix<T> operator-(T a) {\n\t\t\tMatrix<T> temp(this->rows, this->columns);\n\t\t\tfor (int i = 0; i < this->rows * this->columns; ++ i) {\n\t\t\t\ttemp.values[i] = this->values[i] - a;\n\t\t\t}\n\t\t\treturn temp;\n\t\t}\n\t\n\t\tMatrix<T> operator*(Matrix<T> & other) {\n\t\t\tMatrix<T> temp(this->rows, other.columns);\n\t\t\tfor (int i = 0; i < this->rows; ++ i) {\n\t\t\t\tfor (int j = 0; j < other.columns; j ++) {\n\t\t\t\t\ttemp.values[i * other.columns + j] = 0;//\n\t\t\t\t\tfor (int k = 0; k < this->columns; k ++) {\n\t\t\t\t\t\ttemp.values[i * other.columns + j] = temp.values[i * other.columns + j] + this->values[k + i * this->columns] * other.values[k * other.columns + j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn temp;\n\t\t}\n\t\n\t\tMatrix<T> operator*(T a) {\n\t\t\tMatrix<T> temp(this->rows, this->columns);\n\t\t\tfor (int i = 0; i < this->rows * this->columns; ++ i) {\n\t\t\t\ttemp.values[i] = this->values[i] * a;\n\t\t\t}\n\t\t\treturn temp;\n\t\t}\n\t\n\t\tMatrix<T> getColumn(int a) {\n\t\t\tMatrix<T> temp(this->rows, 1);\n\t\t\tfor (int i = 0; i < this->rows; ++ i) {\n\t\t\t\ttemp.values[i] = this->values[i * this->columns + a - 1];\n\t\t\t}\n\t\t\treturn temp;\n\t\t}\n\t\n\t\tMatrix<T> getRow(int a) {\n\t\t\tMatrix<T> temp(1, this->columns);\n\t\t\tfor (int i = 0; i < this->columns; ++ i) {\n\t\t\t\ttemp.values[i] = this->values[(a - 1) * this->columns + i];\n\t\t\t}\n\t\t\treturn temp;\n\t\t}\n\t\n\t\tMatrix<T> reshape(int a, int b) {\n\t\t\tMatrix<T> temp(a, b);\n\t\t\tint index = 0;\n\t\t\tint cut = 0;\n\t\t\tfor (int i = 0; i < b; ++ i) {\n\t\t\t\tfor (int j = 0; j < a; ++ j) {\n\t\t\t\t\ttemp.values[i + j * b] = this->values[index];\n\t\t\t\t\tif (index + this->columns < a * b) {\n\t\t\t\t\t\tindex = index + this->columns;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tcut ++;\n\t\t\t\t\t\tindex = cut;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn temp;\n\t\t}\n\t\t\t\n\t\tMatrix<T> concatenateRows(Matrix<T> & other) {\n\t\t\tMatrix<T> temp(this->rows + other.rows, this->columns);\n\t\t\tfor (int i = 0; i < this->rows * this->columns; ++ i) {\n\t\t\t\ttemp.values[i] = this->values[i];\n\t\t\t} \n\t\t\tfor (int i = 0; i < other.rows * other.columns; ++ i) {\n\t\t\t\ttemp.values[this->rows * this->columns + i] = other.values[i];\n\t\t\t}\n\t\t\treturn temp;\n\t\t}\n\t\n\t\tMatrix<T> concatenateColumns(Matrix<T> & other) {\n\t\t\tMatrix<T> temp(this->rows, this->columns + other.columns);\n\t\t\tfor (int i = 0; i < this->rows; ++ i) {\n\t\t\t\tfor (int j = 0; j < this->columns; j ++) {\n\t\t\t\t\ttemp.values[i * (this->columns + other.columns) + j] = this->values[i * this->columns + j];\n\t\t\t\t}\n\t\t\t\tfor (int j = 0; j < other.columns; j ++) {\n\t\t\t\t\ttemp.values[i * (this->columns + other.columns) + j + this->columns] = other.values[i * other.columns + j];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn temp;\n\t\t}\n\t\n\t\tMatrix<T> transpose() {\n\t\t\tMatrix<T> temp(this->columns, this->rows);\n\t\t\tint index = 0;\n\t\t\tfor (int i = 0; i < this->columns; ++ i) {\n\t\t\t\tfor (int j = 0; j < this->rows; ++ j) {\n\t\t\t\t\ttemp.values[i + j * this->columns] = this->values[index];\n\t\t\t\t\tindex ++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn temp;\n\t\t}\n \n\t\tMatrix<T> max() {\n\t\t\tif(this->rows > 1){\n\t\t\t\tMatrix<T> temp(1, this->columns);\n\t\t\t\tfor (int i = 0; i < this->columns; ++ i) {\n\t\t\t\t\ttemp.values[i] = this->values[i];\n\t\t\t\t\tfor (int j = 1; j < this->rows; ++ j) {\n\t\t\t\t\t\tif (temp.values[i] < this->values[j * this->columns + i]) {\n\t\t\t\t\t\t\ttemp.values[i] = this->values[j * this->columns + i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t\treturn temp;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tMatrix<T> temp(1, 1);\n\t\t\t\ttemp.values[0] = this->values[0];\n\t\t\t\tfor (int i = 1; i < this->columns; ++ i) {\n\t\t\t\t\tif (temp.values[0] < this->values[i]) {\n\t\t\t\t\t\ttemp.values[0] = this->values[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn temp;\n\t\t\t}\n\t\t}\n \n\t\tMatrix<T> min() {\n\t\t\tif(this->rows > 1){\n\t\t\t\tMatrix<T> temp(1, this->columns);\n\t\t\t\tfor (int i = 0; i < this->columns; ++ i) {\n\t\t\t\t\ttemp.values[i] = this->values[i];\n\t\t\t\t\tfor (int j = 1; j < this->rows; ++ j) {\n\t\t\t\t\t\tif (temp.values[i] > this->values[j * this->columns + i]) {\n\t\t\t\t\t\t\ttemp.values[i] = this->values[j * this->columns + i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t\treturn temp;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tMatrix<T> temp(1, 1);\n\t\t\t\ttemp.values[0] = this->values[0];\n\t\t\t\tfor (int i = 1; i < this->columns; ++ i) {\n\t\t\t\t\tif (temp.values[0] > this->values[i]) {\n\t\t\t\t\t\ttemp.values[0] = this->values[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn temp;\n\t\t\t}\n\t\t}\n \n\t\tMatrix<T> sum() {\n\t\t\tif(this->rows > 1){\n\t\t\t\tMatrix<T> temp(1, this->columns);\n\t\t\t\tfor (int i = 0; i < this->columns; ++ i) {\n\t\t\t\t\tfor (int j = 0; j < this->rows; ++ j) {\n\t\t\t\t\t\ttemp.values[i] = temp.values[i] + this->values[j * this->columns + i];\n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t\treturn temp;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tMatrix<T> temp(1, 1);\n\t\t\t\tfor (int i = 0; i < this->columns; ++ i) {\n\t\t\t\t\ttemp.values[0] += this->values[i];\n\t\t\t\t}\n\t\t\t\treturn temp;\n\t\t\t}\n\t\t}\n\t\t\n};",
            1590669688.738278,
            100,
            "# 答案正确"
        ],
        [
            "7.2 (C++)",
            "王馨怡",
            "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\nvector<string> split(const string & line, const string & temp=\" \"){\n\tvector<string> words;\n\tint st=0;\n\twhile(st < line.size()){\n\t\tint end=line.find(temp , st);\n\t\tint end2=end;\n\t\twhile(line.find(temp , end2+1)==end2+1) ++end2;  \n\t\tif(st == end) st=st+temp.size();\n\t\telse{\n\t\t\tif(end == -1){\n\t\t\t\twords.push_back(line.substr(st));\n\t\t\t}\n\t\t\twords.push_back(line.substr(st,end-st));\n\t\t\tst=end2+1;\n\t\t}\n\t}\n\treturn words;\n}",
            1591241544.2618554,
            100,
            "# 答案正确"
        ],
        [
            "7.1 (C++)",
            "王馨怡",
            "#include<cmath>\n\nclass Triangle : public GeometricObject{\n\n    private:\n     double side1;\n     double side2;\n     double side3;\n\n    public:\n     Triangle(){\n         side1=1.0;\n         side2=1.0;\n         side3=1.0;\n     }\n    \n    Triangle(double a, double b, double c){\n        side1=a;\n        side2=b;\n        side3=c;\n    }\n\n    double getSide1(){\n        return side1;\n    }\n\n    double getSide2(){\n        return side2;\n    }\n\n    double getSide3(){\n        return side3;\n    }\n\n    double getArea(){\n        double s = (side1 + side2 + side3) / 2;\n        double area = sqrt(s * (s - side1) * (s - side2) * (s - side3));\n        return area;\n    }\n\n    double getPerimeter(){\n        return side1+side2+side3;\n    }\n\n};",
            1591274009.7729018,
            100,
            "# 答案正确"
        ],
        [
            "7.3 (C++)",
            "王馨怡",
            "\ntemplate <typename A>\nvector<A> map2(const vector<A> & x,const vector<A> & y, A (*map_func)(const A &,const A &)) {\n\tvector<A> res;\n\tfor (int i = 0; i < x.size(); ++ i)\n\t\tres.push_back(map_func(x[i],y[i]));\n\treturn res;\n}\n\ntemplate <typename A>\nvector<A> map2(const vector<A> & x,const A & y, A (*map_func)(const A &,const A &)) {\n\tvector<A> res;\n\tfor (int i = 0; i < x.size(); ++ i)\n\t\tres.push_back(map_func(x[i],y));\n\treturn res;\n}",
            1591274652.4709997,
            100,
            "# 答案正确"
        ],
        [
            "8.5 (C++)",
            "王馨怡",
            "#include <cmath>\nclass Point3D: public Point2D\n{\nprivate:\n \tdouble z;\npublic:\n \tPoint3D(){\n  \t\tsetX(0);\n  \t\tsetY(0);\n \t\tz = 0;\n \t}\n\t\n \tPoint3D(double a, double b, double c){\n  \t\tsetX(a);\n  \t\tsetY(b);\n  \t\tz = c;\n \t}\n\t\n \tdouble getZ(){\n  \t\treturn z;\n \t}\n\t\n \tdouble distance(Point2D & point2){\n  \t\tPoint3D & a = dynamic_cast<Point3D &> (point2);\n  \t\tdouble dx, dy, dz;\n  \t\tdx = getX() - a.getX();\n  \t\tdy = getY() - a.getY();\n  \t\tdz = this->z - a.getZ();\n  \t\treturn sqrt(dx * dx + dy * dy + dz * dz);\n \t}\n};",
            1591846484.0022342,
            100,
            "# 答案正确"
        ],
        [
            "8.1 (C++)",
            "王馨怡",
            "class Full : public Matrix {\npublic:\n\tFull(int a, int b) {\n\t\trows = a;\n\t\tcolumns = b;\n\t\tfor (int i = 0; i < rows * columns; ++ i) {\n\t\t\tvalues[i] = 0;\n\t\t} \n\t}\n\t\n\tFull(int a, int b, double v[]) {\n\t\trows = a;\n\t\tcolumns = b;\n\t\tfor (int i = 0; i < rows * columns; ++ i) {\n\t\t\tvalues[i] = v[i];\n\t\t} \n\t}\n\t\n\tFull(const Matrix & matrix2) {\n\t\tthis->rows = matrix2.size(1);\n\t\tthis->columns = matrix2.size(2);\n\t\tfor (int i = 0; i < rows; ++ i) {\n\t\t\tfor (int j = 0; j < columns; ++ j) {\n\t\t\t\tthis->values[i * columns + j] = matrix2.get(i, j);\n\t\t\t}\n\t\t} \n\t}\n\t\n\tint size(int dimension) const {\n\t\tif (dimension == 1) {\n\t\t\treturn rows;\n\t\t}\n\t\telse {\n\t\t\treturn columns;\n\t\t}\n\t}\n\t\n\tvoid set(int row, int column, double value) {\n\t\tvalues[(row - 1) * columns + column - 1] = value;\n\t}\n\t\n\tdouble get(int row, int column) const {\n\t\treturn values[row * columns + column];\n\t}\n\t\n\tvoid print() const {\n\t\tfor (int i = 0; i < rows; ++ i) {\n\t\t\tfor (int j = 0; j < columns; ++ j) {\n\t\t\t\tcout << \"    \" << values[i * columns + j];\n\t\t\t}\n\t\t\tcout << endl;\n\t\t} \n\t}\n\t\n\tMatrix & operator = (const Matrix & matrix2) {\n\t\tthis->rows = matrix2.size(1);\n\t\tthis->columns = matrix2.size(2);\n\t\tfor (int i = 0; i < rows; ++ i) {\n\t\t\tfor (int j = 0; j < columns; ++ j) {\n\t\t\t\tthis->values[i * columns + j] = matrix2.get(i, j);\n\t\t\t}\n\t\t} \n\t}\n\t\nprivate:\n\tint rows;\n\tint columns;\n\tdouble values[1000];\n};",
            1591879048.9510229,
            100,
            "# 答案正确"
        ],
        [
            "8.3 (C++)",
            "王馨怡",
            "#include <iostream>\n#include<vector>\nusing namespace std;\n\nclass Sparse : public Matrix {\npublic:\n\tSparse(int a, int b) {\n\t\trows = a;\n\t\tcolumns = b;\n\t}\n\t\n\tSparse operator + (Sparse & sparse2) {\n\t\tSparse temp(this->rows, this->columns);\n\t\tint flag;\n\t\tfor (int i = 0; i < this->values.size(); ++ i) {\n\t\t\tflag = 0;\n\t\t\tfor (int j = 0; j < sparse2.values.size(); ++ j) {\n\t\t\t\tif (this->values[i].row == sparse2.values[j].row) {\n\t\t\t\t\tif (this->values[i].column == sparse2.values[j].column) {\n\t\t\t\t\t\tflag = 1;\n\t\t\t\t\t\tif (this->values[i].value + sparse2.values[j].value != 0) {\n\t\t\t\t\t\t\ttemp.set(this->values[i].row, this->values[i].column, this->values[i].value + sparse2.values[j].value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flag == 0) {\n\t\t\t\ttemp.set(this->values[i].row, this->values[i].column, this->values[i].value);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < sparse2.values.size(); ++ i) {\n\t\t\tflag = 0;\n\t\t\tfor (int j = 0; j < this->values.size(); ++ j) {\n\t\t\t\tif (this->values[j].row == sparse2.values[i].row) {\n\t\t\t\t\tif (this->values[j].column == sparse2.values[i].column) {\n\t\t\t\t\t\tflag = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flag == 0) {\n\t\t\t\ttemp.set(sparse2.values[i].row, sparse2.values[i].column, sparse2.values[i].value);\n\t\t\t}\n\t\t}\n\t\treturn temp;\n\t}\n\t\n\tint size(int dimension) const {\n\t\tif (dimension == 1) {\n\t\t\treturn rows;\n\t\t}\n\t\telse {\n\t\t\treturn columns;\n\t\t}\n\t}\n\t\n\tvoid set(int a, int b, double v) {\n\t\tEntry temp;\n\t\ttemp.row = a;\n\t\ttemp.column = b;\n\t\ttemp.value = v;\n\t\tvalues.push_back(temp);\n\t\tint m = values.size() - 1;\n\t\tfor (int i = m; i > 0; -- i) {\n\t\t\tif (values[i].row < values[i - 1].row || values[i].row == values[i - 1].row && values[i].column < values[i - 1].column) {\n\t\t\t\tEntry temp = values[i];\n\t\t\t\tvalues[i] = values[i - 1];\n\t\t\t\tvalues[i - 1] = temp;\n\t\t\t}\n\t\t}\n\t}//暂时不考虑赋值的位置和之前一样的情况吧\n\t\n\tdouble get(int a, int b) const {\n\t\tfor (int i = 0; i < values.size(); ++ i) {\n\t\t\tif (values[i].row == a) {\n\t\t\t\tif (values[i].column == b) {\n\t\t\t\t\treturn values[i].value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\tvoid print() {\n\t\tfor (int i = 0; i < values.size(); ++ i) {\n\t\t\tcout << '(' << values[i].row << ',' <<values[i].column << ',' << values[i].value << ')' << endl;\n\t\t}\n\t}\n\nprivate:\n\tint rows;\n\tint columns;\n\tvector<Entry> values;\n};",
            1591879489.6460588,
            100,
            "# 答案正确"
        ],
        [
            "8.4 (C++)",
            "王馨怡",
            "#include <iostream>\n#include<vector>\nusing namespace std;\n\nclass Sparse : public Matrix {\npublic:\n\tSparse(int a, int b) {\n\t\trows = a;\n\t\tcolumns = b;\n\t}\n\t\n\tSparse operator * (Sparse & sparse2) {\n\t\tSparse temp(this->rows, this->columns);\n\t\tint flag;\n\t\tfor (int i = 0; i < this->values.size(); ++ i) {\n\t\t\tfor (int j = 0; j < sparse2.values.size(); ++ j) {\n\t\t\t\tif (this->values[i].column == sparse2.values[j].row) {\n\t\t\t\t\tif (this->values[i].value + sparse2.values[j].value != 0) {\n\t\t\t\t\t\tflag = 0;\n\t\t\t\t\t\tfor (int k = 0; k < temp.values.size(); ++ k) {\n\t\t\t\t\t\t\tif (temp.values[k].row == this->values[i].row && temp.values[k].column == sparse2.values[j].column) {\n\t\t\t\t\t\t\t\tflag = 1;\n\t\t\t\t\t\t\t\tif (temp.values[k].value + this->values[i].value * sparse2.values[j].value == 0) {\n\t\t\t\t\t\t\t\t\ttemp.values.erase(temp.values.begin() + k);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\ttemp.values[k].value += this->values[i].value * sparse2.values[j].value;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (flag == 0) {\n\t\t\t\t\t\t\ttemp.set(this->values[i].row, sparse2.values[j].column, this->values[i].value * sparse2.values[j].value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\t\n\t\treturn temp;\n\t}\n\t\n\tint size(int dimension) const {\n\t\tif (dimension == 1) {\n\t\t\treturn rows;\n\t\t}\n\t\telse {\n\t\t\treturn columns;\n\t\t}\n\t}\n\t\n\tvoid set(int a, int b, double v) {\n\t\tEntry temp;\n\t\ttemp.row = a;\n\t\ttemp.column = b;\n\t\ttemp.value = v;\n\t\tvalues.push_back(temp);\n\t\tint m = values.size() - 1;\n\t\tfor (int i = m; i > 0; -- i) {\n\t\t\tif (values[i].row < values[i - 1].row || values[i].row == values[i - 1].row && values[i].column < values[i - 1].column) {\n\t\t\t\tEntry temp = values[i];\n\t\t\t\tvalues[i] = values[i - 1];\n\t\t\t\tvalues[i - 1] = temp;\n\t\t\t}\n\t\t}\n\t}//暂时不考虑赋值的位置和之前一样的情况吧\n\t\n\tdouble get(int a, int b) const {\n\t\tfor (int i = 0; i < values.size(); ++ i) {\n\t\t\tif (values[i].row == a) {\n\t\t\t\tif (values[i].column == b) {\n\t\t\t\t\treturn values[i].value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\tvoid print() {\n\t\tfor (int i = 0; i < values.size(); ++ i) {\n\t\t\tcout << '(' << values[i].row << ',' <<values[i].column << ',' << values[i].value << ')' << endl;\n\t\t}\n\t}\n\nprivate:\n\tint rows;\n\tint columns;\n\tvector<Entry> values;\n};",
            1591879510.0546396,
            100,
            "# 答案正确"
        ],
        [
            "8.6 (C++)",
            "王馨怡",
            "#include <iostream>\nusing namespace std;\nclass MyTensor:public Tensor<double>{\nprivate:\n  \tvector<double>n;\npublic:\n  \tMyTensor(vector<int>sizes):Tensor<double>(sizes){\n   \t\tint total=1;\n   \t\tfor(int i=0;i<sizes.size();++i) total*=sizes[i];\n   \t\tfor(int i=0;i<total;++i) n.push_back(double());\n  \t};\n\t\n  \tdouble&get(const vector<int>&indexes){\n   \t\tint index=0;\n   \t\tfor(int i=0;i<indexes.size();++i){\n    \t\tint temp=indexes[i];\n    \t\tfor(int j=i+1;j<indexes.size();++j) temp*=indexes[j];\n    \t\tindex+=temp;\n   \t\t}\n   \t\treturn n[index];\n  \t}\n \n}; ",
            1592451347.2015414,
            100,
            "# 答案正确"
        ],
        [
            "9.1 (C++)",
            "王馨怡",
            "class Circle {\nprivate:\n\tdouble radius;\npublic:\n\tCircle(double a) {\n\t\tradius = a;\n\t}\n\t\n\tint operator<(const Circle &other) {\n\t\tif (this->radius < other.radius) {\n\t\t\treturn 1;\n\t\t}\n\t\telse return 0;\n\t}\n\t\n\tint operator<=(const Circle &other) {\n\t\tif (this->radius <= other.radius) {\n\t\t\treturn 1;\n\t\t}\n\t\telse return 0;\n\t}\n\t\n\tint operator==(const Circle &other) {\n\t\tif (this->radius == other.radius) {\n\t\t\treturn 1;\n\t\t}\n\t\telse return 0;\n\t}\n\t\n\tint operator!=(const Circle &other) {\n\t\tif (this->radius != other.radius) {\n\t\t\treturn 1;\n\t\t}\n\t\telse return 0;\n\t}\n\t\n\tint operator>=(const Circle &other) {\n\t\tif (this->radius >= other.radius) {\n\t\t\treturn 1;\n\t\t}\n\t\telse return 0;\n\t}\n\t\n\tint operator>(const Circle &other) {\n\t\tif (this->radius > other.radius) {\n\t\t\treturn 1;\n\t\t}\n\t\telse return 0;\n\t}\n};",
            1593089213.922105,
            100,
            "# 答案正确"
        ],
        [
            "9.2 (C++)",
            "王馨怡",
            "#include <iostream>\nusing namespace std;\n\nclass I {\nprivate:\n\tvector<int> sizes;\npublic:\n\tI(int a, int b = -1, int c = -1, int d = -1) {\n\t\tsizes.push_back(a);\n\t\tif(b != -1) sizes.push_back(b);\n\t\tif(c != -1) sizes.push_back(c);\n\t\tif(d != -1) sizes.push_back(d);\n\t}\n\toperator vector<int>() const {\n\t\treturn this->sizes;\n\t}\n};",
            1593089231.7661352,
            100,
            "# 答案正确"
        ],
        [
            "9.3 (C++)",
            "王馨怡",
            "#include <iostream>\n\nusing namespace std;\n\nclass Complex\n{\n\tprivate:\n\t\tdouble m_real;\n\t\tdouble m_imag;\n\tpublic:\n\t\tComplex(double real, double imag)\n\t\t{\n\t\t\tthis->m_real = real;\n\t\t\tthis->m_imag = imag;\n\t\t}\n\t\tdouble real()\n\t\t{\n\t\t\treturn this->m_real;\n\t\t}\n\t\tdouble imag()\n\t\t{\n\t\t\treturn this->m_imag;\n\t\t}\n\t\tComplex operator + (Complex & c)\n\t\t{\n\t\t\tdouble num1 = this->m_real + c.m_real;\n\t\t\tdouble num2 = this->m_imag + c.m_imag;\n\t\t\tComplex com_com(num1, num2);\n\t\t\treturn com_com;\n\t\t}\n\t\tComplex operator - (Complex & c)\n\t\t{\n\t\t\tdouble num1 = this->m_real - c.m_real;\n\t\t\tdouble num2 = this->m_imag - c.m_imag;\n\t\t\tComplex com_com(num1, num2);\n\t\t\treturn com_com;\n\t\t}\n\t\tComplex operator * (Complex & c)\n\t\t{\n\t\t\tdouble num1 = this->m_real * c.m_real - this->m_imag * c.m_imag;\n\t\t\tdouble num2 = this->m_imag * c.m_real + this->m_real * c.m_imag;\n\t\t\tComplex com_com(num1, num2);\n\t\t\treturn com_com;\n\t\t}\n\t\tComplex operator / (Complex & c)\n\t\t{\n\t\t\tdouble num1 = (this->m_real * c.m_real + this->m_imag * c.m_imag) / (c.m_real * c.m_real + c.m_imag * c.m_imag);\n\t\t\tdouble num2 = (this->m_imag * c.m_real - this->m_real * c.m_imag) / (c.m_real * c.m_real + c.m_imag * c.m_imag);\n\t\t\tComplex com_com(num1, num2);\n\t\t\treturn com_com;\n\t\t}\n\t\tComplex operator - (double num)\n\t\t{\n\t\t\tdouble num1 = this->m_real - num;\n\t\t\tdouble num2 = this->m_imag;\n\t\t\tComplex com_com(num1, num2);\n\t\t\treturn com_com;\n\t\t}\n\t\tComplex & operator += (Complex & c)\n\t\t{\n\t\t\tthis->m_real = this->m_real + c.m_real;\n\t\t\tthis->m_imag = this->m_imag + c.m_imag;\n\t\t\treturn (*this);\n\t\t}\n\t\tComplex & operator -= (Complex & c)\n\t\t{\n\t\t\tthis->m_real = this->m_real - c.m_real;\n\t\t\tthis->m_imag = this->m_imag - c.m_imag;\n\t\t\treturn (*this);\n\t\t}\n\t\tComplex & operator *= (Complex & c)\n\t\t{\n\t\t\tdouble r = this->m_real, i = this->m_imag;\n\t\t\tthis->m_real = r * c.m_real - i * c.m_imag;\n\t\t\tthis->m_imag = i * c.m_real + r * c.m_imag;\n\t\t\treturn (*this);\n\t\t}\n\t\tComplex & operator /= (Complex & c)\n\t\t{\n\t\t\tdouble r = this->m_real, i = this->m_imag;\n\t\t\tthis->m_real = (r * c.m_real + i * c.m_imag) / (c.m_real * c.m_real + c.m_imag * c.m_imag);\n\t\t\tthis->m_imag = (i * c.m_real - r * c.m_imag) / (c.m_real * c.m_real + c.m_imag * c.m_imag);\n\t\t\treturn (*this);\n\t\t}\n};\nComplex operator + (double num, Complex & c)\n{\n\tdouble num1 = c.real() + num;\n\tdouble num2 = c.imag();\n\tComplex com_com(num1, num2);\n\treturn com_com;\n}\nbool operator == (Complex & c1, Complex & c2)\n{\n\tif(c1.real() == c2.real() && c1.imag() == c2.imag()) return true;\n\treturn false;\n}\nbool operator != (Complex & c1,Complex & c2)\n{\n\tif(c1 == c2) return false;\n\treturn true;\n}",
            1593089352.7103097,
            100,
            "# 答案正确"
        ],
        [
            "9.4 (C++)",
            "王馨怡",
            "#include <iostream>\n\nusing namespace std;\n\nclass Complex\n{\n\tprivate:\n\t\tdouble real;\n\t\tdouble imag;\n\tpublic:\n\t\tfriend istream & operator>>(istream & in, Complex & A);\n    \tfriend ostream & operator<<(ostream & out, Complex & A);\n\t\tComplex operator + (const Complex c)\n\t\t{\n\t\t\tComplex com_com;\n\t\t\tcom_com.real = this->real + c.real;\n\t\t\tcom_com.imag = this->imag + c.imag;\n\t\t\treturn com_com;\n\t\t}\n\t\tComplex operator - (const Complex c)\n\t\t{\n\t\t\tComplex com_com;\n\t\t\tcom_com.real = this->real - c.real;\n\t\t\tcom_com.imag = this->imag - c.imag;\n\t\t\treturn com_com;\n\t\t}\n};\nistream & operator >> (istream & in, Complex & A)\n{\n\tin >> A.real >> A.imag;\n\treturn in;\n}\nostream & operator << (ostream & out, Complex & A)\n{\n\tout << A.real <<\" + \"<< A.imag <<\" i \";\n\treturn out;\n}",
            1593089374.965183,
            100,
            "# 答案正确"
        ],
        [
            "9.5 (C++)",
            "王馨怡",
            "#include <iostream>\n\nusing namespace std;\n\nclass Complex\n{\n\tprivate:\n\t\tdouble real;\n\t\tdouble imag;\n\tpublic:\n\t\tfriend istream & operator >> (istream & in, Complex & c);\n\t\tfriend ostream & operator << (ostream & out,const Complex & c);\n\t\tComplex ()\n\t\t{ \n\t\t\tthis->real = 0;\n\t\t\tthis->imag = 0;\n\t\t}\n\t\tComplex(Complex & c)\n\t\t{\n\t\t\tthis->real = c.real;\n\t\t\tthis->imag = c.imag;\n\t\t}\n\t\toperator double() \n\t\t{\n\t\t\treturn this->real;\n\t\t}\n\t\tComplex operator ++ (int)\n\t\t{\n\t\t\tComplex c(*this);\n\t\t\t\n\t\t\tthis->real ++;\n\t\t\treturn c;\n\t\t}\n\t\tComplex & operator ++()\n\t\t{\n\t\t\tthis->real ++;\n\t\t\treturn (*this);\n\t\t}\n\t\t\n};\nistream & operator >> (istream & in, Complex & c)\n{\n\tin >> c.real >> c.imag;\n\treturn in;\n}\nostream & operator << (ostream & out,const Complex & c)\n{\n\tout << c.real << \" + \" << c.imag << \" i\" ;\n\treturn out;\n}",
            1593089391.7261062,
            100,
            "# 答案正确"
        ],
        [
            "9.6 (C++)",
            "王馨怡",
            "#include <iostream>\n\nusing namespace std;\n\nclass Tensor\n{\n\tprivate:\n\t\tint sizes[4];\n\t\tdouble * data;\n\t\tint num;\n\n\tpublic:\n\t\tTensor(int a, int b = -1, int c = -1, int d = -1)\n\t\t{\n\t\t\tint count = 1;\n\t\t\tint sum = a;\n\t\t\tthis->sizes[0] = a;\n\t\t\tif(b!= -1)\n\t\t\t{\n\t\t\t\tcount ++;\n\t\t\t\tthis->sizes[1] = b;\n\t\t\t\tsum *= b;\n\t\t\t}\n\t\t\tif(c != -1)\n\t\t\t{\n\t\t\t\tcount ++;\n\t\t\t\tthis->sizes[2] = c;\n\t\t\t\tsum *= c;\n\t\t\t}\n\t\t\tif(d!=-1)\n\t\t\t{\n\t\t\t\tcount ++;\n\t\t\t\tthis->sizes[3] = d;\n\t\t\t\tsum *= d;\n\t\t\t}\n\t\t\tthis->num = count;\n\t\t\tdata = new double[sum];\n\t\t}\n\t\t~Tensor()\n\t\t{\n\t\t\tdelete[] data;\n\t\t}\n\t\tdouble & operator() (int a, int b = -1, int c = -1, int d =- 1)\n\t\t{\n\t\t\tint index = a;\n\t\t\tif(b != -1)\n\t\t\t{\n\t\t\t\tindex += b * this->sizes[0];\n\t\t\t}\n\t\t\tif(c != -1)\n\t\t\t{\n\t\t\t\tindex += c * this->sizes[0] * this->sizes[1];\n\t\t\t}if(d != -1)\n\t\t\t{\n\t\t\t\tindex += d * this->sizes[0] * this->sizes[1] * this->sizes[2];\n\t\t\t}\n\t\t\treturn data[index];\n\t\t}\n};",
            1593089406.7923594,
            100,
            "# 答案正确"
        ],
        [
            "9.7 (C++)",
            "王馨怡",
            "",
            1593089538.913068,
            96,
            "main.cpp: In function ‘int main()’:\nmain.cpp:10:2: error: ‘Tensor’ was not declared in this scope\n  Tensor t3;\n  ^\nmain.cpp:11:9: error: ‘t3’ was not declared in this scope\n  cin >> t3;\n         ^\nmain.cpp:14:9: error: expected ‘;’ before ‘t4’\n  Tensor t4;\n         ^\nmain.cpp:15:9: error: ‘t4’ was not declared in this scope\n  cin >> t4;\n         ^\n"
        ],
        [
            "10.2 (C++)",
            "王馨怡",
            "catch (NonPositiveValueException & ex) {\n cout << \"caught: NonPositiveValueException\" << endl;\n}\ncatch (out_of_range & ex) {\n cout << \"caught: out_of_range\" << endl;\n}",
            1593660285.931013,
            100,
            "# 答案正确"
        ],
        [
            "10.1 (C++)",
            "王馨怡",
            "#include <stdexcept>\n\ndouble Matrix:: get(int row, int column) const {\n\tif (row > rows || column > columns) {\n\t\tthrow std::out_of_range(\"out_of_range\");\n\t}\n\treturn elements[(row - 1) * columns + column - 1];\n}\n\t\nvoid Matrix:: set(int row, int column, double value) {\n\tif (row > rows || column > columns) {\n\t\tthrow std::out_of_range(\"out_of_range\");\n\t}\n\telements[(row - 1) * columns + column - 1] = value;\n}\n\nstruct MatrixSizesDoNotMatchException: public exception\n{\n  const char * what () const throw ()\n  {\n    return \"MatrixSizesDoNotMatchException\";\n  }\n};\n\t\nMatrix Matrix:: operator + (const Matrix & matrix2) const {\n\tif (this->rows != matrix2.rows || this->columns != matrix2.columns) {\n\t\tthrow MatrixSizesDoNotMatchException();\n\t}\n\tMatrix temp(this->rows, this->columns);\n\tfor (int i = 0; i < this->rows * this->columns; ++ i) {\n\t\ttemp.elements[i] = this->elements[i] + matrix2.elements[i];\n\t}\n\treturn temp;\n}",
            1593693735.9655678,
            100,
            "# 答案正确"
        ],
        [
            "2020-07-09 LAB",
            "王馨怡",
            "#include<iostream>\n#include<vector>\nusing namespace std;\n\nclass Integer\n{\n private:\n    int num;\n    static vector<Integer*> index;\npublic:\n    Integer(): num(0){\n        index.push_back(this);\n    }\n    Integer(int x): num(x){\n        index.push_back(this);\n    }\n    void change_value(const int& x){num = x;}\n    int get_value()const{return num;}\n    static void increase_all(const Integer& x){\n        for(int i = 0;i < index.size();i++){\n            index[i]->change_value(index[i]->get_value()+x.get_value());\n        }\n    }\n};\n\nvector<Integer*> Integer::index = vector<Integer*>();\n\nistream& operator >> (istream& in,Integer& x){\n    int num;\n    in >> num;\n    x.change_value(num);\n    return in;\n}\nostream& operator << (ostream& out,Integer& x){\n    out << x.get_value();\n    return out;\n}",
            1594265819.2102387,
            100,
            "# 答案正确"
        ],
        [
            "15.1 (C++)",
            "王馨怡",
            "#include <string>\n#include <vector>\nusing namespace std;\nstring tostr(vector<string> value)\n{\n\tstring tmp;\n\tstring res;\n\tres.push_back('\\t');\n\tres.push_back('\\t');\n\tres.push_back('[');\n\tfor (int i = 0; i < value.size(); i++)\n\t{\n\t\ttmp = value[i];\n\t\tres.push_back('\\'');\n\t\tfor (int j = 0; j < tmp.size(); j++)\n\t\t\tres.push_back(tmp[j]);\n\t\tres.push_back('\\'');\n\t\tres.push_back(',');\n\t}\n\tres.insert(res.size(), \"],\\n\");\n\treturn res;\n}\n\nclass Table\n{\n\t\n\tvector<string> head;\n\tvector<vector<string>> value;\n\npublic:\n\tvoid addCol(string str)\n\t{\n\t\thead.push_back(str);\n\t};\n\tTable()\n\t{\n\t\thead.resize(0);\n\t\tvalue.resize(0);\n\t}\n\tstring json()const\n\t{\n\t\tstring res;\n\t\tres = \"{\\n\\theaders: [\";\n\t\tstring tmp;\n\t\tfor (int i = 0; i < head.size();i++)\n\t\t{\n\t\t\ttmp = head[i];\n\t\t\tres.push_back('\\'');\n\t\t\tfor (int j = 0; j < tmp.size();j++)\n\t\t\t\tres.push_back(tmp[j]);\n\t\t\tres.push_back('\\'');\n\t\t\t\n\t\t\tres.push_back(',');\n\t\t}\n\t\tres.insert(res.size(), \"],\\n\\trows: [\\n\");\n\t\tfor (int i = 0; i < value.size();i++)\n\t\t\tres.insert(res.size(), tostr(value[i]));\n\n\t\tres.insert(res.size(), \"\\t],\\n}\");\n\n\t\treturn res;\n\t}\n\tvector<string> & operator[](int index)\n\t{\n\t\t\n\t\tif(index < value.size())\n\t\t{\n\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvalue.resize(index+1);\t\n\t\t}\n\t\treturn value[index];\n\t}\n};",
            1594298154.7532592,
            100,
            "# 答案正确"
        ],
        [
            "A.2 (C++)",
            "王馨怡",
            "template <typename E>\nvoid LinkedList<E>::removeAll(const E&e){\n\tint index=indexOf(e);\n\tif(index==-1) throw NotSuchElementException();\n\twhile (index!=-1){\n\t\tremove(index);\n\t\tindex=indexOf(e);\n\t}\n}",
            1594870660.7102017,
            100,
            "# 答案正确"
        ],
        [
            "A.1 (C++)",
            "王馨怡",
            "private:\n\tNode<E> * get_node(int index)const{\n\t\tif(index<0||index>=_size) return 0;\n\t\tif(index<_size/2){\n\t\t\tNode<E> * node = head;\n\t\t\tNode<E> * prev_node = 0;\n\t\t\tI(i,index){\n\t\t\t\tNode<E> * use=prev_node;\n\t\t\t\tprev_node=node;\n\t\t\t\tnode=node->next_node(use);\n\t\t\t}\n\t\t\treturn node;\n\t\t}\n\t\telse {\n\t\t\tNode<E> * node = tail;\n\t\t\tNode<E> * next_node = 0;\n\t\t\tI(i,(_size-1-index)) {\n\t\t\t\tNode<E> * use = next_node;\n\t\t\t\tnext_node=node;\n\t\t\t\tnode=node->prev_node(use);\n\t\t\t}\n\t\t\treturn node;\n\t\t}\n\t}\npublic:\n\tE & get(const int index)const{\n\t\tNode<E> * node = get_node(index);\n\t\treturn node->element;\n\t}\n\tvoid set(const int index, const E & e){\n\t\tNode<E> * node = get_node(index);\n\t\tnode->element = e;\n\t}\n\tE & getFirst()const{\n        return get(0);\n\t}\n\tE & getLast()const{\n        return get(_size-1);\n\t}\n\tvoid remove(int index){\n\t\tNode<E> * node = get_node(index);\n\t\tNode<E> * prev_node;\n\t\tNode<E> * next_node;\n\t\tif(index==0) prev_node = 0;\n\t\telse prev_node = get_node(index-1);\n\t\tif(index==_size-1) next_node = 0;\n\t\telse next_node = get_node(index+1);\n\t\tif(prev_node==0) head = next_node;\n\t\tif(next_node==0) tail = prev_node;\n\t\tif(prev_node!=0) prev_node->update_next_node(node,next_node);\n\t\tif(next_node!=0) next_node->update_prev_node(node,prev_node);\n\t\tdelete node;\n\t\t_size--;\n\t}\n\tvoid removeFirst(){\n\t\tremove(0);\n\t}\n\tvoid removeLast(){\n\t\tremove(_size-1);\n\t}\n\tvoid add(int index, const E & e){\n\t\tNode<E> * node=new Node<E>();\n\t\tnode->element = e;\n\t\tNode<E> * next_node = (index==_size ? 0 : get_node(index));\n\t\tNode<E> * prev_node = (next_node==0 ? tail : get_node(index-1));\n\t\tnode->update_prev_and_next_node(prev_node,next_node);\n\t\tif(prev_node!=0) prev_node->update_next_node(next_node,node);\n\t\tif(next_node!=0) next_node->update_prev_node(prev_node,node);\n\t\tif(prev_node==0) head=node;\n\t\tif(next_node==0) tail=node;\n\t\t_size++;\n\t}\n\tvoid addFirst(const E & e){\n\t\tadd(0,e);\n\t}\n\tvoid addLast(const E & e){\n\t\tadd(_size,e);\n\t}\n\tvoid clear(){\n\t\twhile(_size>0) removeFirst();\n\t}\n\tvoid addAll(const LinkedList & list, int index=-1){\n\t\tif(index==-1) index=_size;\n\t\tI(i,list._size){\n\t\t\tNode<E> * node = list.get_node(i);\n\t\t\tadd(index+i,node->element);\n\t\t}\n\t}\n\tLinkedList(const LinkedList & list) : _size(0), head(0), tail(0){\n        addAll(list);\n\t}\n\tLinkedList & operator = (const LinkedList & list){\n\t\tclear();\n\t\taddAll(list);\n\t\treturn *this;\n\t}\n\t~LinkedList(){\n\t\tclear();\n\t}\n\tint indexOf(const E & e)const{\n\t\tNode<E> * node = head;\n\t\tI(i,_size-1){\n\t\t\tif(node->element==e) return i;\n\t\t\tnode=get_node(i+1);\n\t\t}\n\t\treturn -1;\n\t}\n\tint lastindexOf(const E & e) const{\n\t\tNode<E> * node=tail;\n\t\tI(i,_size-1){\n\t\t\tif(node->element == e) return i;\n\t\t\tnode=get_node(_size-i-2);\n\t\t}\n\t\treturn -1;\n\t}\n\tbool contains(const E & e)const{\n\t\treturn indexOf(e)>=0;\n\t}\n\tvoid removeFirstOccurrence(const E & e){\n\t\tint index=indexOf(e);\n\t\tif(index==-1) throw NotSuchElementException();\n\t\tremove(index);\n\t}\n\tvoid removeLastOccurrence(const E & e){\n\t\tint index=lastindexOf(e);\n\t\tif(index=-1) throw NotSuchElementException();\n\t\tremove(index);\n\t}",
            1594896171.7089877,
            100,
            "# 答案正确"
        ],
        [
            "A.3 (C++)",
            "王馨怡",
            "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n#include <stdexcept>\nusing namespace std;\n\n#define I(i,n) for (size_t i = 0; i < n; ++ i)\n#define HT HashTable\n#define K int\nclass NoSuchKeyException {};\n\nsize_t circular_shift(size_t bits, int shift_bits) {\n\tconst int num_bits = 8 * sizeof(size_t);\n\tshift_bits = shift_bits % num_bits;\n\treturn bits << shift_bits | bits >> (num_bits - shift_bits);\n}\n\nsize_t hash_function(const int & key) {\n\tsize_t code = 0;\n\tI(i, key)\n\t\tcode ^= circular_shift(key, i * 5);\n\treturn code;\n}\n\ntemplate <typename V>\nclass HashTable\n{\n\tclass Tuple\n\t{\n\tpublic:\n\t\tK key;\n\t\tV val;\n\t\tbool in_use;\n\n\t\tTuple() : in_use(false) {}\n\t};\n\n\tvector<Tuple> tuples;\n\tsize_t _size;\n\n\tsize_t canonical_index(const K & key) const {\n\t\tsize_t hash_code = hash_function(key); // needs hash_function(K)\n\t\treturn hash_code % tuples.size();\n\t}\n\n\t// the returned tuple is either empty or with the same key\n\tsize_t indexOfKey(const K & key) const {\n\t\tsize_t index = canonical_index(key);\n\t\twhile (true) { // will enter a dead loop if there is not empty tuple\n\t\t\tif (! tuples[index].in_use) return index;\n\t\t\tif (tuples[index].key == key) return index;\n\t\t\tindex = (index + 1) % tuples.size();\n\t\t}\n\t}\n\npublic:\n\tHashTable() : _size(0) {\n\t\ttuples.resize(2);\n\t}\n    vector <int> getKeys(){\n\t\tvector<int> result;\n\t\tfor(int i=0;i<tuples.size();i++){\n\t\t\tresult.push_back(tuples[i].key);\n\t\t}\n\t\treturn result;\n\t}\n\tbool containsKey(const K & key) const {\n\t\tsize_t index = indexOfKey(key);\n\t\treturn tuples[index].in_use;\n\t}\n\n\tconst V & operator [] (const K & key) const {\n\t\tsize_t index = indexOfKey(key);\n\t\tif (! tuples[index].in_use) \n\t\t\treturn tuples[index].val;\n\t\treturn tuples[index].val;\n\t}\n\n\tV & operator [] (const K & key) {\n\t\tsize_t index = indexOfKey(key);\n\t\tif (! tuples[index].in_use) \n\t\t\treturn tuples[index].val;\n\t\treturn tuples[index].val;\n\t}\n\n\tvoid put(const K & key, const V & val) {\n\t\tsize_t index = indexOfKey(key);\n\t\ttuples[index].key = key;\n\t\ttuples[index].val = val;\n\t\tif (tuples[index].in_use) return;\n\t\ttuples[index].in_use = true;\n\t\t++ _size;\n\t\t// make sure empty > size / 2\n\t\tif (2 * _size > tuples.size())\n\t\t\t_double_tuples();\n\t}\n\n\tvoid _double_tuples() {\n\t\tvector<Tuple> non_empty_tuples;\n\t\tI(i, tuples.size())\n\t\t\tif (tuples[i].in_use)\n\t\t\t\tnon_empty_tuples.push_back(tuples[i]);\n\t\tclear();\n\t\ttuples.resize(tuples.size() * 2);\n\t\tI(i, non_empty_tuples.size())\n\t\t\tput(non_empty_tuples[i].key, non_empty_tuples[i].val);\n\t}\n\n\tstatic bool _between(size_t hole, size_t canonical, size_t tuple_index) {\n\t\tif (hole < tuple_index)\n\t\t\treturn canonical > hole && canonical <= tuple_index;\n\t\telse\n\t\t\treturn canonical > hole || canonical <= tuple_index;\n\t}\n\n\tvoid remove(const K & key) { \n\t\tsize_t index = indexOfKey(key);\n\t\tif (! tuples[index].in_use) \n\t\t\treturn ;\n\t\ttuples[index].in_use = false;\n\t\t-- _size;\n\t\t// if there is a hole between a tuple and its canonical position\n\t\t// move the tuple to the hole\n\t\tsize_t hole = index;\n\t\tsize_t tuple_index = hole;\n\t\twhile (true) {\n\t\t\ttuple_index = (tuple_index + 1) % tuples.size();\n\t\t\tif (! tuples[tuple_index].in_use) return;\n\t\t\tsize_t canonical = canonical_index(tuples[tuple_index].key);\n\t\t\tif (_between(hole, canonical, tuple_index)) continue;\n\t\t\ttuples[hole] = tuples[tuple_index];\n\t\t\thole = tuple_index;\n\t\t\ttuples[hole].in_use = false;\n\t\t}\n\t}\n\n\tsize_t size() const { return _size; }\n\n\tvoid clear() {\n\t\tI(i, tuples.size())\n\t\t\ttuples[i].in_use = false;\n\t\t_size = 0;\n\t}\n\n\ttemplate <typename V2>\n\tfriend ostream & operator << (ostream & out, const HashTable<V2> & dict);\n\n\ttemplate <typename V2>\n\tfriend istream & operator >> (istream & in, HashTable<V2> & dict);\n\n\tvoid _inspect() const {\n\t\tI(i, tuples.size())\n\t\t\tif (tuples[i].in_use)\n\t\t\t\tcout << \"#\" << i << \" C\" << canonical_index(tuples[i].key) \n\t\t\t\t\t<< \" \" << tuples[i].key << \" \" << tuples[i].val << endl;\n\t}\n};\n\ntemplate <typename V>\nostream & operator << (ostream & out, const HashTable<V> & dict) {\n\tout << dict.size() << endl;\n\tI(i, dict.tuples.size())\n\t\tif (dict.tuples[i].in_use)\n\t\t\tout << dict.tuples[i].key << \"\\t\" << dict.tuples[i].val << endl;\n\treturn out;\n}\n\ntemplate <typename V>\nistream & operator >> (istream & in, HashTable<V> & dict) {\n\tdict.clear();\n\tsize_t size;\n\tin >> size;\n\tI(i, size) {\n\t\tK key;\n\t\tV val;\n\t\tin >> key >> val;\n\t\tdict.put(key, val);\n\t}\n\treturn in;\n}",
            1595475407.6831813,
            100,
            "# 答案正确"
        ]
    ],
    "table_name": "答案"
}