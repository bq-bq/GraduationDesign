{
    "__update_time__": 1595837221.47598,
    "field_names": [
        "题目名",
        "用户名",
        "答案",
        "提交时间",
        "分数",
        "评语"
    ],
    "field_types": [
        "text",
        "text",
        "text",
        "time",
        "number",
        "text"
    ],
    "foreign_keys": {},
    "primary_keys": [],
    "rows": [
        [
            "测试1",
            "王硕",
            "#include <iostream>\n#include <cstring>\nusing namespace std;\nclass source\n{\n    public:\n        source(){};\n        ~source(){};\n        void set_string();\n    private:\n        char a[10],b[10],c[10];\n};\nvoid source::set_string()\n{\n    cin >> a >> b >> c;\n    cout << c << \" \" << b << \" \" << a << endl;\n}\nint main(){\n\tsource acs;\n\tacs.set_string();\n\treturn 0;\n}",
            1587534605.7275736,
            100,
            "# 答案正确"
        ],
        [
            "测试2",
            "王硕",
            "#include <iostream>\n#include <cstring>\nusing namespace std;\nclass source\n{\n    public:\n        source(){};\n        ~source(){};\n        void set_string();\n    private:\n        char a[10][10];\n};\nvoid source::set_string()\n{\n    for(int i=0;i<10;i++)cin >> a[i];\n    char temp[10];\n\tfor(int i=0;i<9;i++){\n\t\tfor(int j=i+1;j<10;j++){\n\t\t\tif(strcmp(a[i],a[j])>=0){\n\t\t\t\tstrcpy(temp,a[i]);\n\t\t\t\tstrcpy(a[i],a[j]);\n\t\t\t\tstrcpy(a[j],temp);\n\t\t\t}\n\t\t}\n\t};\n\tfor(int i=0;i<10;i++)cout << a[i] << \" \";\n\tcout << endl; \n}\nint main(){\n\tsource acs;\n\tacs.set_string();\n\treturn 0;\n}",
            1587610798.9315622,
            100,
            "# 答案正确"
        ],
        [
            "1.1 (C++)",
            "王硕",
            "class Matrix5x5\n{\n\tpublic:\n\t\tdouble matrix[5][5];\n\tMatrix5x5(){\n\t\t\tmatrix[5][5]=0;\n\t\t}\n\tdouble get(int a, int b){\n\t\tcout<<matrix[a][b];\n\t}\n\tvoid set(int a, int b, double c){\n\t\tmatrix[a][b]=c;\n\t}\n\tMatrix5x5 operator + (Matrix5x5 &a, Matrix5x5 &b) {\n\t\tMatrix5x5 &c;\n\t\treturn c;\n\t}\n\t~Matrix5x5(){};\n}",
            1588123066.387092,
            0,
            "In file included from main.cpp:1:0:\nsource.cpp:14:50: error: ‘Matrix5x5 Matrix5x5::operator+(Matrix5x5&, Matrix5x5&)’ must take either zero or one argument\n  Matrix5x5 operator + (Matrix5x5 &a, Matrix5x5 &b) {\n                                                  ^\nsource.cpp:19:1: error: expected ‘;’ after class definition\n }\n ^\nsource.cpp: In member function ‘double Matrix5x5::get(int, int)’:\nsource.cpp:9:3: error: ‘cout’ was not declared in this scope\n   cout<<matrix[a][b];\n   ^\nmain.cpp: In function ‘int main()’:\nmain.cpp:25:10: error: no match for ‘operator+’ (operand types are ‘Matrix5x5’ and ‘Matrix5x5’)\n  m3 = m1 + m2;\n          ^\nIn file included from /usr/include/c++/5/bits/stl_algobase.h:67:0,\n                 from /usr/include/c++/5/bits/char_traits.h:39,\n                 from /usr/include/c++/5/ios:40,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from main.cpp:2:\n/usr/include/c++/5/bits/stl_iterator.h:334:5: note: candidate: template<class _Iterator> std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\n     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n     ^\n/usr/include/c++/5/bits/stl_iterator.h:334:5: note:   template argument deduction/substitution failed:\nmain.cpp:25:12: note:   ‘Matrix5x5’ is not derived from ‘const std::reverse_iterator<_Iterator>’\n  m3 = m1 + m2;\n            ^\nIn file included from /usr/include/c++/5/bits/stl_algobase.h:67:0,\n                 from /usr/include/c++/5/bits/char_traits.h:39,\n                 from /usr/include/c++/5/ios:40,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from main.cpp:2:\n/usr/include/c++/5/bits/stl_iterator.h:1152:5: note: candidate: template<class _Iterator> std::move_iterator<_Iterator> std::operator+(typename std::move_iterator<_Iterator>::difference_type, const std::move_iterator<_Iterator>&)\n     operator+(typename move_iterator<_Iterator>::difference_type __n,\n     ^\n/usr/include/c++/5/bits/stl_iterator.h:1152:5: note:   template argument deduction/substitution failed:\nmain.cpp:25:12: note:   ‘Matrix5x5’ is not derived from ‘const std::move_iterator<_Iterator>’\n  m3 = m1 + m2;\n            ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from main.cpp:2:\n/usr/include/c++/5/bits/basic_string.h:4783:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4783:5: note:   template argument deduction/substitution failed:\nmain.cpp:25:12: note:   ‘Matrix5x5’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  m3 = m1 + m2;\n            ^\nIn file included from /usr/include/c++/5/string:53:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from main.cpp:2:\n/usr/include/c++/5/bits/basic_string.tcc:1151:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const _CharT*, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\n     operator+(const _CharT* __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.tcc:1151:5: note:   template argument deduction/substitution failed:\nmain.cpp:25:12: note:   mismatched types ‘const _CharT*’ and ‘Matrix5x5’\n  m3 = m1 + m2;\n            ^\nIn file included from /usr/include/c++/5/string:53:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from main.cpp:2:\n/usr/include/c++/5/bits/basic_string.tcc:1167:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(_CharT, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\n     operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n     ^\n/usr/include/c++/5/bits/basic_string.tcc:1167:5: note:   template argument deduction/substitution failed:\nmain.cpp:25:12: note:   ‘Matrix5x5’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  m3 = m1 + m2;\n            ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from main.cpp:2:\n/usr/include/c++/5/bits/basic_string.h:4820:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const _CharT*)\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4820:5: note:   template argument deduction/substitution failed:\nmain.cpp:25:12: note:   ‘Matrix5x5’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  m3 = m1 + m2;\n            ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from main.cpp:2:\n/usr/include/c++/5/bits/basic_string.h:4836:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, _CharT)\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)\n     ^\n/usr/include/c++/5/bits/basic_string.h:4836:5: note:   template argument deduction/substitution failed:\nmain.cpp:25:12: note:   ‘Matrix5x5’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  m3 = m1 + m2;\n            ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from main.cpp:2:\n/usr/include/c++/5/bits/basic_string.h:4848:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4848:5: note:   template argument deduction/substitution failed:\nmain.cpp:25:12: note:   ‘Matrix5x5’ is not derived from ‘std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  m3 = m1 + m2;\n            ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from main.cpp:2:\n/usr/include/c++/5/bits/basic_string.h:4854:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&)\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4854:5: note:   template argument deduction/substitution failed:\nmain.cpp:25:12: note:   ‘Matrix5x5’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  m3 = m1 + m2;\n            ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from main.cpp:2:\n/usr/include/c++/5/bits/basic_string.h:4860:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&)\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4860:5: note:   template argument deduction/substitution failed:\nmain.cpp:25:12: note:   ‘Matrix5x5’ is not derived from ‘std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  m3 = m1 + m2;\n            ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from main.cpp:2:\n/usr/include/c++/5/bits/basic_string.h:4872:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&)\n     operator+(const _CharT* __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4872:5: note:   template argument deduction/substitution failed:\nmain.cpp:25:12: note:   mismatched types ‘const _CharT*’ and ‘Matrix5x5’\n  m3 = m1 + m2;\n            ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from main.cpp:2:\n/usr/include/c++/5/bits/basic_string.h:4878:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(_CharT, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&)\n     operator+(_CharT __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4878:5: note:   template argument deduction/substitution failed:\nmain.cpp:25:12: note:   ‘Matrix5x5’ is not derived from ‘std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  m3 = m1 + m2;\n            ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from main.cpp:2:\n/usr/include/c++/5/bits/basic_string.h:4884:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&, const _CharT*)\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4884:5: note:   template argument deduction/substitution failed:\nmain.cpp:25:12: note:   ‘Matrix5x5’ is not derived from ‘std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  m3 = m1 + m2;\n            ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from main.cpp:2:\n/usr/include/c++/5/bits/basic_string.h:4890:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&, _CharT)\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4890:5: note:   template argument deduction/substitution failed:\nmain.cpp:25:12: note:   ‘Matrix5x5’ is not derived from ‘std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  m3 = m1 + m2;\n            ^\n"
        ],
        [
            "2020/05/08",
            "王硕",
            "double & Tensor_get(int dimensions, const int sizes[], const double data[], int x0, int x1, int x2, int x3){\n\treturn 0;\n}",
            1588908283.6028109,
            0,
            "In file included from main.cpp:1:0:\nsource.cpp: In function ‘double& Tensor_get(int, const int*, const double*, int, int, int, int)’:\nsource.cpp:2:9: error: invalid initialization of non-const reference of type ‘double&’ from an rvalue of type ‘double’\n  return 0;\n         ^\n"
        ],
        [
            "2.1 (C++)",
            "王硕",
            "#include<iostream>\nusing namespace std;\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble *values;\n\tpublic:\n\t\tMatrix(int rows,int columns){\n\t\t\tthis->rows=rows;\n\t\t\tthis->columns=columns;\n\t\t\tthis->values=new double[rows*columns+1];\n\t\t\tfor(int i=0;i<rows;i++){\n\t\t\t\tfor(int j=0;j<columns;j++){\n\t\t\t\t\tvalues[i*columns+j]=0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t~Matrix(){\n\t\t\tdelete []this->values;\n\t\t}\n\t\tvoid print(){\n\t\t\tfor(int i=0;i<this->rows;i++){\n\t\t\t\tfor(int j=0;j<this->columns;j++){\n\t\t\t\t\tcout<<\"    \"<<values[i*this->columns+j];\n\t\t\t\t}\n\t\t\t\tcout<<endl;\n\t\t\t}\n\t\t}\n};",
            1589341388.9503832,
            100,
            "# 答案正确"
        ],
        [
            "2.2 (C++)",
            "王硕",
            "#include<iostream>\n#include<iomanip>\nusing namespace std;\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble *values;\n\tpublic:\n\t\tMatrix(int rows,int columns,double values[]){\n\t\t\tthis->rows=rows;\n\t\t\tthis->columns=columns;\n\t\t\tthis->values=new double[rows*columns+1];\n\t\t\tfor(int i=0;i<rows;i++){\n\t\t\t\tfor(int j=0;j<columns;j++){\n\t\t\t\t\tthis->values[i*columns+j]=values[i*columns+j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t~Matrix(){\n\t\t\tdelete []this->values;\n\t\t}\n\t\tvoid print(){\n\t\t\tfor(int i=0;i<this->rows;i++){\n\t\t\t\tfor(int j=0;j<this->columns;j++){\n\t\t\t\t\tcout<<setw(5)<<this->values[i*this->columns+j];\n\t\t\t\t}\n\t\t\t\tcout<<endl;\n\t\t\t}\n\t\t}\n};",
            1589343244.2239974,
            100,
            "# 答案正确"
        ],
        [
            "2.3 (C++)",
            "王硕",
            "#include<iostream>\nusing namespace std;\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble *values;\n\tpublic:\n\t\tMatrix(int rows,int columns,double values[]){\n\t\t\tthis->rows=rows;\n\t\t\tthis->columns=columns;\n\t\t\tthis->values=new double[rows*columns+1];\n\t\t\tfor(int i=0;i<rows;i++){\n\t\t\t\tfor(int j=0;j<columns;j++){\n\t\t\t\t\tthis->values[i*columns+j]=values[i*columns+j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tMatrix(const Matrix & matrix2){\n\t\t\tthis->rows=matrix2.rows;\n\t\t\tthis->columns=matrix2.columns;\n\t\t\tthis->values=new double[this->rows*this->columns+1];\n\t\t\tfor(int i=0;i<this->rows;i++){\n\t\t\t\tfor(int j=0;j<this->columns;j++){\n\t\t\t\t\tthis->values[i*this->columns+j]=matrix2.values[i*this->columns+j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t~Matrix(){\n\t\t\tdelete []this->values;\n\t\t}\n\t\tvoid print(){\n\t\t\tfor(int i=0;i<this->rows;i++){\n\t\t\t\tfor(int j=0;j<this->columns;j++){\n\t\t\t\t\tcout<<\"    \"<<this->values[i*this->columns+j];\n\t\t\t\t}\n\t\t\t\tcout<<endl;\n\t\t\t}\n\t\t}\n};",
            1589362917.3684714,
            100,
            "# 答案正确"
        ],
        [
            "2020/05/14",
            "王硕",
            "#include<iostream>\nusing namespace std;\nvoid Tensor_print(int dimensions, const int sizes[], const double data[]){\n\tif(dimensions==1){\n\t\tcout<<\"Tensor of \"<<sizes[0]<<endl;\n\t\tfor(int i=0;i<sizes[0];i++){\n\t\t\tcout<<data[i]<<endl;\n\t\t}\n\t}\n\telse if(dimensions==2){\n\t\tcout<<\"Tensor of \"<<sizes[0]<<\"x\"<<sizes[1]<<endl;\n\t\tfor(int i=0;i<sizes[0];i++){\n\t\t\tfor(int j=0;j<sizes[1];j++){\n\t\t\t\tcout<<\"    \"<<data[i*sizes[1]+j];\n\t\t\t}\n\t\t\tcout<<endl;\n\t\t}\n\t}\n\telse if(dimensions==3){\n\t\tcout<<\"Tensor of \"<<sizes[0]<<\"x\"<<sizes[1]<<\"x\"<<sizes[2]<<endl;\n\t\tfor(int i=0;i<sizes[0];i++){\n\t\t\tcout<<\"data\"<<\"[\"<<i<<\"]\"<<endl;\n\t\t\tfor(int j=0;j<sizes[1];j++){\n\t\t\t\tfor(int p=0;p<sizes[2];p++){\n\t\t\t\t\tcout<<\"    \"<<data[j*sizes[2]+p];\n\t\t\t\t}\n\t\t\t\tcout<<endl;\n\t\t\t}\n\t\t}\n\t}\n\telse if(dimensions==4){\n\t\tcout<<\"Tensor of \"<<sizes[0]<<\"x\"<<sizes[1]<<\"x\"<<sizes[2]<<\"x\"<<sizes[3]<<endl;\n\t\tfor(int i=0;i<sizes[0];i++){\n\t\t\tfor(int j=0;j<sizes[1];j++){\n\t\t\t\tcout<<\"data\"<<\"[\"<<i<<\"]\"<<\"[\"<<j<<\"]\"<<endl;\n\t\t\t\tfor(int p=0;p<sizes[2];p++){\n\t\t\t\t\tfor(int q=0;q<sizes[3];q++){\n\t\t\t\t\t\tcout<<\"    \"<<data[p*sizes[3]+q];\n\t\t\t\t\t}\n\t\t\t\t\tcout<<endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
            1589426326.4877877,
            100,
            "# 答案正确"
        ],
        [
            "2.6 (C++)",
            "王硕",
            "#include <iostream>\nusing namespace std;\n\nclass Matrix\n{\nprivate:\n\tint rows;\n\tint columns;\n\tdouble * values;\npublic:\n\tdouble mat[50][50];\n\tMatrix(int rows, int columns){\n\t\tthis -> rows = rows;\n\t\tthis -> columns = columns;\n\t\tfor(int i = 0; i < rows; ++i){\n\t\t\tfor(int j = 0; j < columns; ++j){\n\t\t\t\tmat [i][j] = 0;\n\t\t\t}\n\t\t}\n\t}\n\tMatrix(int rows, int columns, double values[]){\n\t\tthis -> rows = rows;\n\t\tthis -> columns = columns;\n\t\tfor(int i = 0; i < rows; ++i){\n\t\t\tfor(int j = 0; j < columns; ++j){\n\t\t\t\tint count;\n\t\t\t\tcount = i * columns + j;\n\t\t\t\tmat [i][j] = values[count];\n\t\t\t}\n\t\t}\n\t}\n\tvoid print(){\n\t\tfor(int i = 0; i < rows; ++i){\n\t\t\tfor(int j = 0; j < columns; ++j){\n\t\t\t\tcout << mat[i][j] << \"    \";\n\t\t\t}\n\t\t\tcout << endl;\n\t\t}\n\t}\n\tMatrix concatenateRows(const Matrix & matrix2) const{\n\t\tMatrix m(this->rows + matrix2.rows,this->columns);\n\t\tfor(int i = 0; i < this->rows + matrix2.rows; ++i){\n\t\t\tfor(int j = 0; j < columns; ++j){\n\t\t\t\tif(i < this->rows){\n\t\t\t\t\tm.mat[i][j] = this->mat[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tm.mat[i][j] = matrix2.mat[i-this->rows][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn m;\n\t}\n\tMatrix concatenateColumns(const Matrix & matrix2) const{\n\t\tMatrix m(this->rows ,this->columns + matrix2.columns);\n\t\tfor(int i = 0; i < this->rows; i ++){\n\t\t\tfor(int j = 0; j < columns+ matrix2.columns;j ++){\n\t\t\t\tif(j < this->columns){\n\t\t\t\t\tm.mat[i][j] = this->mat[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tm.mat[i][j] = matrix2.mat[i][j - this-> columns];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn m;\n\t}\n\t~Matrix(){\n\t\t\n\t}\n};",
            1589460045.4725394,
            100,
            "# 答案正确"
        ],
        [
            "2.5 (C++)",
            "王硕",
            "#include <iostream>\nusing namespace std;\n\nclass Matrix{\nprivate:\n\tint rows;\n\tint columns;\n\tdouble * values;\npublic:\n\tdouble mat[50][50];\n\tMatrix(int rows, int columns){\n\t\tthis -> rows = rows;\n\t\tthis -> columns = columns;\n\t\tfor(int i = 0; i < rows; ++i){\n\t\t\tfor(int j = 0; j < columns; ++j){\n\t\t\t\tmat [i][j] = 0;\n\t\t\t}\n\t\t}\n\t}\n\tMatrix(int rows, int columns, double values[]){\n\t\tthis -> rows = rows;\n\t\tthis -> columns = columns;\n\t\tfor(int i = 0; i < rows;i ++){\n\t\t\tfor(int j = 0; j < columns;j ++){\n\t\t\t\tint count;\n\t\t\t\tcount = i * columns + j;\n\t\t\t\tmat [i][j] = values[count];\n\t\t\t}\n\t\t}\n\t}\n\tvoid print(){\n\t\tfor(int i = 0; i < rows; ++i){\n\t\t\tfor(int j = 0; j < columns; ++j){\n\t\t\t\tcout << mat[i][j] << \"    \";\n\t\t\t}\n\t\t\tcout << endl;\n\t\t}\n\t}\n\tMatrix getRow(int row){\n\t\tMatrix matr(1,columns);\n\t\tfor(int i = 0; i < columns; ++i){\n\t\t\tmatr.mat[0][i] = mat[row-1][i];\n\t\t}\n\t\treturn matr;\n\t}\n\tMatrix getColumn(int column){\n\t\tMatrix matr(rows,1);\n\t\tfor(int i = 0; i < rows; ++i){\n\t\t\tmatr.mat[i][0] = mat[i][column-1];\n\t\t}\n\t\treturn matr;\n\t}\n\t~Matrix(){\n\t\t\n\t}\n};",
            1589460078.1413925,
            100,
            "# 答案正确"
        ],
        [
            "2.4 (C++)",
            "王硕",
            "#include<iostream>\nusing namespace std;\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble*values;\n\tpublic:\n\t\tMatrix(int rows,int columns){\n\t\t\tthis->rows=rows;\n\t\t\tthis->columns=columns;\n\t\t\tfor(int i=0;i<this->rows;i++){\n\t\t\t\tfor(int j=0;j<this->columns;j++){\n\t\t\t\t\tthis->values[i*this->columns+j]=0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tMatrix(int rows, int columns, double values[]){\n\t\t\tthis->rows=rows;\n\t\t\tthis->columns=columns;\n\t\t\tthis->values=new double[rows*columns+1];\n\t\t\tfor(int i=0;i<this->rows;i++){\n\t\t\t\tfor(int j=0;j<this->columns;j++){\n\t\t\t\t\tthis->values[i*this->columns+j]=values[i*this->columns+j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t~Matrix(){\n\t\t\tdelete [] this->values;\n\t\t}\n\t\tvoid print(){\n\t\t\tfor(int i=0;i<this->rows;i++){\n\t\t\t\tfor(int j=0;j<this->columns;j++){\n\t\t\t\t\tcout<<\"    \"<<this->values[i*this->columns+j];\n\t\t\t\t}\n\t\t\t\tcout<<endl;\n\t\t\t}\n\t\t}\n\t\tvoid set(int row, int column, double value){\n\t\t\tthis->values[(row-1)*this->columns+column-1]=value;\n\t\t}\n\t\tMatrix &operator = (const Matrix &matrix){\n\t\t\tif(values!=0) delete [] values;\n\t\t\trows=matrix.rows;\n\t\t\tcolumns=matrix.columns;\n\t\t\tthis->values=new double[rows*columns+1];\n\t\t\tfor(int i=0;i<this->rows;i++){\n\t\t\t\tfor(int j=0;j<this->columns;j++){\n\t\t\t\t\tthis->values[i*this->columns+j]=matrix.values[i*this->columns+j];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn(*this);\n\t\t}\n};",
            1589962215.6337063,
            100,
            "# 答案正确"
        ],
        [
            "2.7 (C++)",
            "王硕",
            "#include <iostream>\n#include<cstring>\n\nusing namespace std;\n\nclass Matrix\n{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble * values;\n\tpublic:\n\t\tMatrix(const Matrix & matrix2)\n\t\t{\n\t\t\tthis->rows = matrix2.rows;\n\t\t\tthis->columns = matrix2.columns;\n\t\t\tthis->values = new double [rows * columns + 1];\n\t\t\tfor (int i = 0; i < this->rows; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; ++ j) values[i * this->columns + j] = matrix2.values[i * this->columns + j]; \n\t\t\t}\n\t\t}\n\t\tMatrix(int rows, int column)\n\t\t{\n\t\t\tthis->rows = rows;\n\t\t\tthis->columns = column;\n\t\t\tthis->values = new double [rows * columns + 1];\n\t\t\tfor (int i = 0; i < this->rows; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; ++ j) values[i * this->columns + j] = 0; \n\t\t\t}\n\t\t}\n\t\tMatrix(int rows, int column, double values[])\n\t\t{\n\t\t\tthis->rows = rows;\n\t\t\tthis->columns = column;\n\t\t\tthis->values = new double [rows * columns + 1];\n\t\t\tfor (int i = 0; i < this->rows * this->columns; ++ i)\n\t\t\t{\n\t\t\t\tthis->values[i] = values[i]; \n\t\t\t}\n\t\t}\n\t\t~Matrix()\n\t\t{\n\t\t\tdelete [] this->values;\n\t\t}\n\t\tvoid print()\n\t\t{\n\t\t\tfor (int i = 0; i < this->rows; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; ++ j) cout << \"    \" << values[i * this->columns + j];\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t}\n\t\tvoid set(int row, int column, double value)\n\t\t{\n\t\t\tthis->values[(row - 1)* this->columns + column - 1] = value; \n\t\t}\n\t\tMatrix & operator = (const Matrix & mat)\n\t\t{\n\t\t\tif (values != 0) delete [] values;\n\t\t\trows = mat.rows;\n\t\t\tcolumns = mat.columns;\n\t\t\tthis->values = new double [rows * columns + 1];\n\t\t\tfor (int i = 0; i < this->rows; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; ++ j) this->values[i * this->columns + j] = mat.values[i * this->columns + j]; \n\t\t\t}\n\t\t\treturn (*this);\n\t\t}\n\t\tMatrix reshape(int rows, int columns) const\n\t\t{\n\t\t\tMatrix mat(columns, rows);\n\t\t\tint array[this->rows * this->columns];\n\t\t\tint count = 0;\n\t\t\tfor (int i = 0; i < this->columns; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->rows; ++ j) array[count ++] = this->values[i + this->rows * j]; \n\t\t\t}\n\t\t\tcount = 0;\n\t\t\tfor (int i = 0; i < mat.columns; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < mat.rows; ++ j) mat.values[i + mat.rows * j] = array[count ++]; \n\t\t\t}\n\t\t\treturn mat;\n\t\t}\n};\n",
            1589980107.5474062,
            100,
            "# 答案正确"
        ],
        [
            "2.8 (C++)",
            "王硕",
            "#include <iostream>\nusing namespace std;\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble * values;\n\tpublic:\n\t\tMatrix(int rows, int column, double values[])\n\t\t{\n\t\t\tthis->rows = rows;\n\t\t\tthis->columns = column;\n\t\t\tthis->values = new double [rows * columns + 1];\n\t\t\tfor (int i = 0; i < this->rows * this->columns; ++ i)\n\t\t\t{\n\t\t\t\tthis->values[i] = values[i]; \n\t\t\t}\n\t\t}\n\tMatrix(const Matrix & matrix2)\n\t\t{\n\t\t\tthis->rows = matrix2.rows;\n\t\t\tthis->columns = matrix2.columns;\n\t\t\tthis->values = new double [rows * columns + 1];\n\t\t\tfor (int i = 0; i < this->rows; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; ++ j) values[i * this->columns + j] = matrix2.values[i * this->columns + j]; \n\t\t\t}\n\t\t}\n\t\t~Matrix()\n\t\t{\n\t\t\tdelete [] this->values;\n\t\t}\n\tvoid print()\n\t\t{\n\t\t\tfor (int i = 0; i < this->rows; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; ++ j) cout << \"    \" << values[i * this->columns + j];\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t}\n\tMatrix transpose(){\n\t\tdouble p[this->rows*this->columns+1];\n\t\tfor(int i=0;i<this->rows;i++){\n\t\t\tfor(int j=0;j<this->columns;j++){\n\t\t\t\tp[j*this->rows+i]=this->values[i*this->columns+j];\n\t\t\t}\n\t\t}\n\t\treturn Matrix(this->columns,this->rows,p);\n\t}\n};",
            1589982377.1891956,
            100,
            "# 答案正确"
        ],
        [
            "2.10 (C++)",
            "王硕",
            "#include <iostream>\nusing namespace std;\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble * values;\n\tpublic:\n\t\tMatrix(int rows, int column)\n\t\t{\n\t\t\tthis->rows = rows;\n\t\t\tthis->columns = column;\n\t\t\tthis->values = new double [rows * columns + 1];\n\t\t\tfor (int i = 0; i < this->rows; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; ++ j) values[i * this->columns + j] = 0; \n\t\t\t}\n\t\t}\n\t\tMatrix(int rows, int column, double values[])\n\t\t{\n\t\t\tthis->rows = rows;\n\t\t\tthis->columns = column;\n\t\t\tthis->values = new double [rows * columns + 1];\n\t\t\tfor (int i = 0; i < this->rows * this->columns; ++ i)\n\t\t\t{\n\t\t\t\tthis->values[i] = values[i]; \n\t\t\t}\n\t\t}\n\tMatrix(const Matrix & matrix2)\n\t\t{\n\t\t\tthis->rows = matrix2.rows;\n\t\t\tthis->columns = matrix2.columns;\n\t\t\tthis->values = new double [rows * columns + 1];\n\t\t\tfor (int i = 0; i < this->rows; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; ++ j) values[i * this->columns + j] = matrix2.values[i * this->columns + j]; \n\t\t\t}\n\t\t}\n\t\t~Matrix()\n\t\t{\n\t\t\tdelete [] this->values;\n\t\t}\n\tvoid print()\n\t\t{\n\t\t\tfor (int i = 0; i < this->rows; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; ++ j) cout << \"    \" << values[i * this->columns + j];\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t}\n\tMatrix operator * (const Matrix & matrix2) const\n\t\t{\n\t\t\tMatrix mat(this->rows, matrix2.columns);\n\t\t\tint array1[this->rows][this->columns];\n\t\t\tint array2[matrix2.rows][matrix2.columns];\n\t\t\tfor (int i = 0; i < this->rows; i ++)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; j ++) array1[i][j] = this->values[i * this->columns + j];\n\t\t\t}\n\t\t\tfor (int i = 0; i < matrix2.rows; i ++)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < matrix2.columns; j ++) array2[i][j] = matrix2.values[i * matrix2.columns + j];\n\t\t\t}\n\t\t\tfor (int i = 0; i < mat.rows; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < mat.columns; ++ j)\n\t\t\t\t{\n\t\t\t\t\tfor (int p = 0; p < this->columns; p ++)\n\t\t\t\t\t{\n\t\t\t\t\t\tmat.values[i * mat.columns + j] += (array1[i][p] * array2[p][j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn mat;\n\t\t}\n\t\tMatrix operator * (double value)\n\t\t{\n\t\t\tMatrix mat(this->rows, this->columns);\n\t\t\tfor (int i = 0; i < this->rows; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; ++ j) mat.values[i * this->columns + j] = this->values[i * this->columns + j] * value; \n\t\t\t}\n\t\t\treturn mat;\n\t\t}\n};",
            1590043377.9156291,
            100,
            "# 答案正确"
        ],
        [
            "2.9 (C++)",
            "王硕",
            "#include <iostream>\nusing namespace std;\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble * values;\n\tpublic:\n\t\tMatrix(int rows, int column, double values[])\n\t\t{\n\t\t\tthis->rows = rows;\n\t\t\tthis->columns = column;\n\t\t\tthis->values = new double [rows * columns + 1];\n\t\t\tfor (int i = 0; i < this->rows * this->columns; ++ i)\n\t\t\t{\n\t\t\t\tthis->values[i] = values[i]; \n\t\t\t}\n\t\t}\n\tMatrix(const Matrix & matrix2)\n\t\t{\n\t\t\tthis->rows = matrix2.rows;\n\t\t\tthis->columns = matrix2.columns;\n\t\t\tthis->values = new double [rows * columns + 1];\n\t\t\tfor (int i = 0; i < this->rows; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; ++ j) values[i * this->columns + j] = matrix2.values[i * this->columns + j]; \n\t\t\t}\n\t\t}\n\t\t~Matrix()\n\t\t{\n\t\t\tdelete [] this->values;\n\t\t}\n\tvoid print()\n\t\t{\n\t\t\tfor (int i = 0; i < this->rows; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; ++ j) cout << \"    \" << values[i * this->columns + j];\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t}\n\tMatrix operator + (const Matrix &matrix2) {\n\t\tdouble p[this->rows*this->columns+1];\n\t\tfor(int i=0;i<this->rows;i++){\n\t\t\tfor(int j=0;j<this->columns;j++){\n\t\t\t\tp[i*this->columns+j]=this->values[i*this->columns+j] + matrix2.values[i*this->columns+j];\n\t\t\t}\n\t\t}\n\t\treturn Matrix(this->rows,this->columns,p);\n\t}\n\tMatrix operator + (double value) {\n\t\tdouble p[this->rows*this->columns+1];\n\t\tfor(int i=0;i<this->rows;i++){\n\t\t\tfor(int j=0;j<this->columns;j++){\n\t\t\t\tp[i*this->columns+j]=this->values[i*this->columns+j] + value;\n\t\t\t}\n\t\t}\n\t\treturn Matrix(this->rows,this->columns,p);\n\t}\n\tMatrix operator - (const Matrix &matrix2) {\n\t\tdouble p[this->rows*this->columns+1];\n\t\tfor(int i=0;i<this->rows;i++){\n\t\t\tfor(int j=0;j<this->columns;j++){\n\t\t\t\tp[i*this->columns+j]=this->values[i*this->columns+j] - matrix2.values[i*this->columns+j];\n\t\t\t}\n\t\t}\n\t\treturn Matrix(this->rows,this->columns,p);\n\t}\n\tMatrix operator - (double value) {\n\t\tdouble p[this->rows*this->columns+1];\n\t\tfor(int i=0;i<this->rows;i++){\n\t\t\tfor(int j=0;j<this->columns;j++){\n\t\t\t\tp[i*this->columns+j]=this->values[i*this->columns+j] - value;\n\t\t\t}\n\t\t}\n\t\treturn Matrix(this->rows,this->columns,p);\n\t}\n};",
            1590029416.6426914,
            100,
            "# 答案正确"
        ],
        [
            "2.11 (C++)",
            "王硕",
            "#include <iostream>\nusing namespace std;\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble * values;\n\tpublic:\n\t\tMatrix(int rows,int columns){\n\t\t\tthis->rows = rows;\n\t\t\tthis->columns = columns;\n\t\t\tthis->values = new double [rows * columns + 1];\n\t\t\tfor (int i = 0; i < this->rows; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; ++ j) values[i * this->columns + j] = 0; \n\t\t\t}\n\t\t}\n\t\tMatrix(int rows, int column, double values[])\n\t\t{\n\t\t\tthis->rows = rows;\n\t\t\tthis->columns = column;\n\t\t\tthis->values = new double [rows * columns + 1];\n\t\t\tfor (int i = 0; i < this->rows * this->columns; ++ i)\n\t\t\t{\n\t\t\t\tthis->values[i] = values[i]; \n\t\t\t}\n\t\t}\n\tMatrix(const Matrix & matrix2)\n\t\t{\n\t\t\tthis->rows = matrix2.rows;\n\t\t\tthis->columns = matrix2.columns;\n\t\t\tthis->values = new double [rows * columns + 1];\n\t\t\tfor (int i = 0; i < this->rows; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; ++ j) values[i * this->columns + j] = matrix2.values[i * this->columns + j]; \n\t\t\t}\n\t\t}\n\t\t~Matrix()\n\t\t{\n\t\t\tdelete [] this->values;\n\t\t}\n\tvoid print()\n\t\t{\n\t\t\tfor (int i = 0; i < this->rows; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; ++ j) cout << \"    \" << values[i * this->columns + j];\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t}\n\tMatrix max() const\n\t\t{\n\t\t\tif (this->rows == 1)\n\t\t\t{\n\t\t\t\tMatrix mat(1, 1);\n\t\t\t\tint max = 0;\n\t\t\t\tfor (int i = 0; i < this->columns; ++ i)\n\t\t\t\t{\n\t\t\t\t\tif (this->values[i] > max)\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = this->values[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmat.values[0] = max;\n\t\t\t\treturn mat;\n\t\t\t}\n\t\t\tMatrix mat(1, this->columns);\n\t\t\tint array[this->rows][this->columns];\n\t\t\tfor (int i = 0; i < this->rows; i ++)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; j ++) array[i][j] = this->values[i * this->columns + j];\n\t\t\t}\n\t\t\tint num[this->columns + 1] = {0};\n\t\t\tint max = 0;\n\t\t\tfor (int i = 0; i < this->columns; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->rows; j ++)\n\t\t\t\t{\n\t\t\t\t\tif (array[j][i] > max)\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = array[j][i];\n\t\t\t\t\t\tnum[i] = max;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmax = 0;\n\t\t\t}\n\t\t\tfor (int j = 0; j < this->columns; ++ j) mat.values[j] = num[j];\n\t\t\treturn mat;\n\t\t}\n\t\tMatrix min() const\n\t\t{\n\t\t\tif (this->rows == 1)\n\t\t\t{\n\t\t\t\tMatrix mat(1, 1);\n\t\t\t\tint min = 99999;\n\t\t\t\tfor (int i = 0; i < this->columns; ++ i)\n\t\t\t\t{\n\t\t\t\t\tif (this->values[i] < min)\n\t\t\t\t\t{\n\t\t\t\t\t\tmin = this->values[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmat.values[0] = min;\n\t\t\t\treturn mat;\n\t\t\t}\n\t\t\tMatrix mat(1, this->columns);\n\t\t\tint array[this->rows][this->columns];\n\t\t\tfor (int i = 0; i < this->rows; i ++)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; j ++) array[i][j] = this->values[i * this->columns + j];\n\t\t\t}\n\t\t\tint num[this->columns + 1] = {0};\n\t\t\tint min = 99999;\n\t\t\tfor (int i = 0; i < this->columns; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->rows; j ++)\n\t\t\t\t{\n\t\t\t\t\tif (array[j][i] < min)\n\t\t\t\t\t{\n\t\t\t\t\t\tmin = array[j][i];\n\t\t\t\t\t\tnum[i] = min;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmin = 99999;\n\t\t\t}\n\t\t\tfor (int j = 0; j < this->columns; ++ j) mat.values[j] = num[j];\n\t\t\treturn mat;\n\t\t}\n\n\tMatrix sum() const\n\t\t{\n\t\t\tif (this->rows == 1)\n\t\t\t{\n\t\t\t\tMatrix mat(1, 1);\n\t\t\t\tfor (int i = 0; i < this->columns; ++ i)\n\t\t\t\t{\n\t\t\t\t\tmat.values[0] += this->values[i];\n\t\t\t\t}\n\t\t\t\treturn mat;\n\t\t\t}\n\t\t\tMatrix mat(1, this->columns);\n\t\t\tint array[this->rows][this->columns];\n\t\t\tfor (int i = 0; i < this->rows; i ++)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; j ++) array[i][j] = this->values[i * this->columns + j];\n\t\t\t}\n\t\t\tint num[this->columns + 1] = {0};\n\t\t\tfor (int i = 0; i < this->columns; ++ i)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->rows; ++ j) num[i] += array[j][i];\n\t\t\t}\n\t\t\tfor (int j = 0; j < this->columns; ++ j) mat.values[j] = num[j];\n\t\t\treturn mat;\n\t\t}\n\n};",
            1590047737.8977973,
            100,
            "# 答案正确"
        ],
        [
            "6.1 (C++)",
            "王硕",
            "#include<bits/stdc++.h>\nusing namespace std;\ntemplate <typename T>\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint col;\n\t\tT*val;\n\t\tvoid assign(){\n\t\t\tif(val!=0)\n\t\t\tdelete[]val;\n\t\t\tval=0;\n\t\t}\n\tpublic:\n\t\tMatrix(int r,int c):rows(r),col(c){\n\t\t\tval=new T[rows*col];\n\t\t\tmemset(val,0,sizeof(T)*rows*col);\n\t\t}\n\t\tMatrix(int r,int c,const T* v):rows(r),col(c){\n\t\t\tval=new T[rows*col];\n\t\t\tfor(int i=0;i<rows*col;i++){\n\t\t\t\tval[i]=v[i];\n\t\t\t}\n\t\t}\n\t\tvoid print(){\n\t\t\tfor(int i=0;i<rows;i++){\n\t\t\t\tfor(int j=0;j<col;j++){\n\t\t\t\t\tcout<<\"    \"<<val[i*col+j];\n\t\t\t\t}cout<<endl;\n\t\t\t}\n\t\t}\n\t\tMatrix& operator=(Matrix& a){\n\t\t\tassign();\n\t\t\trows=a.rows;\n\t\t\tcol=a.col;\n\t\t\tval=new T[rows*col];\n\t\t\tfor(int i=0;i<rows*col;i++)\n\t\t\tval[i]=a.val[i];\n\t\t\treturn *this;\n\t\t}\n\t\tMatrix(Matrix & a):rows(a.rows),col(a.col){\n\t\t\tval=new T[rows*col];\n\t\t\tfor(int i=0;i<rows*col;i++)\n\t\t\tval[i]=a.val[i];\n\t\t}\n\t\tT& get(int i,int j){\n\t\t\treturn val[(i-1)*col+j-1];\n\t\t}\n\t~Matrix(){\n\t\tassign();\n}\n}; ",
            1590629329.7027142,
            100,
            "# 答案正确"
        ],
        [
            "6.2 (C++)",
            "王硕",
            "#include<iostream>\nusing namespace std;\ntemplate<typename T>\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tT*values;\n\tpublic:\n\t\tMatrix(int rows,int columns){\n\t\t\tthis->rows = rows;\n\t\t\tthis->columns = columns;\n\t\t\tthis->values = new T[rows*columns];\n\t\t\tfor(int i=0;i<rows;i++){\n\t\t\t\tfor(int j=0;j<columns;j++){\n\t\t\t\t\tthis->values[i*columns+j]=0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t~Matrix(){\n\t\t\tdelete []values;\n\t\t}\n\t\tvoid print(){\n\t\t\tfor(int i=0;i<this->rows;i++){\n\t\t\t\tfor(int j=0;j<this->columns;j++){\n\t\t\t\t\tcout<<\"    \"<<this->values[i*columns+j];\n\t\t\t\t}\n\t\t\t\tcout<<endl;\n\t\t\t}\n\t\t}\n};",
            1590632797.4085968,
            100,
            "# 答案正确"
        ],
        [
            "6.3 (C++)",
            "王硕",
            "#include<bits/stdc++.h>\nusing namespace std;\ntemplate <typename T>\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint col;\n\t\tvector <T> val;\n\t\tvoid assign(){\n\t\t\tval.clear();\n\t\t}\n\tpublic:\n\t\tMatrix(int r,int c):rows(r),col(c){\n\t\t\tfor(int i=0;i<rows*col;i++)\n\t\t\tval.push_back(0);\n\t\t}\n\t\tMatrix(int r,int c,vector <T> v):rows(r),col(c){\n\t\t\tfor(int i=0;i<rows*col;i++)\n\t\t\tval.push_back(v[i]);\n\t\t}\n\t\tvoid print(){\n\t\t\tfor(int i=0;i<rows;i++){\n\t\t\t\tfor(int j=0;j<col;j++){\n\t\t\t\t\tcout<<\"    \"<<val[i*col+j];\n\t\t\t\t}cout<<endl;\n\t\t\t}\n\t\t}\n\t\tT& get(int i,int j){\n\t\t\treturn val[(i-1)*col+j-1];\n\t\t}\n\t\tMatrix getColumn(int a){\n\t\t\tvector<T> temp;\n\t\t\tfor(int i=0;i<rows;i++){\n\t\t\t\ttemp.push_back(val[i*col+(a-1)]);\n\t\t\t}\n\t\t\tMatrix b(rows,1,temp);\n\t\t\treturn b;\n\t\t}\n\t\tMatrix getRow(int a){\n\t\t\tvector<T> temp;\n\t\t\tfor(int i=0;i<col;i++){\n\t\t\t\ttemp.push_back(val[i+(a-1)*rows]);\n\t\t\t}\n\t\t\tMatrix b(1,col,temp);\n\t\t\treturn b;\n\t\t}\n\t\tMatrix concatenateRows(Matrix a){\n\t\t\tvector <T> temp;\n\t\t\tfor(int i=0;i<rows*col;i++)\n\t\t\ttemp.push_back(val[i]);\n\t\t\tfor(int i=0;i<a.col*a.rows;i++){\n\t\t\t\ttemp.push_back(a.val[i]);\n\t\t\t}\n\t\t\tMatrix b(rows+a.rows,col,temp);\n\t\t\treturn b;\n\t\t}\n\t\tMatrix concatenateColumns(Matrix a){\n\t\t\tvector <T> temp;\n\t\t\tfor(int i=0;i<rows;i++)\n\t\t\t{\n\t\t\t\tfor(int j=0;j<col;j++){\n\t\t\t\t\ttemp.push_back(val[i*col+j]);\n\t\t\t\t}\n\t\t\t\tfor(int j=0;j<a.col;j++)\n\t\t\t\ttemp.push_back(a.val[i*a.col+j]);\n\t\t\t}\n\t\t\tMatrix b(rows,col+a.col,temp);\n\t\t\treturn b;\n\t\t}\n\t\tMatrix reshape(int r,int c){\n\t\t\tvector <T> temp(rows*col);\n\t\t\tvector<T> t1(rows*col);\n\t\t\tint k=0;\n\t\t\tfor(int i=0;i<col;i++){\n\t\t\t\tfor(int j=0;j<rows;j++){\n\t\t\t\t\tt1[k++]=val[i+j*col];\n\t\t\t\t}\n\t\t\t}\n\t\t\tk=0;\n\t\t\tfor(int i=0;i<c;i++){\n\t\t\t\tfor(int j=0;j<r;j++){\n\t\t\t\t\ttemp[i+j*c]=t1[k++];\n\t\t\t\t}\n\t\t\t}\n\t\t\tMatrix b(r,c,temp);\n\t\t\treturn b;\n\t\t}\n\t\tMatrix transpose(){\n\t\t\tvector<T> t1(rows*col);\n\t\t\tint k=0;\n\t\t\tfor(int i=0;i<col;i++){\n\t\t\t\tfor(int j=0;j<rows;j++){\n\t\t\t\t\tt1[k++]=val[i+j*col];\n\t\t\t\t}\n\t\t\t}\n\t\t\tMatrix b(rows,col,t1);\n\t\t\treturn b;\n\t\t}\n\t\tMatrix operator +(Matrix a){\n\t\t\tvector <T> temp;\n\t\t\tfor(int i=0;i<rows*col;i++)\n\t\t\ttemp.push_back(val[i]+a.val[i]);\n\t\t\tMatrix b(rows,col,temp);\n\t\t\treturn b;\n\t\t}\n\t\tMatrix operator +(T a){\n\t\t\tvector <T> temp;\n\t\t\tfor(int i=0;i<rows*col;i++)\n\t\t\ttemp.push_back(val[i]+a);\n\t\t\tMatrix b(rows,col,temp);\n\t\t\treturn b;\n\t\t}\n\t\tMatrix operator -(Matrix a){\n\t\t\tvector <T> temp;\n\t\t\tfor(int i=0;i<rows*col;i++)\n\t\t\ttemp.push_back(val[i]-a.val[i]);\n\t\t\tMatrix b(rows,col,temp);\n\t\t\treturn b;\n\t\t}\n\t\tMatrix operator -(T a){\n\t\t\tvector <T> temp;\n\t\t\tfor(int i=0;i<rows*col;i++)\n\t\t\ttemp.push_back(val[i]-a);\n\t\t\tMatrix b(rows,col,temp);\n\t\t\treturn b;\n\t\t}\n\t\tMatrix operator *(Matrix a){\n\t\t\tvector <T> temp(rows*a.col,0);\n\t\t\tfor(int i=0;i<rows;i++){\n\t\t\t\tfor(int j=0;j<a.col;j++){\n\t\t\t\t\tfor(int k=0;k<col;k++){\n\t\t\t\t\t\ttemp[i*a.col+j]+=val[i*col+k]*a.val[k*a.col+j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tMatrix b(rows,col,temp);\n\t\t\treturn b;\n\t\t}\n\t\tMatrix operator *(T a){\n\t\t\tvector <T> temp(rows*col);\n\t\t\tfor(int i=0;i<rows*col;i++){\n\t\t\t\ttemp[i]=val[i]*a;\n\t\t\t}\n\t\t\tMatrix b(rows,col,temp);\n\t\t\treturn b;\n\t\t}\n\t\t\tMatrix max(){\n\t\t\tvector <T> temp;\n\t\t\tT max=val[0];\n\t\t\tint maxrow=0;\n\t\t\t\tfor(int i=0;i<rows*col;i++){\n\t\t\t\t\t\n\t\t\t\t\tif(max<val[i]){\n\t\t\t\t\t\tmax=val[i];\n\t\t\t\t\t\tmaxrow=i/col;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(rows==1){\n\t\t\t\ttemp.push_back(max);\n\t\t\t\treturn Matrix(1,1,temp);\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\telse{\n\t\t\t\tfor(int i=0;i<col;i++){\n\t\t\t\t\ttemp.push_back(val[i+maxrow*col]);\n\t\t\t\t\t//cout<<\"  \"<<\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn Matrix(1,col,temp);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\n\t\tMatrix min(){\n\t\t\tvector <T> temp;\n\t\t\tT max=val[0];\n\t\t\tint maxrow=0;\n\t\t\t\tfor(int i=0;i<rows*col;i++){\n\t\t\t\t\t\n\t\t\t\t\tif(max>val[i]){\n\t\t\t\t\t\tmax=val[i];\n\t\t\t\t\t\tmaxrow=i/col;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(rows==1){\n\t\t\t\ttemp.push_back(max);\n\t\t\t\treturn Matrix(1,1,temp);\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\telse{\n\t\t\t\tfor(int i=0;i<col;i++)\n\t\t\t\ttemp.push_back(val[i+maxrow*col]);\n\t\t\t\treturn Matrix(1,col,temp);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\tMatrix sum(){\n\t\t\tvector <T> temp;\n\t\t\tint sum=0;\n\t\t\tif(rows==1){\n\t\t\t\tfor(int i=0;i<col;i++)\n\t\t\t\tsum+=val[i];\n\t\t\t\t\n\t\t\t\ttemp.push_back(sum);\n\t\t\t\treturn Matrix(1,1,temp);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor(int i=0;i<rows;i++){\n\t\t\t\t\tsum=0;\n\t\t\t\t\tfor(int j=0;j<col;j++){\n\t\t\t\t\t\tsum+=val[i*col+j];\n\t\t\t\t\t}\n\t\t\t\t\ttemp.push_back(sum);\n\t\t\t\t}\n\t\t\t\t\n\t\t\treturn Matrix(1,col,temp);\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n};\n",
            1590636289.6032476,
            100,
            "# 答案正确"
        ],
        [
            "7.1 (C++)",
            "王硕",
            "#include<cmath>\nclass Triangle:public GeometricObject{\n\tprivate:\n\t\tdouble side1=1.0;\n\t\tdouble side2=1.0;\n\t\tdouble side3=1.0;\n\tpublic:\n\t\tTriangle(double side1=1.0,double side2=1.0,double side3=1.0){\n\t\t\tthis->side1=side1;\n\t\t\tthis->side2=side2;\n\t\t\tthis->side3=side3;\n\t\t}\n\t\tdouble getSide1(){\n\t\t\treturn side1;\n\t\t}\n\t\tdouble getSide2(){\n\t\t\treturn side2;\n\t\t}\n\t\tdouble getSide3(){\n\t\t\treturn side3;\n\t\t}\n\t\tdouble getArea(){\n\t\t\tdouble s=(side1+side2+side3)/2;\n\t\t\tdouble Area=sqrt(s *(s-side1)*(s-side2)*(s-side3));\n\t\t\treturn Area;\n\t\t}\n\t\tdouble getPerimeter(){\n\t\t\tdouble c=side1+side2+side3;\n\t\t\treturn c;\n\t\t}\n}; ",
            1591234917.5687346,
            100,
            "# 答案正确"
        ],
        [
            "7.2 (C++)",
            "王硕",
            "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<string> split(string line)\n{\n\tvector<string> words;\n\tstring delimiter = \" \";\n\tint st = 0;\n\twhile (st < line.size())\n\t{\n\t\tint end = line.find(delimiter, st);\n\t\tif (end == st) st += 1;\n\t\telse\n\t\t{\n\t\t\tif (end == -1)\n\t\t\t{\n\t\t\t\twords.push_back(line.substr(st));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\twords.push_back(line.substr(st, end - st));\n\t\t\tst = end + 1;\n\t\t}\n\t}\n\treturn words;\n}",
            1591241770.5151083,
            100,
            "# 答案正确"
        ],
        [
            "7.3 (C++)",
            "王硕",
            "template <typename A>\nvector<A> map2(const vector<A> & x, const vector<A> &y, A (*map_func)(const A &, const A &)){\n\tvector<A>res ;\n\tfor (int i = 0; i < x.size(); ++ i){\n\t\tres.push_back(map_func(x[i],y[i]));\n\t} \n\treturn res;\n}\ntemplate <typename A>\nvector<A> map2(const vector<A> & x, int y, A (*map_func)(const A &, const A &)){\n\tvector<A>res ;\n\tfor (int i = 0; i < x.size(); ++ i){\n\t\tres.push_back(map_func(x[i],y));\n\t} \n\treturn res;\n}",
            1591249795.9012418,
            100,
            "# 答案正确"
        ],
        [
            "8.5 (C++)",
            "王硕",
            "#include <cmath>\n#include<iostream>\nusing namespace std; \nclass Point3D: public Point2D{\n\tprivate:\n\t\tdouble z;\n\tpublic:\n\t\tPoint3D(){\n\t\t\tsetX(0);\n\t\t\tsetY(0);\n\t\t\tz=0;\n\t\t}\n\t\tPoint3D(double a,double b,double c){\n\t\t\tsetX(a);\n\t\t\tsetY(b);\n\t\t\tz=c;\n\t\t}\n\t\tdouble getZ(){\n\t\t\treturn z;\n\t\t}\n\t\tdouble distance(Point2D & point2){\n\t\tPoint3D & a = dynamic_cast<Point3D &> (point2);\n\t\tdouble dx, dy, dz;\n\t\tdx = getX() - a.getX();\n\t\tdy = getY() - a.getY();\n\t\tdz = this->z - a.getZ();\n\t\treturn sqrt(dx * dx + dy * dy + dz * dz);\n\t}\n};",
            1591845042.1005971,
            100,
            "# 答案正确"
        ],
        [
            "8.1 (C++)",
            "王硕",
            "#include <iostream>\n\nusing namespace std;\n\nclass Full: public Matrix\n{\n\tprivate :\n\t\tint rows;\n\t\tint column;\n\t\tdouble * values;\n\t\tpublic:\n\t\t\tFull(int rows, int column)\n\t\t\t{\n\t\t\t\tthis->rows = rows;\n\t\t\t\tthis->column = column;\n\t\t\t\tthis->values = new double[this->rows * this->column + 1];\n\t\t\t\tfor (int i = 0; i < rows * column; i ++) this->values[i] = 0;\n\t\t\t}\n\t\t\tFull(int rows, int column, double values[])\n\t\t\t{\n\t\t\t\tthis->rows = rows;\n\t\t\t\tthis->column = column;\n\t\t\t\tthis->values = new double[this->rows * this->column + 1];\n\t\t\t\tfor(int i = 0; i < this->rows * this->column; i ++) this->values[i] = values[i];\n\t\t\t}\n\t\t\tFull(const Matrix & matrix2)\n\t\t\t{\n\t\t\t\tthis->rows = matrix2.size(1);\n\t\t\t\tthis->column = matrix2.size(2);\n\t\t\t\tthis->values = new double[this->rows * this->column + 1];\n\t\t\t\tfor(int i = 0; i < this->rows; i ++)\n\t\t\t\t{\n\t\t\t\t\tfor(int j = 0; j < this->column; j ++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis->values[i * this->column + j] = matrix2.get(i + 1, j + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint size(int dimension) const\n\t\t\t{\n\t\t\t\tif(dimension==1) return rows;\n\t\t\t\telse return column;\n\t\t\t}\n\t\t\tvoid set(int row, int column, double value)\n\t\t\t{\n\t\t\t\tthis->values[(row-1) * this->column + column - 1] = value;\n\t\t\t}\n\t\t\tdouble get(int row, int column) const\n\t\t\t{\n\t\t\t\treturn this->values[(row-1) * this->column + column - 1];\n\t\t\t}\n\t\t\tvoid print() const\n\t\t\t{\n\t\t\t\tfor(int i = 0; i < this->rows; i ++)\n\t\t\t\t{\n\t\t\t\t\tfor(int j = 0; j < this->column; j ++)\n\t\t\t\t\t{\n\t\t\t\t\t\tcout << \"    \" << this->values[i * this->column + j];\n\t\t\t\t\t}\n\t\t\t\t\tcout << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\tMatrix & operator = (const Matrix & matrix2)\n\t\t\t{\n\t\t\t\tthis->rows = matrix2.size(1);\n\t\t\t\tthis->column = matrix2.size(2);\n\t\t\t\tif(values != 0)\n\t\t\t\t{\n\t\t\t\t\tdelete [] values;\n\t\t\t\t}\n\t\t\t\tthis->values = new double[this->rows * this->column + 1];\n\t\t\t\tfor(int i = 0; i < this->rows; i ++)\n\t\t\t\t{\n\t\t\t\t\tfor(int j = 0; j < this->column; j ++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis->values[i * this->column + j] = matrix2.get(i + 1, j + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn *this;\n\t\t\t}\n\t\t\t~Full()\n\t\t\t{\n\t\t\t\tdelete [] values;\n\t\t\t}\n};\n",
            1591868153.2282796,
            100,
            "# 答案正确"
        ],
        [
            "8.3 (C++)",
            "王硕",
            "#include <iostream>\n\nusing namespace std;\n\nvoid sort(Entry * val,int cnt)\n{\n\tfor(int i = 0; i < cnt; i ++)\n\t{\n\t\tfor(int j = 0; j < cnt - 1; j ++)\n\t\t{\n\t\t\tif(val[j].row > val[j + 1].row || (val[j].row == val[j + 1].row && val[j].column > val[j + 1].column))\n\t\t\t{\n\t\t\t\tEntry temp = val[j];\n\t\t\t\tval[j] = val[j + 1];\n\t\t\t\tval[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\nclass Sparse : public Matrix\n{\n\tpublic:\n\t\tint cnt;\n\t\tEntry val[100];\n\t\tSparse(int rows, int column)\n\t\t{\n\t\t\tcnt = 0;\n\t\t}\n\t\tint size(int dimension) const\n\t\t{\n\t\t\treturn cnt;\n\t\t}\n\t\tvoid set(int row, int column, double value)\n\t\t{\n\t\t\tint flag=0;\n\t\t\tint i;\n\t\t\tfor(i = 0; i < cnt; i ++)\n\t\t\t{\n\t\t\t\tif(val[i].row == row && val[i].column == column)\n\t\t\t\t{\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\t\n\t\t\t}\n\t\t\tif(flag)\n\t\t\t{\n\t\t\t\tval[i].value = value;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcnt ++;\n\t\t\t\tval[cnt - 1].row = row;\n\t\t\t\tval[cnt - 1].column = column;\n\t\t\t\tval[cnt - 1].value = value;\n\t\t\t}\n\t\t}\n\t\tdouble get(int row, int column) const\n\t\t{\n\t\t\tfor(int i=0;i<cnt;i++)\n\t\t\t{\n\t\t\t\tif(val[i].row == row && val[i].column == column)\n\t\t\t\t{\n\t\t\t\t\treturn val[i].value;\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\tvoid print()\n\t\t{\n\t\t\tsort(val, cnt);\n\t\t\tfor(int i = 0; i < cnt; i ++)\n\t\t\t{\n\t\t\t\tcout << \"(\" << val[i].row << \",\" << val[i].column << \",\" << val[i].value << \")\" << endl; \n\t\t\t}\n\t\t}\n\t\tSparse operator + (Sparse & sparse2)\n\t\t{\n\t\t\tSparse temp=*this;\n\t\t\tfor(int i = 0; i < sparse2.cnt; i ++)\n\t\t\t{\n\t\t\t\tint flag = 0;\n\t\t\t\tfor(int j = 0; j < cnt; j ++)\n\t\t\t\t{\n\t\t\t\t\tif(temp.val[j].row == sparse2.val[i].row && temp.val[j].column == sparse2.val[i].column)\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp.val[j].value += sparse2.val[i].value;\n\t\t\t\t\t\tif(temp.val[j].value == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttemp.cnt --;\n\t\t\t\t\t\t\ttemp.val[j]=temp.val[temp.cnt];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tflag = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(flag == 0)\n\t\t\t\t{\n\t\t\t\t\ttemp.val[temp.cnt ++]=sparse2.val[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn temp;\n\t\t}\n};\n",
            1591868211.3740091,
            100,
            "# 答案正确"
        ],
        [
            "8.4 (C++)",
            "王硕",
            "#include<bits/stdc++.h>\n\nusing namespace std;\n\nvoid sort(Entry * val,int cnt)\n{\n\tfor(int i = 0; i < cnt; i ++)\n\t{\n\t\tfor(int j = 0; j < cnt - 1; j ++)\n\t\t{\n\t\t\tif(val[j].row > val[j + 1].row || (val[j].row == val[j + 1].row && val[j].column > val[j + 1].column))\n\t\t\t{\n\t\t\t\tEntry temp = val[j];\n\t\t\t\tval[j] = val[j + 1];\n\t\t\t\tval[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\nclass Sparse : public Matrix\n{\n\tpublic:\n\t\tint cnt;\n\t\tEntry val[100];\n\t\tSparse(int rows, int column)\n\t\t{\n\t\t\tcnt = 0;\n\t\t}\n\t\tint size(int dimension) const\n\t\t{\n\t\t\treturn cnt;\n\t\t}\n\t\tvoid set(int row, int column, double value)\n\t\t{\n\t\t\tint flag=0;\n\t\t\tint i;\n\t\t\tfor(i = 0; i < cnt; i ++)\n\t\t\t{\n\t\t\t\tif(val[i].row == row && val[i].column == column)\n\t\t\t\t{\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\t\n\t\t\t}\n\t\t\tif(flag)\n\t\t\t{\n\t\t\t\tval[i].value = value;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcnt ++;\n\t\t\t\tval[cnt - 1].row = row;\n\t\t\t\tval[cnt - 1].column = column;\n\t\t\t\tval[cnt - 1].value = value;\n\t\t\t}\n\t\t}\n\t\tdouble get(int row, int column) const\n\t\t{\n\t\t\tfor(int i=0;i<cnt;i++)\n\t\t\t{\n\t\t\t\tif(val[i].row == row && val[i].column == column)\n\t\t\t\t{\n\t\t\t\t\treturn val[i].value;\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\tvoid print()\n\t\t{\n\t\t\tsort(val, cnt);\n\t\t\tfor(int i = 0; i < cnt; i ++)\n\t\t\t{\n\t\t\t\tcout << \"(\" << val[i].row << \",\" << val[i].column << \",\" << val[i].value << \")\" << endl; \n\t\t\t}\n\t\t}\n\t\tSparse operator * (Sparse & sparse2)\n\t\t{\n\t\t\tSparse temp(0, 0);\n\t\t\tmemset(temp.val, 0, sizeof(double) * 100);\n\t\t\tfor(int i = 0; i < sparse2.cnt; i ++)\n\t\t\t{\n\t\t\t\tfor(int j = 0; j < cnt; j ++)\n\t\t\t\t{\n\t\t\t\t\tif(val[j].column == sparse2.val[i].row)\n\t\t\t\t\t{\n\t\t\t\t\t\tint flag = 1;\n\t\t\t\t\t\tfor(int k = 0; k < temp.cnt; k ++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(temp.val[k].row == val[j].row && temp.val[k].column == sparse2.val[i].column)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttemp.val[k].value += val[j].value * sparse2.val[i].value;\n\t\t\t\t\t\t\t\tflag = 0;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(flag)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttemp.val[temp.cnt].row = val[j].row;\n\t\t\t\t\t\t\ttemp.val[temp.cnt].column = sparse2.val[i].column;\n\t\t\t\t\t\t\ttemp.val[temp.cnt].value += val[j].value * sparse2.val[i].value;\n\t\t\t\t\t\t\ttemp.cnt ++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t}\n\t\t\treturn temp;\n\t\t}\n};\n",
            1591868244.2505915,
            100,
            "# 答案正确"
        ],
        [
            "8.6 (C++)",
            "王硕",
            "#include <iostream>\nusing namespace std;\nclass MyTensor:public Tensor<double>{\n private:\n  vector<double>nums;\n public:\n  MyTensor(vector<int>sizes):Tensor<double>(sizes){\n   int total=1;\n   for(int i=0;i<sizes.size();++i) total*=sizes[i];\n   for(int i=0;i<total;++i) nums.push_back(double());\n  };\n  double&get(const vector<int>&indexes){\n   int index=0;\n   for(int i=0;i<indexes.size();++i){\n    int temp=indexes[i];\n    for(int j=i+1;j<indexes.size();++j) temp*=indexes[j];\n    index+=temp;\n   }\n   return nums[index];\n  }\n \n}; ",
            1592451127.1222525,
            100,
            "# 答案正确"
        ],
        [
            "9.1 (C++)",
            "王硕",
            "#include <iostream>\n\nusing namespace std;\n\nclass Circle\n{\n\tprivate:\n\t\tdouble radius;\n\tpublic:\n\t\tCircle(double radius)\n\t\t{\n\t\t\tthis->radius = radius;\n\t\t}\n\t//<, <=, ==, !=, >, >=\n\tbool operator < (const Circle circle)\n\t{\n\t\tif (this->radius < circle.radius) return true;\n\t\telse return false;\n\t}\n\tbool operator <= (const Circle circle)\n\t{\n\t\tif (this->radius <= circle.radius) return true;\n\t\telse return false;\n\t}\n\tbool operator != (const Circle circle)\n\t{\n\t\tif (this->radius != circle.radius) return true;\n\t\telse return false;\n\t}\n\tbool operator == (const Circle circle)\n\t{\n\t\tif (this->radius == circle.radius) return true;\n\t\telse return false;\n\t}\n\tbool operator > (const Circle circle)\n\t{\n\t\tif (this->radius > circle.radius) return true;\n\t\telse return false;\n\t}\n\tbool operator >= (const Circle circle)\n\t{\n\t\tif (this->radius >= circle.radius) return true;\n\t\telse return false;\n\t}\n};\n",
            1592989981.8101306,
            100,
            "# 答案正确"
        ],
        [
            "9.2 (C++)",
            "王硕",
            "#include <iostream>\n\nusing namespace std;\n\nclass I\n{\n\tprivate:\n\t\tvector<int> sizes;\n\tpublic:\n\t\tI(int a, int b = -1, int c = -1, int d = -1)\n\t\t{\n\t\t\tsizes.push_back(a);\n\t\t\tif(b != -1) sizes.push_back(b);\n\t\t\tif(c != -1) sizes.push_back(c);\n\t\t\tif(d != -1) sizes.push_back(d);\n\t\t}\n\t\toperator vector<int>() const\n\t\t{\n\t\t\treturn this->sizes;\n\t\t}\n\n};\n",
            1592990183.2482545,
            100,
            "# 答案正确"
        ],
        [
            "9.3 (C++)",
            "王硕",
            "#include <iostream>\n\nusing namespace std;\n\nclass Complex\n{\n\tprivate:\n\t\tdouble m_real;\n\t\tdouble m_imag;\n\tpublic:\n\t\tComplex(double real, double imag)\n\t\t{\n\t\t\tthis->m_real = real;\n\t\t\tthis->m_imag = imag;\n\t\t}\n\t\tdouble real()\n\t\t{\n\t\t\treturn this->m_real;\n\t\t}\n\t\tdouble imag()\n\t\t{\n\t\t\treturn this->m_imag;\n\t\t}\n\t\tComplex operator + (Complex & c)\n\t\t{\n\t\t\tdouble num1 = this->m_real + c.m_real;\n\t\t\tdouble num2 = this->m_imag + c.m_imag;\n\t\t\tComplex com_com(num1, num2);\n\t\t\treturn com_com;\n\t\t}\n\t\tComplex operator - (Complex & c)\n\t\t{\n\t\t\tdouble num1 = this->m_real - c.m_real;\n\t\t\tdouble num2 = this->m_imag - c.m_imag;\n\t\t\tComplex com_com(num1, num2);\n\t\t\treturn com_com;\n\t\t}\n\t\tComplex operator * (Complex & c)\n\t\t{\n\t\t\tdouble num1 = this->m_real * c.m_real - this->m_imag * c.m_imag;\n\t\t\tdouble num2 = this->m_imag * c.m_real + this->m_real * c.m_imag;\n\t\t\tComplex com_com(num1, num2);\n\t\t\treturn com_com;\n\t\t}\n\t\tComplex operator / (Complex & c)\n\t\t{\n\t\t\tdouble num1 = (this->m_real * c.m_real + this->m_imag * c.m_imag) / (c.m_real * c.m_real + c.m_imag * c.m_imag);\n\t\t\tdouble num2 = (this->m_imag * c.m_real - this->m_real * c.m_imag) / (c.m_real * c.m_real + c.m_imag * c.m_imag);\n\t\t\tComplex com_com(num1, num2);\n\t\t\treturn com_com;\n\t\t}\n\t\tComplex operator - (double num)\n\t\t{\n\t\t\tdouble num1 = this->m_real - num;\n\t\t\tdouble num2 = this->m_imag;\n\t\t\tComplex com_com(num1, num2);\n\t\t\treturn com_com;\n\t\t}\n\t\tComplex & operator += (Complex & c)\n\t\t{\n\t\t\tthis->m_real = this->m_real + c.m_real;\n\t\t\tthis->m_imag = this->m_imag + c.m_imag;\n\t\t\treturn (*this);\n\t\t}\n\t\tComplex & operator -= (Complex & c)\n\t\t{\n\t\t\tthis->m_real = this->m_real - c.m_real;\n\t\t\tthis->m_imag = this->m_imag - c.m_imag;\n\t\t\treturn (*this);\n\t\t}\n\t\tComplex & operator *= (Complex & c)\n\t\t{\n\t\t\tdouble r = this->m_real, i = this->m_imag;\n\t\t\tthis->m_real = r * c.m_real - i * c.m_imag;\n\t\t\tthis->m_imag = i * c.m_real + r * c.m_imag;\n\t\t\treturn (*this);\n\t\t}\n\t\tComplex & operator /= (Complex & c)\n\t\t{\n\t\t\tdouble r = this->m_real, i = this->m_imag;\n\t\t\tthis->m_real = (r * c.m_real + i * c.m_imag) / (c.m_real * c.m_real + c.m_imag * c.m_imag);\n\t\t\tthis->m_imag = (i * c.m_real - r * c.m_imag) / (c.m_real * c.m_real + c.m_imag * c.m_imag);\n\t\t\treturn (*this);\n\t\t}\n};\nComplex operator + (double num, Complex & c)\n{\n\tdouble num1 = c.real() + num;\n\tdouble num2 = c.imag();\n\tComplex com_com(num1, num2);\n\treturn com_com;\n}\nbool operator == (Complex & c1, Complex & c2)\n{\n\tif(c1.real() == c2.real() && c1.imag() == c2.imag()) return true;\n\treturn false;\n}\nbool operator != (Complex & c1,Complex & c2)\n{\n\tif(c1 == c2) return false;\n\treturn true;\n}\n",
            1593067611.002103,
            100,
            "# 答案正确"
        ],
        [
            "9.4 (C++)",
            "王硕",
            "#include <iostream>\n\nusing namespace std;\n\nclass Complex\n{\n\tprivate:\n\t\tdouble real;\n\t\tdouble imag;\n\tpublic:\n\t\tfriend istream & operator>>(istream & in, Complex & A);\n    \tfriend ostream & operator<<(ostream & out, Complex & A);\n\t\tComplex operator + (const Complex c)\n\t\t{\n\t\t\tComplex com_com;\n\t\t\tcom_com.real = this->real + c.real;\n\t\t\tcom_com.imag = this->imag + c.imag;\n\t\t\treturn com_com;\n\t\t}\n\t\tComplex operator - (const Complex c)\n\t\t{\n\t\t\tComplex com_com;\n\t\t\tcom_com.real = this->real - c.real;\n\t\t\tcom_com.imag = this->imag - c.imag;\n\t\t\treturn com_com;\n\t\t}\n};\nistream & operator >> (istream & in, Complex & A)\n{\n\tin >> A.real >> A.imag;\n\treturn in;\n}\nostream & operator << (ostream & out, Complex & A)\n{\n\tout << A.real <<\" + \"<< A.imag <<\" i \";\n\treturn out;\n}\n",
            1593067637.180464,
            100,
            "# 答案正确"
        ],
        [
            "9.5 (C++)",
            "王硕",
            "#include <iostream>\n\nusing namespace std;\n\nclass Complex\n{\n\tprivate:\n\t\tdouble real;\n\t\tdouble imag;\n\tpublic:\n\t\tfriend istream & operator >> (istream & in, Complex & c);\n\t\tfriend ostream & operator << (ostream & out,const Complex & c);\n\t\tComplex ()\n\t\t{ \n\t\t\tthis->real = 0;\n\t\t\tthis->imag = 0;\n\t\t}\n\t\tComplex(Complex & c)\n\t\t{\n\t\t\tthis->real = c.real;\n\t\t\tthis->imag = c.imag;\n\t\t}\n\t\toperator double() \n\t\t{\n\t\t\treturn this->real;\n\t\t}\n\t\tComplex operator ++ (int)\n\t\t{\n\t\t\tComplex c(*this);\n\t\t\t\n\t\t\tthis->real ++;\n\t\t\treturn c;\n\t\t}\n\t\tComplex & operator ++()\n\t\t{\n\t\t\tthis->real ++;\n\t\t\treturn (*this);\n\t\t}\n\t\t\n};\nistream & operator >> (istream & in, Complex & c)\n{\n\tin >> c.real >> c.imag;\n\treturn in;\n}\nostream & operator << (ostream & out,const Complex & c)\n{\n\tout << c.real << \" + \" << c.imag << \" i\" ;\n\treturn out;\n}\n",
            1593067662.1406658,
            100,
            "# 答案正确"
        ],
        [
            "9.6 (C++)",
            "王硕",
            "#include <iostream>\n\nusing namespace std;\n\nclass Tensor\n{\n\tprivate:\n\t\tint sizes[4];\n\t\tdouble * data;\n\t\tint num;\n\n\tpublic:\n\t\tTensor(int a, int b = -1, int c = -1, int d = -1)\n\t\t{\n\t\t\tint count = 1;\n\t\t\tint sum = a;\n\t\t\tthis->sizes[0] = a;\n\t\t\tif(b!= -1)\n\t\t\t{\n\t\t\t\tcount ++;\n\t\t\t\tthis->sizes[1] = b;\n\t\t\t\tsum *= b;\n\t\t\t}\n\t\t\tif(c != -1)\n\t\t\t{\n\t\t\t\tcount ++;\n\t\t\t\tthis->sizes[2] = c;\n\t\t\t\tsum *= c;\n\t\t\t}\n\t\t\tif(d!=-1)\n\t\t\t{\n\t\t\t\tcount ++;\n\t\t\t\tthis->sizes[3] = d;\n\t\t\t\tsum *= d;\n\t\t\t}\n\t\t\tthis->num = count;\n\t\t\tdata = new double[sum];\n\t\t}\n\t\t~Tensor()\n\t\t{\n\t\t\tdelete[] data;\n\t\t}\n\t\tdouble & operator() (int a, int b = -1, int c = -1, int d =- 1)\n\t\t{\n\t\t\tint index = a;\n\t\t\tif(b != -1)\n\t\t\t{\n\t\t\t\tindex += b * this->sizes[0];\n\t\t\t}\n\t\t\tif(c != -1)\n\t\t\t{\n\t\t\t\tindex += c * this->sizes[0] * this->sizes[1];\n\t\t\t}if(d != -1)\n\t\t\t{\n\t\t\t\tindex += d * this->sizes[0] * this->sizes[1] * this->sizes[2];\n\t\t\t}\n\t\t\treturn data[index];\n\t\t}\n};\n",
            1593079284.826099,
            100,
            "# 答案正确"
        ],
        [
            "9.7 (C++)",
            "王硕",
            "#include <iostream>\n\nusing namespace std;\n\nclass Tensor\n{\n\tprivate:\n\t\tint num;\n\t\tint size[4];\n\t\tdouble * value;\n\tpublic:\n\t\tfriend istream & operator>>(istream & in, Tensor & tensor);\n    \tfriend ostream & operator<<(ostream & out, Tensor & tensor);\n\t\tTensor() {}\n\t\t~Tensor()\n\t\t{\n\t\t\tdelete[] value;\n\t\t}\n};\nistream & operator >> (istream & in, Tensor & tensor)\n{\n\tin >> tensor.num;\n\tint sum = 1;\n\tfor (int i = 0; i < tensor.num; i ++)\n\t{\n\t\tin >> tensor.size[i];\n\t\tsum *= tensor.size[i];\n\t}\n\ttensor.value = new double[sum + 1];\n\tfor (int i = 0; i < sum; i ++) in >> tensor.value[i];\n\treturn in;\n}\nostream & operator << (ostream & out, Tensor & tensor)\n{\n\tout << tensor.num;\n\tint sum = 1;\n\tout << endl;\n\tfor (int i = 0; i < tensor.num; i ++)\n\t{\n\t\tout << tensor.size[i] << \" \";\n\t\tsum *= tensor.size[i];\n\t}\n\tout << endl << endl;\n\tswitch (tensor.num)\n\t{\n\t\tcase 2:\n\t\t\tfor (int a = 0; a < tensor.size[0]; a++)\n\t\t\t{\n\t\t\t\tfor (int b = 0; b < tensor.size[1]; b++)\n\t\t\t\t{\n\t\t\t\t\tout << tensor.value[a * tensor.size[2] + b] << \" \";\n\t\t\t\t}\n\t\t\t\tout << endl;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tfor (int a = 0; a < tensor.size[0]; a++)\n\t\t\t{\n\t\t\t\tfor (int b = 0; b < tensor.size[1]; b++)\n\t\t\t\t{\n\t\t\t\t\tfor (int c = 0; c < tensor.size[2]; c++)\n\t\t\t\t\t{\n\t\t\t\t\t\tout << tensor.value[a * tensor.size[2] * tensor.size[1] + b * tensor.size[0] + c] << \" \";\n\t\t\t\t\t}\n\t\t\t\t\tout << endl;\n\t\t\t\t}\n\t\t\t\tout << endl;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tfor (int a = 0; a < tensor.size[0]; a++)\n\t\t\t{\n\t\t\t\tfor (int b = 0; b < tensor.size[1]; b++)\n\t\t\t\t{\n\t\t\t\t\tfor (int c = 0; c < tensor.size[2]; c++)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (int d = 0; d < tensor.size[3]; d++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tout << tensor.value[a * tensor.size[3] * tensor.size[2] * tensor.size[1] + b * tensor.size[3] * tensor.size[2] + c * tensor.size[3] + d] << \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tout << endl;\n\t\t\t\t\t}\n\t\t\t\t\tout << endl;\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\tout << endl;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\treturn out;\n}\n",
            1593079324.9821532,
            96,
            "=================================================================\n==20056==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60d00000cff8 at pc 0x5599c3062f48 bp 0x7ffc862c5200 sp 0x7ffc862c51f0\nREAD of size 8 at 0x60d00000cff8 thread T0\n    #0 0x5599c3062f47 in operator<<(std::ostream&, Tensor&) /home/王硕/source.cpp:63\n    #1 0x5599c30638a6 in main /home/王硕/main.cpp:12\n    #2 0x7fea057f782f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n    #3 0x5599c30623b8 in _start (/home/王硕/main.out+0x13b8)\n\n0x60d00000cff8 is located 0 bytes to the right of 136-byte region [0x60d00000cf70,0x60d00000cff8)\nallocated by thread T0 here:\n    #0 0x7fea061d26b2 in operator new[](unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x996b2)\n    #1 0x5599c30625a5 in operator>>(std::istream&, Tensor&) /home/王硕/source.cpp:29\n    #2 0x5599c3063893 in main /home/王硕/main.cpp:11\n    #3 0x7fea057f782f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow /home/王硕/source.cpp:63 operator<<(std::ostream&, Tensor&)\nShadow bytes around the buggy address:\n  0x0c1a7fff99a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c1a7fff99b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c1a7fff99c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c1a7fff99d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c1a7fff99e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa 00 00\n=>0x0c1a7fff99f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00[fa]\n  0x0c1a7fff9a00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c1a7fff9a10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c1a7fff9a20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c1a7fff9a30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c1a7fff9a40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n==20056==ABORTING\n"
        ],
        [
            "10.2 (C++)",
            "王硕",
            "catch(NonPositiveValueException & er){\n\tcout << \"caught: NonPositiveValueException\" << endl;\n}\ncatch(std::out_of_range & er){\n\tcout << \"caught: out_of_range\"<<endl;\n}",
            1593659541.553723,
            100,
            "# 答案正确"
        ],
        [
            "10.1 (C++)",
            "王硕",
            "#include <iostream>\n#include <exception>\nclass MatrixSizesDoNotMatchException\n{\n};\n\ndouble Matrix::get(int r, int c) const\n{\n\tif (r > this->size(1) || c > this->size(2))\n\t{\n\t\tout_of_range error(\"A\");\n\t\tthrow error;\n\t}\n\t\t\n\tint size1 = size(2);\n\treturn elements[r * size1 + c];\n}\n\nvoid Matrix:: set(int r,int c,double v)\n{\n\tint sizes1 = this->size(1), sizes2 = this->size(2);\n\tif(r>sizes1 || c > sizes2)\n\t{\n\t\tout_of_range error(\"A\");\n\t\tthrow error;\n\t}\n\telse\n\t{\n\t\tint index = r * sizes2 + c;\n\t\tthis->elements[index] = v;\n\t}\n}\n\nMatrix Matrix::operator+(const Matrix & M)const\n{\n\tif(this->size(1) != M.size(1) || this->size(2) != M.size(2))\n\t{\n\t\tMatrixSizesDoNotMatchException error;\n\t\tthrow error;\n\t}\n\telse\n\t{\n\t\tMatrix result(M.size(1), M.size(2));\n\t\tfor (int i = 1; i <= M.size(1);i++)\n\t\t{\n\t\t\tfor (int j = 1; j <= M.size(2);j++)\n\t\t\t{\n\t\t\t\tresult.set(i, j, M.get(i, j) + this->get(i, j));\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            1593692286.743516,
            100,
            "# 答案正确"
        ],
        [
            "2020-07-09 LAB",
            "王硕",
            "#include<iostream>\n#include<vector>\nusing namespace std;\n\nclass Integer{\nprivate:\n    int num;\n    static vector<Integer*> index;\npublic:\n    Integer(): num(0){\n        index.push_back(this);\n    }\n    Integer(int x): num(x){\n        index.push_back(this);\n    }\n    void change_value(const int& x){num = x;}\n    int get_value()const{return num;}\n    static void increase_all(const Integer& x){\n        for(int i = 0;i < index.size();i++){\n            index[i]->change_value(index[i]->get_value()+x.get_value());\n        }\n    }\n};\nvector<Integer*> Integer::index = vector<Integer*>();\n\nistream& operator >> (istream& in,Integer& x){\n    int num;\n    in >> num;\n    x.change_value(num);\n    return in;\n}\nostream& operator << (ostream& out,Integer& x){\n    out << x.get_value();\n    return out;\n}",
            1594265158.1802704,
            100,
            "# 答案正确"
        ],
        [
            "15.1 (C++)",
            "王硕",
            "#include <string>\n#include <vector>\nusing namespace std;\nstring tostr(vector<string> value)\n{\n\tstring tmp;\n\tstring result;\n\tresult.push_back('\\t');\n\tresult.push_back('\\t');\n\tresult.push_back('[');\n\tfor (int i = 0; i < value.size(); i++)\n\t{\n\t\ttmp = value[i];\n\t\tresult.push_back('\\'');\n\t\tfor (int j = 0; j < tmp.size(); j++)\n\t\t\tresult.push_back(tmp[j]);\n\t\tresult.push_back('\\'');\n\t\tresult.push_back(',');\n\t}\n\tresult.insert(result.size(), \"],\\n\");\n\treturn result;\n}\n\nclass Table\n{\n\t\n\tvector<string> head;\n\tvector<vector<string>> value;\n\npublic:\n\tvoid addCol(string str)\n\t{\n\t\thead.push_back(str);\n\t};\n\tTable()\n\t{\n\t\thead.resize(0);\n\t\tvalue.resize(0);\n\t}\n\tstring json()const\n\t{\n\t\tstring result;\n\t\tresult = \"{\\n\\theaders: [\";\n\t\tstring tmp;\n\t\tfor (int i = 0; i < head.size();i++)\n\t\t{\n\t\t\ttmp = head[i];\n\t\t\tresult.push_back('\\'');\n\t\t\tfor (int j = 0; j < tmp.size();j++)\n\t\t\t\tresult.push_back(tmp[j]);\n\t\t\tresult.push_back('\\'');\n\t\t\t\n\t\t\tresult.push_back(',');\n\t\t}\n\t\tresult.insert(result.size(), \"],\\n\\trows: [\\n\");\n\t\tfor (int i = 0; i < value.size();i++)\n\t\t\tresult.insert(result.size(), tostr(value[i]));\n\n\t\tresult.insert(result.size(), \"\\t],\\n}\");\n\n\t\treturn result;\n\t}\n\tvector<string> & operator[](int index)\n\t{\n\t\t\n\t\tif(index < value.size())\n\t\t{\n\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvalue.resize(index+1);\t\n\t\t}\n\t\treturn value[index];\n\t}\n};",
            1594283586.672862,
            100,
            "# 答案正确"
        ],
        [
            "A.2 (C++)",
            "王硕",
            "template <typename E>\nvoid LinkedList<E>:: removeAll(const E & e){\n\t if(contains(e)==false) return;\n\t removeFirstOccurrence(e);\n\t removeAll(e);\n}",
            1594869292.1861944,
            100,
            "# 答案正确"
        ],
        [
            "A.1 (C++)",
            "王硕",
            "LinkedList(const LinkedList &o) : _size(0), head(0), tail(0)\n{\n\taddAll(o);\n}\nLinkedList & operator= (const LinkedList & o)\n{\n\tclear();\n\taddAll(o);\n}\n~LinkedList()\n{\n\tclear();\n}\nvoid clear()\n{\n\twhile(_size > 0) removeFirst();\n}\nvoid addAll(const LinkedList & o)\n{\n\tNode<E> *temp = o.head;\n\tNode<E> *prev = 0;\n\tNode<E> *next = temp->next_node(prev);\n\tfor (int i = 0; i < o._size-1;i++)\n\t{\n\t\tadd( i, temp->element);\n\t\tprev = temp;\n\t\ttemp = next;\n\t\tnext = next->next_node(prev);\n\t}\n\tadd(o._size, temp->element);\n}\nvoid print(const LinkedList &o)\n{\n\tNode<E> *temp = o.head;\n\tNode<E> *prev = 0;\n\tNode<E> *next = temp->next_node(prev);\n\tfor (int i = 0; i < o._size-1;i++)\n\t{\n\t\tcout << temp->element << \" \";\n\t\tprev = temp;\n\t\ttemp = next;\n\t\tnext = next->next_node(prev);\n\t}\n\tcout <<temp->element<< endl;\n}\nvoid add(int index,const E o)\n{\n\tNode<E> *node = new Node<E>();\n\tnode->element = o;\n\tif(this->head == 0)\n\t{\n\t\tthis->head = node;\n\t\tthis->tail = this->head;\n\t}\n\telse if(index==0 && this->head != 0)\n\t{\n\t\thead->update_prev_node(0, node);\n\t\tnode->update_next_node(0, head);\n\t\thead = node;\n\t}\n\telse if(index=this->_size)\n\t{\n\t\tNode<E> *temp = this->tail;\n\t\tNode<E> *next = 0;\n\t\tnext = node;\n\t\tnode->update_prev_node(0, temp);\n\t\ttemp->update_next_node(0, next);\n\t\ttail = node;\n\t}\n\t++_size;\n}\nvoid remove(int index)\n{\n\tif(index==0)\n\t{\n\t\tNode<E> *temp = this->head;\n\t\tNode<E> *next = temp->next_node(0);\n\t\tNode<E> *prev = 0;\n\t\tif(next!=0)\n\t\t{\n\t\t\tnext->update_prev_node(head,0);\n\t\t}\n\t\thead = next;\n\t\tdelete temp;\n\t}\n\telse\n\t{\n\t\tNode<E> *temp = this->tail;\n\t\tNode<E> *prev = temp->prev_node(0);\n\t\tthis->tail = prev;\n\t\tprev->update_next_node(temp, 0);\n\t\tdelete temp;\n\t}\n\tthis->_size--;\n}\nvoid addFirst(E val)\n{\n\tadd(0, val);\n}\nvoid addLast(E val)\n{\n\tadd(_size, val);\n}\nvoid removeFirstOccurrence(int val)\n{\n\tNode<E> *temp = this->head;\n\tNode<E> *next = temp->next_node(0);\n\tNode<E> *prev = 0;\n\tif(this->tail->element == val)\n\t{\n\t\tremoveLast();\n\t\treturn;\n\t}\n\telse if(this->head->element==val)\n\t{\n\t\tremoveFirst();\n\t\treturn;\n\t}\n\tfor (int i = 0; i < this->_size-1;i++)\n\t{\n\t\tprev = temp, temp = next;\n\t\tnext = temp->next_node(prev);\n\t\tif (temp->element == val) break;\n\t}\n\tprev->update_next_node(temp, next);\n\tnext->update_prev_node(temp, prev);\n\tdelete temp;\n\tthis->_size--;\n}\nint get(int index)\n{\n\tNode<E> *temp = this->head;\n\tNode<E> *prev = 0;\n\tNode<E> *next = temp->next_node(prev);\n\tif(index==this->_size-1) return this->tail->element;\n\telse if(index==0)\n\t{\n\t\treturn temp->element;\n\t}\n\treturn temp->element;\n}\nvoid removeLast()\n{\n\tremove(this->_size);\n}\nvoid removeFirst()\n{\n\tremove(0);\n}",
            1594895370.4778767,
            100,
            "# 答案正确"
        ],
        [
            "A.4 (C++)",
            "王硕",
            "#include <iostream>\n#include <sstream>\n#include <string>\nusing namespace std;\nclass SZ\n{\n\tpublic:\n\t\tint key;\n\t\tint value;\n\t\tSZ() {}\n\t\tSZ(int key, int value)\n\t\t{\n\t\t\tthis->key = key;\n\t\t\tthis->value = value;\n\t\t}\n\t\toperator int()\n\t\t{\n\t\t\treturn this->value;\n\t\t}\n\t\toperator string()\n\t\t{\n\t\t\tstring result;\n\t\t\tstringstream s_s;\n\t\t\ts_s << this->value;\n\t\t\ts_s >> result;\n\t\t\treturn result;\n\t\t}\n};\nclass HT\n{\n\tprivate:\n\t\tSZ dict[10];\n\t\tint _size;\n\tpublic:\n\t\tHT(): _size(0) {}\n\t\t~HT(){}\n\t\ttemplate<typename K,typename V>\n\t\tvoid put(K key,V value)\n\t\t{\n\t\t\tint k;\n\t\t\tint val;\n\t\t\tk = str_to_int(key);\n\t\t\tval = str_to_int(value);\n\t\t\tSZ ling(k, val);\n\t\t\tdict[this->_size] = ling;\n\t\t\tthis->_size ++;\n\t\t}\n\t\tint size()\n\t\t{\n\t\t\treturn this->_size;\n\t\t}\n\t\tint str_to_int(int str)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t\tint str_to_int(string str)\n\t\t{\n\t\t\tstringstream s_s;\n\t\t\ts_s << str;\n\t\t\tint res;\n\t\t\ts_s >> res;\n\t\t\treturn res;\n\t\t}\n\t\tstring int_to_str(string v)\n\t\t{\n\t\t\treturn v;\n\t\t}\n\t\tstring int_to_str(int v)\n\t\t{\n\t\t\tstring result;\n\t\t\tstringstream s_s;\n\t\t\ts_s << v;\n\t\t\ts_s >> result;\n\t\t\treturn result;\n\t\t}\n\t\ttemplate < typename V>\n\t\tSZ operator[](const V &index)\n\t\t{\n\t\t\tint ling;\n\t\t\tling = str_to_int(index);\n\t\t\tfor (int i = 0; i <= 10;i++)\n\t\t\t{\n\t\t\t\tif(dict[i].key == ling)\n\t\t\t\t{\n\t\t\t\t\treturn dict[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};",
            1595837220.0421765,
            100,
            "# 答案正确"
        ]
    ],
    "table_name": "答案"
}