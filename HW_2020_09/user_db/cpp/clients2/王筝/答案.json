{
    "__update_time__": 1595576325.5850961,
    "field_names": [
        "题目名",
        "用户名",
        "答案",
        "提交时间",
        "分数",
        "评语"
    ],
    "field_types": [
        "text",
        "text",
        "text",
        "time",
        "number",
        "text"
    ],
    "foreign_keys": {},
    "primary_keys": [],
    "rows": [
        [
            "测试1",
            "王筝",
            "#include <iostream>\n\n#include <string>\n#include <cstring>\nusing namespace std;\n\nint main(){\n    string s[3];\n    cin >> s[0] >> s[1] >> s[2];\n    cout << s[2] <<\" \"<<s[1]<<\" \"<<s[0]<< endl;\n    return 0;\n}",
            1587519610.0,
            100,
            "# 答案正确"
        ],
        [
            "测试2",
            "王筝",
            "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <cstring>\nusing namespace std;\n\n\nint compare(char a[],char b[]){\n    int i = 0;\n    while(a[i]!=0||b[i]!=0){\n        if(a[i]<b[i])\n            return 0;\n        else if(a[i]>b[i])\n            return 1;\n        i++;\n    }\n    return 1;\n}\n\nint main(){\n    char vo[10][20],temp[20];\n    for (int i = 0; i < 10;i++)\n        cin >> vo[i];\n    for (int i = 0; i < 10;i++)\n        for (int j = 8; j >= i;j--){\n            if(compare(vo[j],vo[j+1])==1){\n                strcpy(temp, vo[j]);\n                strcpy(vo[j], vo[j + 1]);\n                strcpy(vo[j + 1], temp);\n            }\n        }\n    for (int i = 0; i < 10;i++)\n        cout << vo[i] << \" \";\n        return 0;\n}",
            1587609632.6955,
            100,
            "# 答案正确"
        ],
        [
            "1.1 (C++)",
            "王筝",
            "\nclass Matrix5x5{\n    public:\n        double arr[6][6];\n        Matrix5x5();\n        void set(int x, int y, double n);\n        double get(int x, int y);\n        \n};\n\nMatrix5x5::Matrix5x5(){\n    for (int i = 0; i < 6;i++)\n        for (int j = 0; j < 6;j++){\n            this->arr[i][j] = 0;\n        }\n}\n\n    double\n    Matrix5x5::get(int x, int y)\n{\n    return this->arr[x][y];\n}\n\nvoid Matrix5x5::set(int x,int y,double n){\n    this->arr[x][y] = n;\n}\n\nMatrix5x5 operator+(Matrix5x5 &m1, Matrix5x5 &m2){\n    Matrix5x5 result;\n    for (int i = 0; i < 5;i++)\n        for (int j = 0; j < 5;j++) {\n            result.arr[i][j] = m1.arr[i][j] + m2.arr[i][j];\n        }\n    return result;\n}",
            1587697776.583419,
            100,
            "# 答案正确"
        ],
        [
            "1.2 (C++)",
            "王筝",
            "#include <cstring>\n#include <string>\nusing namespace std;\nclass School{\n    public:\n        string name;\n        int age;\n        School(){\n            this->name = \"NO_NAME\";\n            this->age = 0;\n        }\n        void setName(string Name){\n            this->name = Name;\n            return;\n        }\n        void setAge(int age){\n            this->age = age;\n        }\n        void operator++(){\n            this->age = this->age + 1;\n        }\n};",
            1588213312.8971539,
            100,
            "# 答案正确"
        ],
        [
            "2.1 (C++)",
            "王筝",
            "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <cstring>\nusing namespace std;\n\nclass Matrix{\n    private:\n        int rows;\n        int columus;\n        double *values;\n    public:\n        Matrix(int r,int c){\n            this->values = (double*)malloc(sizeof(double)*r*c);\n            memset(values, 0, sizeof(values)*r*c);\n            this->rows = r;\n            this->columus = c;\n        }\n        void print(){\n            for (int i = 0; i < this->rows;i++){\n                for (int j = 0; j < this->columus;j++){\n                    cout << \"    \" << *(this->values++);\n                }\n                cout << endl;\n            }\n        }\n        ~Matrix(){\n            \n        }\n};",
            1588828168.588918,
            100,
            "# 答案正确"
        ],
        [
            "2.2 (C++)",
            "王筝",
            "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <cstring>\nusing namespace std;\n\nclass Matrix{\n    private:\n        int rows;\n        int columus;\n        double *values;\n    public:\n        Matrix(int r,int c,double value[]){\n            this->values = (double*)malloc(sizeof(double)*r*c);\n            memset(values, 0, sizeof(values)*r*c);\n            double *p = this->values;\n            this->rows = r;\n            this->columus = c;\n            for (int i = 0; i < r * c;i++){\n                *p = value[i];\n                p++;\n            }\n        }\n        void print(){\n            for (int i = 0; i < this->rows;i++){\n                for (int j = 0; j < this->columus;j++){\n                    cout << setw(5) << *(this->values++);\n                }\n                cout << endl;\n            }\n        }\n        ~Matrix(){\n            \n        }\n};",
            1588828383.7632782,
            100,
            "# 答案正确"
        ],
        [
            "2.3 (C++)",
            "王筝",
            "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <cstring>\nusing namespace std;\n\nclass Matrix{\n    private:\n        int rows;\n        int columus;\n        double *values;\n    public:\n        Matrix(int r,int c,double value[]){\n            this->values = (double*)malloc(sizeof(double)*r*c);\n            memset(values, 0, sizeof(values)*r*c);\n            double *p = this->values;\n            this->rows = r;\n            this->columus = c;\n            for (int i = 0; i < r * c;i++){\n                *p = value[i];\n                p++;\n            }\n        }\n        Matrix(const Matrix & mat){\n            this->rows=mat.rows, this->columus=mat.columus;\n            \n            this->values = (double *)malloc(sizeof(double) * this->rows * this->columus);\n            double *p =  mat.values,*pp=this->values;\n            for (int i = 0; i < this->rows * this->columus;i++){\n                *pp = *p;\n                p++;\n                pp++;\n            }\n            \n        }\n        void print(){\n            for (int i = 0; i < this->rows;i++){\n                for (int j = 0; j < this->columus;j++){\n                    cout << \"    \" << *(this->values++);\n                }\n                cout << endl;\n            }\n        }\n        ~Matrix(){\n           \n        }\n};\n",
            1588829392.2066314,
            100,
            "# 答案正确"
        ],
        [
            "2.5 (C++)",
            "王筝",
            "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <cstring>\nusing namespace std;\n\nclass Matrix{\n    private:\n        int rows;\n        int columus;\n        double *values;\n\n    public:\n        Matrix(int r,int c,double value[]){\n            this->values = (double*)malloc(sizeof(double)*r*c);\n            memset(values, 0, sizeof(values)*r*c);\n            double *p = this->values;\n            this->rows = r;\n            this->columus = c;\n            for (int i = 0; i < r * c;i++){\n                *p = value[i];\n                p++;\n            }\n            \n        }\n        Matrix(int r, int c)\n        {\n            this->values = (double *)malloc(sizeof(double) * r * c);\n            memset(values, 0, sizeof(values) * r * c);\n            \n            this->rows = r;\n            this->columus = c;\n            \n        }\n        \n        Matrix getRow(int row){\n            int r = this->rows, c = this->columus;\n            double *p = this->values;\n            Matrix n(1,c);\n            double *p1 = n.values;\n            for (int i = 1*c; i < row * c;i++)\n                p++;\n            for (int i = 0; i < c;i++){\n                *p1 = *p;\n                p1++;\n                p++;\n            }\n            return n;\n        }\n        Matrix getColumn(int col){\n            int r = this->rows, c = this->columus;\n            double *p = this->values;\n            double v[100];\n            \n            for (int i = 1; i < col;i++){\n                p++;\n            }\n            for (int i = 0; i < r;i++){\n                v[i] = *p;\n                \n                for (int k = 0; k < c;k++)\n                    p++;\n            }\n            Matrix n(r, 1,v);\n            return n;\n        }\n        void print(){\n            double *p = this->values;\n            for (int i = 0; i < this->rows;i++){\n                for (int j = 0; j < this->columus;j++){\n                    cout << \"    \" << *(p++);\n                }\n                cout << endl;\n            }\n        }\n        ~Matrix(){\n           \n        }\n};",
            1588832231.5737998,
            100,
            "# 答案正确"
        ],
        [
            "2.6 (C++)",
            "王筝",
            "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <cstring>\nusing namespace std;\n\nclass Matrix{\n    private:\n        int rows;\n        int columus;\n        double *values;\n\n    public:\n        Matrix(int r,int c,double value[]){\n            this->values = (double*)malloc(sizeof(double)*r*c);\n            memset(values, 0, sizeof(values)*r*c);\n            double *p = this->values;\n            this->rows = r;\n            this->columus = c;\n            for (int i = 0; i < r * c;i++){\n                *p = value[i];\n                p++;\n            }\n            \n        }\n        Matrix(const Matrix & mat){\n            this->rows = mat.rows, this->columus = mat.columus;\n            this->values = (double *)malloc(sizeof(double) * mat.rows * mat.columus);\n            double *p = this->values, *p1 = mat.values;\n            for (int i = 0; i < mat.rows * mat.columus;i++){\n                *p = *p1;\n                p1++, p++;\n            }\n        }\n        Matrix(int r, int c)\n        {\n            this->values = (double *)malloc(sizeof(double) * r * c);\n            memset(values, 0, sizeof(values) * r * c);\n            \n            this->rows = r;\n            this->columus = c;\n            \n        }\n        Matrix concatenateRows(const Matrix &mat)const{\n            int r = this->rows, c = this->columus;\n            double *p1 = this->values,*p2=mat.values;\n            double v[2 * r * c];\n            for (int i = 0; i < c * r;i++){\n                v[i] = *p1, p1++;\n            }\n            for (int j = 0; j < c * r;j++){\n                v[c * r + j] = *p2, p2++;\n            }\n            Matrix n(r * 2, c, v);\n            return n;\n        }\n        Matrix concatenateColumns(const Matrix&mat)const{\n            int r = this->rows, c = this->columus;\n            double *p1 = this->values, *p2 = mat.values;\n            double v[2 * r * c];\n            int point = 0;\n            for (int i = 0; i < r;i++){\n                for (int j = 0; j < 2 * c;j++){\n                    if(j<c){\n                        v[point++] = *(p1++);\n                    }else{\n                        v[point++] = *(p2++);\n                    }\n                }\n            }\n            Matrix n(r, c * 2, v);\n            return n;\n        } \n        void print()\n        {\n            double *p = this->values;\n            for (int i = 0; i < this->rows;i++){\n                for (int j = 0; j < this->columus;j++){\n                    cout << \"    \" << *(p++);\n                }\n                cout << endl;\n            }\n        }\n        ~Matrix(){\n           \n        }\n};",
            1588833284.6166012,
            100,
            "# 答案正确"
        ],
        [
            "2020/05/08",
            "王筝",
            "double & Tensor_get(int dimensions, const int sizes[],  double data[], int x0, int x1, int x2, int x3)\n{\n    int posi = x0;\n    if(dimensions>=2){\n        posi += x1 * sizes[0];\n    }\n    if(dimensions>=3){\n        posi += x2 * sizes[0] * sizes[1];\n    }\n    if(dimensions>=4){\n        posi += x3 * sizes[0] * sizes[1] * sizes[2];\n    }\n    return data[posi];\n}",
            1588905605.1549702,
            100,
            "# 答案正确"
        ],
        [
            "2020/05/14",
            "王筝",
            "#include <iostream>\nusing namespace std;\nvoid Tensor_print(int dimensions, const int sizes[], const double data[]){\n\t\n\tswitch (dimensions){\n\t\tcase 1:{\n\t\t\tcout << \"Tensor of \" << sizes[0] << endl;\n\t\t\tfor (int i = 0; i < sizes[0];i++)\n\t\t\t\tcout << data[i] << endl;\n\t\t\t\n\t\t\tbreak;}\n\t\tcase 2:{\n\t\t\tcout << \"Tensor of \" << sizes[0] << \"x\" << sizes[1] << endl;\n\t\t\tfor (int i = 0; i < sizes[0];i++){\n\t\t\t\tfor (int j = 0; j < sizes[1];j++)\n\t\t\t\t\tcout << \"    \" << data[i * sizes[0] + j];\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t\tbreak;\n\t\t\t}\n\t\tcase 3:{\n\t\t\tcout << \"Tensor of \" << sizes[0] << \"x\" << sizes[1] <<\"x\"<<sizes[2]<< endl;\n\t\t\tfor (int z = 0; z < sizes[0];z++){\n\t\t\t\tcout << \"data[\" << z << \"]\" << endl;\n\t\t\t\tfor (int i = 0; i < sizes[1];i++){\n\t\t\t\t\tfor (int j = 0; j < sizes[2];j++)\n\t\t\t\t\t\tcout << \"    \" << data[z * sizes[1] * sizes[2] + i * sizes[1] + j];\n\t\t\t\t\tcout << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase 4:{\n\t\t\tcout << \"Tensor of \" << sizes[0] << \"x\" << sizes[1] << \"x\" << sizes[2] << \"x\" << sizes[3] << endl;\n\t\t\tfor (int x = 0; x < sizes[0];x++)\n\t\t\t\tfor (int y = 0; y < sizes[1];y++){\n\t\t\t\t\tcout << \"data[\" << x << \"][\" << y << \"]\" << endl;\n\t\t\t\t\tfor (int i = 0; i < sizes[2];i++){\n\t\t\t\t\t\tfor (int j = 0; j < sizes[3];j++)\n\t\t\t\t\t\t\tcout << \"    \" << data[x * sizes[1] * sizes[2] * sizes[3] + y * sizes[3] * sizes[2] + i * sizes[1] + j];\n\t\t\t\t\t\tcout << endl;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn;\n}",
            1589424214.9710348,
            100,
            "# 答案正确"
        ],
        [
            "2.4 (C++)",
            "王筝",
            "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <cstring>\nusing namespace std;\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble *values;\n\tpublic:\n\t\tMatrix(int r,int c){\n\t\t\tthis->rows = r, this->columns = c;\n\t\t\tvalues = new double[r * c];\n\t\t\tmemset(values, 0, sizeof(double) * r * c);\n\t\t}\n\t\tMatrix(int r,int c,double v[]){\n\t\t\tthis->rows = r, this->columns = c;\n\t\t\tvalues = new double[r * c];\n\t\t\tdouble *p = this->values;\n\t\t\tfor (int i = 0; i < r * c;i++){\n\t\t\t\t*p = v[i];\n\t\t\t\tp++;\n\t\t\t}\n\t\t}\n\t\tvoid print(){\n\t\t\tint r = this->rows, c = this->columns;\n\t\t\tfor (int i = 0; i < r;i++){\n\t\t\t\tfor (int j = 0; j < c;j++){\n\t\t\t\t\tcout << \"    \" << values[i * r + j];\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t}\n\t\tvoid set(int row,int col,double v){\n\t\t\tthis->values[(row-1)* this->rows + col - 1] = v;\n\t\t\treturn;\n\t\t}\n\t\tMatrix&operator= (const Matrix & M){\n\t\t\tthis->rows = M.rows, this->columns = M.columns;\n\t\t\tdelete[] values;\n\t\t\tvalues = new double[M.rows * M.columns];\n\t\t\tfor (int i = 0; i < M.rows * M.columns;i++){\n\t\t\t\tvalues[i] = M.values[i];\n\t\t\t}\n\t\t\treturn (*this);\n\t\t}\n\t\t~Matrix(){\n\t\t\tdelete[] values;\n\t\t}\n};",
            1589511720.200204,
            100,
            "# 答案正确"
        ],
        [
            "2.7 (C++)",
            "王筝",
            "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <cstring>\nusing namespace std;\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble *values;\n\tpublic:\n\t\tMatrix(int r,int c){\n\t\t\tthis->rows = r, this->columns = c;\n\t\t\tvalues = new double[r * c];\n\t\t\tmemset(values, 0, sizeof(double) * r * c);\n\t\t}\n\t\tMatrix(int r,int c,double v[]){\n\t\t\tthis->rows = r, this->columns = c;\n\t\t\t\n\t\t\tvalues = new double[r * c];\n\t\t\tdouble *p = this->values;\n\t\t\tfor (int i = 0; i < r *c;i++){\n\t\t\t\t\n\t\t\t\t\t*p = v[i];\n\t\t\t\t\tp++;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tMatrix(const Matrix& M){\n\t\t\tthis->rows = M.rows, this->columns = M.columns;\n\t\t\tdelete[] values;\n\t\t\tthis->values = new double[M.rows * M.columns];\n\t\t\tthis->values = M.values;\n\t\t\t\n\t\t}\n\t\tMatrix reshape(int r,int c)const{\n\t\t\tMatrix res(r,c);\n\t\t\tint index = 0;\n\t\t\tfor (int i = 0; i < c;i++){\n\t\t\t\tfor (int j = 0; j < r;j++){\n\t\t\t\t\tdouble ling ;\n\t\t\t\t\t\n\t\t\t\t\tling = this->values[index];\n\t\t\t\t\tindex+=this->columns;\n\t\t\t\t\tif(index>=r*c){\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t\tindex -= r * c;\n\t\t\t\t\t}\n\t\t\t\t\tres.values[j*c+i] = ling;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\tvoid print(){\n\t\t\tint r = this->rows, c = this->columns;\n\t\t\tfor (int i = 0; i < r;i++){\n\t\t\t\tfor (int j = 0; j < c;j++){\n\t\t\t\t\tcout << \"    \" << values[i * c + j];\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t}\n\t\t~Matrix(){\n\t\t\tdelete[] values;\n\t\t}\n};",
            1589514215.7364347,
            100,
            "# 答案正确"
        ],
        [
            "2.8 (C++)",
            "王筝",
            "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <cstring>\nusing namespace std;\n\n\n\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble *values;\n\tpublic:\n\t\tMatrix(int r,int c){\n\t\t\tthis->rows = r, this->columns = c;\n\t\t\tvalues = new double[r * c];\n\t\t\tmemset(values, 0, sizeof(double) * r * c);\n\t\t}\n\t\tMatrix(int r,int c,double v[]){\n\t\t\tthis->rows = r, this->columns = c;\n\t\t\t\n\t\t\tvalues = new double[r * c];\n\t\t\tdouble *p = this->values;\n\t\t\tfor (int i = 0; i < r *c;i++){\n\t\t\t\t\n\t\t\t\t\t*p = v[i];\n\t\t\t\t\tp++;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tMatrix(const Matrix& M){\n\t\t\tthis->rows = M.rows, this->columns = M.columns;\n\t\t\tdelete[] values;\n\t\t\tthis->values = new double[M.rows * M.columns];\n\t\t\tthis->values = M.values;\n\t\t\t\n\t\t}\n\t\tMatrix transpose(){\n\t\t\tint r=this->columns,c=this->rows;\n\t\t\tMatrix res(r,c);\n\t\t\tint index = 0;\n\t\t\tfor (int i = 0; i < c;i++){\n\t\t\t\tfor (int j = 0; j < r;j++){\n\t\t\t\t\tdouble ling ;\n\t\t\t\t\t\n\t\t\t\t\tling = this->values[index];\n\t\t\t\t\tindex++;\n\t\t\t\t\tres.values[j*c+i] = ling;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\tvoid print(){\n\t\t\tint r = this->rows, c = this->columns;\n\t\t\tfor (int i = 0; i < r;i++){\n\t\t\t\tfor (int j = 0; j < c;j++){\n\t\t\t\t\tcout << \"    \" << values[i * c + j];\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t}\n\t\t~Matrix(){\n\t\t\tdelete[] values;\n\t\t}\n};",
            1589515238.7027404,
            100,
            "# 答案正确"
        ],
        [
            "2.10 (C++)",
            "王筝",
            "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <cstring>\nusing namespace std;\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble *values;\n\tpublic:\n\t\tMatrix(int r,int c){\n\t\t\tthis->rows = r, this->columns = c;\n\t\t\tvalues = new double[r * c];\n\t\t\tmemset(values, 0, sizeof(double) * r * c);\n\t\t}\n\t\tMatrix(int r,int c,double v[]){\n\t\t\tthis->rows = r, this->columns = c;\n\t\t\t\n\t\t\tvalues = new double[r * c];\n\t\t\tdouble *p = this->values;\n\t\t\tfor (int i = 0; i < r *c;i++){\n\t\t\t\t\n\t\t\t\t\t*p = v[i];\n\t\t\t\t\tp++;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tMatrix(const Matrix & M){\n\t\t\tthis->rows = M.rows, this->columns = M.columns;\n\t\t\tthis->values = M.values;\n\t\t}\n\t\tMatrix operator*(const Matrix &M)const\n\t\t{\n\t\t\tMatrix res(M.columns, M.columns);\n\t\t\tdouble ling=0;\n\t\t\tfor (int i = 0; i < this->rows;i++){\n\t\t\t\tfor (int j = 0; j < this->rows;j++){\n\t\t\t\t\tfor (int k = 0; k < this->columns;k++){\n\t\t\t\t\t\tling += this->values[i * this->columns + k] * M.values[k * M.columns + j];\n\n\t\t\t\t\t}\n\t\t\t\t\tres.values[i * M.columns + j]=ling;\n\t\t\t\t\tling = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\tMatrix operator*(double v)const{\n\t\t\tMatrix res(this->rows,this->columns);\n\t\t\tfor (int i = 0; i < this->rows * this->columns;i++){\n\t\t\t\tres.values[i] = this->values[i] * v;\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\tvoid print(){\n\t\t\tint r = this->rows, c = this->columns;\n\t\t\tfor (int i = 0; i < r;i++){\n\t\t\t\tfor (int j = 0; j < c;j++){\n\t\t\t\t\tcout << \"    \" << values[i * c + j];\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t}\n\t\t~Matrix(){\n\t\t\tdelete[] values;\n\t\t}\n};",
            1589517641.5805178,
            100,
            "# 答案正确"
        ],
        [
            "2.11 (C++)",
            "王筝",
            "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <cstring>\nusing namespace std;\n\n#define maxsize (int)52\n#define MAXsize 100000\n\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble *values;\n\tpublic:\n\t\tMatrix(int r,int c){\n\t\t\tthis->rows = r, this->columns = c;\n\t\t\tvalues = new double[r * c];\n\t\t\tmemset(values, 0, sizeof(double) * r * c);\n\t\t}\n\t\tMatrix(int r,int c,double v[]){\n\t\t\tthis->rows = r, this->columns = c;\n\t\t\t\n\t\t\tvalues = new double[r * c];\n\t\t\tdouble *p = this->values;\n\t\t\tfor (int i = 0; i < r *c;i++){\n\t\t\t\t\n\t\t\t\t\t*p = v[i];\n\t\t\t\t\tp++;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tMatrix(const Matrix & M){\n\t\t\tthis->rows = M.rows, this->columns = M.columns;\n\t\t\tthis->values = M.values;\n\t\t}\n\t\tMatrix max()const{\n\t\t\tMatrix res(1, this->columns);\n\t\t\tint mindex = 0;\n\t\t\tint MAX = 0;\n\t\t\tif(this->rows!=1){\n\t\t\t\tfor (int j = 0; j < this->columns;j++){\n\t\t\t\t\tfor (int i = 0; i < this->rows;i++){\n\t\t\t\t\t\tif(this->values[i*this->columns+j]>MAX){\n\t\t\t\t\t\t\tMAX = this->values[i * this->columns + j];\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tres.values[j] = MAX;\n\t\t\t\t\tMAX = 0;\n\t\t\t\t}\n\n\t\t\t\t\t\n\t\t\t}else{\n\t\t\t\tfor (int i = 0; i < this->columns;i++){\n\t\t\t\t\tif(this->values[i]>MAX){\n\t\t\t\t\t\tMAX = this->values[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tres.columns = 1;\n\t\t\t\tres.values[0] = MAX;\n\t\t\t}\n\t\t\t\n\t\t\treturn res;\n\t\t}\n\t\tMatrix min() const\n\t\t{\n\t\t\tMatrix res(1, this->columns);\n\t\t\tint mindex = 0;\n\t\t\tint MAX = 10000000;\n\t\t\tif (this->rows != 1)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->columns; j++)\n\t\t\t\t{\n\t\t\t\t\tfor (int i = 0; i < this->rows; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this->values[i * this->columns + j] < MAX)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tMAX = this->values[i * this->columns + j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tres.values[j] = MAX;\n\t\t\t\t\tMAX = MAXsize;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor (int i = 0; i < this->columns; i++)\n\t\t\t\t{\n\t\t\t\t\tif (this->values[i] < MAX)\n\t\t\t\t\t{\n\t\t\t\t\t\tMAX = this->values[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tres.columns = 1;\n\t\t\t\tres.values[0] = MAX;\n\t\t\t}\n\n\t\t\treturn res;\n\t\t}\n\t\tMatrix sum()const{\n\t\t\tdouble sum=0;\n\t\t\tMatrix res(1, this->columns);\n\t\t\tif(this->rows==1){\n\t\t\t\t\n\t\t\t\tfor (int i = 0; i < this->columns;i++){\n\t\t\t\t\tsum += this->values[i];\n\t\t\t\t}\n\t\t\t\tres.columns = 1;\n\t\t\t\tres.values[0] = sum;\n\t\t\t}else{\n\t\t\t\tfor (int j = 0; j < this->columns;j++){\n\t\t\t\t\tfor (int i = 0; i < this->rows;i++){\n\t\t\t\t\t\tsum += this->values[i * this->columns + j];\n\t\t\t\t\t}\n\t\t\t\t\tres.values[j] = sum;\n\t\t\t\t\tsum = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\tvoid print(){\n\t\t\tint r = this->rows, c = this->columns;\n\t\t\tfor (int i = 0; i < r;i++){\n\t\t\t\tfor (int j = 0; j < c;j++){\n\t\t\t\t\tcout << \"    \" << values[i * c + j];\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t}\n\t\t~Matrix(){\n\t\t\tdelete[] values;\n\t\t}\n};",
            1589519370.2801578,
            100,
            "# 答案正确"
        ],
        [
            "2.12 (C++)",
            "王筝",
            "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <cstring>\n#include <cmath>\nusing namespace std;\n\n#define maxsize (int)52\n#define MAXsize 100000\n\ndouble E(double a){\n\treturn exp(a);\n}\n\ndouble L(double a){\n\treturn log(a);\n}\n\ndouble A(double a){\n\treturn abs(a);\n}\n\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble *values;\n\tpublic:\n\t\tMatrix(int r,int c){\n\t\t\tthis->rows = r, this->columns = c;\n\t\t\tvalues = new double[r * c];\n\t\t\tmemset(values, 0, sizeof(double) * r * c);\n\t\t}\n\t\tMatrix(int r,int c,double v[]){\n\t\t\tthis->rows = r, this->columns = c;\n\t\t\t\n\t\t\tvalues = new double[r * c];\n\t\t\tdouble *p = this->values;\n\t\t\tfor (int i = 0; i < r *c;i++){\n\t\t\t\t\n\t\t\t\t\t*p = v[i];\n\t\t\t\t\tp++;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tMatrix(const Matrix & M){\n\t\t\tthis->rows = M.rows, this->columns = M.columns;\n\t\t\tthis->values = M.values;\n\t\t}\n\t\tMatrix pow(double p){\n\t\t\tMatrix res(this->rows,this->columns);\n\t\t\tfor (int i = 0; i < this->rows;i++){\n\t\t\t\tfor (int j = 0; j < this->columns;j++){\n\t\t\t\t\tdouble ling = this->values[i * this->columns + j];\n\t\t\t\t\tdouble sum = 1;\n\t\t\t\t\tfor (int k = 0; k < p;k++){\n\t\t\t\t\t\tsum *= ling;\n\t\t\t\t\t}\n\t\t\t\t\tres.values[i * this->columns + j] = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\tMatrix exp(){\n\t\t\tint r = this->rows, c = this->columns;\n\t\t\tMatrix res(r, c);\n\t\t\tfor (int i = 0; i < r;i++){\n\t\t\t\tfor (int j = 0; j < c;j++){\n\t\t\t\t\tdouble ling=this->values[i*c+j];\n\t\t\t\t\tdouble sum = E(ling);\n\t\t\t\t\tres.values[i * c + j] = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\tMatrix log(){\n\t\t\tint r = this->rows, c = this->columns;\n\t\t\tMatrix res(r, c);\n\t\t\tfor (int i = 0; i < r; i++)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < c; j++)\n\t\t\t\t{\n\t\t\t\t\tdouble ling = this->values[i * c + j];\n\t\t\t\t\tdouble sum = L(ling);\n\t\t\t\t\tres.values[i * c + j] = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\tMatrix abs(){\n\t\t\tint r = this->rows, c = this->columns;\n\t\t\tMatrix res(r, c);\n\t\t\tfor (int i = 0; i < r; i++)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < c; j++)\n\t\t\t\t{\n\t\t\t\t\tdouble ling = this->values[i * c + j];\n\t\t\t\t\tdouble sum = A(ling);\n\t\t\t\t\tres.values[i * c + j] = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\tvoid print(){\n\t\t\tint r = this->rows, c = this->columns;\n\t\t\tfor (int i = 0; i < r;i++){\n\t\t\t\tfor (int j = 0; j < c;j++){\n\t\t\t\t\tcout << \"    \" << values[i * c + j];\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t}\n\t\t~Matrix(){\n\t\t\tdelete[] values;\n\t\t}\n};",
            1589520457.2371314,
            100,
            "# 答案正确"
        ],
        [
            "2.9 (C++)",
            "王筝",
            "#include <iostream>\n\n\n\nusing namespace std;\n\nclass Matrix{\n\tprivate:\n\t\tint row;\n\t\tint columns;\n\t\tdouble *values;\n\tpublic:\n\t\tMatrix(int r,int c,double values[]){\n\t\t\tthis->row = r, this->columns = c;\n\t\t\tthis->values = new double[r * c+1];\n\t\t\tfor (int i = 0; i < r * c;i++)\n\t\t\t\tthis->values[i] = values[i];\n\t\t}\n\t\tMatrix(const Matrix & M){\n\t\t\tint r = M.row, c = M.columns;\n\t\t\tthis->row = r, this->columns = c;\n\t\t\tthis->values = new double[r * c+1];\n\t\t\tfor (int i = 0; i < r * c;i++){\n\t\t\t\tthis->values[i] = M.values[i];\n\t\t\t}\n\t\t}\n\t\tvoid print(){\n\t\t\tint r = this->row, c = this->columns;\n\t\t\tfor (int i = 0; i < r ;i++){\n\t\t\t\tfor (int j = 0; j < c;j++){\n\t\t\t\t\tcout << \"    \" << this->values[i * c + j];\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t}\n\t\tMatrix operator + (const Matrix & M){\n\t\t\tint r = M.row;\n\t\t\tint c = M.columns;\n\t\t\tdouble point[r * c+1];\n\t\t\tfor (int i = 0; i < r*c;i++){\n\t\t\t\tpoint[i] = this->values[i] + M.values[i];\n\t\t\t}\n\t\t\tMatrix res(r, c, point);\n\t\t\treturn res;\n\t\t}\n\t\tMatrix operator+(double v){\n\t\t\tint r = this->row;\n\t\t\tint c = this->columns;\n\t\t\tdouble point[r*c];\n\t\t\tfor (int i = 0; i < r * c;i++){\n\t\t\t\tpoint[i] = this->values[i] + v;\n\t\t\t}\n\t\t\tMatrix res(r, c, point);\n\t\t\t\n\t\t\treturn res;\n\t\t}\n\t\tMatrix operator-(const Matrix & M){\n\t\t\tint r = this->row, c = this->columns;\n\t\t\tdouble point[r*c];\n\t\t\tfor (int i = 0; i < r * c; i++)\n\t\t\t{\n\t\t\t\tpoint[i] = this->values[i] - M.values[i];\n\t\t\t}\n\t\t\tMatrix res(r, c, point);\n\t\t\treturn res;\n\t\t}\n\t\tMatrix operator-(double v){\n\t\t\tint r = this->row;\n\t\t\tint c = this->columns;\n\t\t\tdouble point[r*c];\n\t\t\tfor (int i = 0; i < r * c; i++)\n\t\t\t{\n\t\t\t\tpoint[i] = this->values[i] - v;\n\t\t\t}\n\t\t\tMatrix res(r, c, point);\n\t\t\t\n\t\t\treturn res;\n\t\t}\n\t\t~Matrix(){\n\t\t\tdelete[] this->values;\n\t\t}\n\t};",
            1590028445.5045176,
            100,
            "# 答案正确"
        ],
        [
            "6.1 (C++)",
            "王筝",
            "#include <iostream>\n\n#include <string>\n#include <cstring>\n#include <vector>\n\nusing namespace std;\n\ntemplate <typename T>//任意类型定义\n\nclass Matrix{\n\tprivate:\n\t\tT *values;\n\t\tint rows;\n\t\tint colunms;\n\n\tpublic:\n\t\tMatrix(int r,int c){\n\t\t\tthis->rows = r, this->colunms = c;\n\t\t\tthis->values = new T[r * c ];\n\t\t\tmemset(values, 0, sizeof(T) * r * c);\n\t\t}\n\t\tMatrix(int r,int c,const T v[]){\n\t\t\tthis->rows = r, this->colunms = c;\n\t\t\tthis->values = new T[r * c ];\n\t\t\tfor (int i = 0; i < r * c;i++){\n\t\t\t\tthis->values[i] = v[i];\n\t\t\t}\n\t\t}\n\t\tMatrix(const Matrix & M){\n\t\t\tthis->rows = M.rows, this->colunms = M.colunms;\n\t\t\tint r = M.rows, c = M.colunms;\n\t\t\tthis->values = new T[M.rows * M.colunms];\n\t\t\tfor (int i = 0; i < r*c;i++){\n\t\t\t\t\n\t\t\t\t\tthis->values[i] = M.values[i];\n\t\t\t\t\n\t\t\t}\n\t\t\t//memcpy(this->values, M.values, sizeof(T) * M.rows * M.colunms );\n\t\t}\n\t\tMatrix operator=(const Matrix &other){\n\t\t\tthis->rows = other.rows, this->colunms = other.colunms;\n\t\t\tint r = this->rows, c = this->colunms;\n\t\t\tdelete[] values;\n\t\t\tthis->values = new T[r * c];\n\t\t\tfor (int i = 0; i < r * c;i++){\n\t\t\t\tthis->values[i] = other.values[i];\n\t\t\t}\n\t\t}\n\t\tvoid print(){\n\t\t\tint r = this->rows, c = this->colunms;\n\t\t\tfor (int i = 0; i < r; i++)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < c;j++){\n\t\t\t\t\tcout << \"    \" << values[i * c + j];\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t}\n\t\tT & get(int x,int y){\n\t\t\treturn values[(x - 1) * this->colunms + y - 1];\n\t\t}\n\t\t~Matrix(){\n\t\t\tdelete[] values;\n\t\t}\n};",
            1590123682.9483984,
            100,
            "# 答案正确"
        ],
        [
            "6.3 (C++)",
            "王筝",
            "#include <iostream>\n\n#include <string>\n#include <cstring>\n#include <vector>\n\nusing namespace std;\n\n#define Max_index (int)52\n#define Max_size Max_index*Max_index\ntemplate <typename T>//任意类型定义\n\nclass Matrix{\n\tprivate:\n\t\tT *values;\n\t\tint rows;\n\t\tint colunms;\n\n\tpublic:\n\t\tMatrix(int r,int c){\n\t\t\tthis->rows = r, this->colunms = c;\n\t\t\tthis->values = new T[r * c ];\n\t\t\tmemset(values, 0, sizeof(T) * r * c);\n\t\t}\n\t\tMatrix(int r,int c,const double v[]){\n\t\t\tthis->rows = r, this->colunms = c;\n\t\t\tthis->values = new T[r * c ];\n\t\t\tfor (int i = 0; i < r * c;i++){\n\t\t\t\tthis->values[i] = v[i];\n\t\t\t}\n\t\t}\n\t\tMatrix(int r,int c,const vector<double> v){\n\t\t\tthis->rows = r, this->colunms = c;\n\t\t\tthis->values = new double[r * c];\n\t\t\tfor (int i = 0; i < r * c;i++){\n\t\t\t\tthis->values[i] = v[i];\n\t\t\t}\n\t\t}\n\t\tMatrix(const Matrix & M){\n\t\t\tthis->rows = M.rows, this->colunms = M.colunms;\n\t\t\tint r = M.rows, c = M.colunms;\n\t\t\tthis->values = new T[M.rows * M.colunms];\n\t\t\tfor (int i = 0; i < r*c;i++){\n\t\t\t\t\n\t\t\t\t\tthis->values[i] = M.values[i];\n\t\t\t\t\n\t\t\t}\n\t\t\t//memcpy(this->values, M.values, sizeof(T) * M.rows * M.colunms );\n\t\t}\n\t\tMatrix getColumn(int index){\n\t\t\tT va[Max_index];\n\t\t\tint r=this->rows,c=this->colunms;\n\t\t\tfor (int i = 0; i < r;i++){\n\t\t\t\tva[i] = this->values[i * c + index - 1];\n\t\t\t}\n\t\t\tMatrix res(r,1,va);\n\t\t\treturn res;\n\t\t}\n\t\tMatrix getRow(int index){\n\t\t\tT va[Max_index];\n\t\t\tint r = this->rows, c = this->colunms;\n\t\t\tfor (int i = 0; i < c;i++){\n\t\t\t\tva[i] = this->values[(index - 1) * c + i];\n\t\t\t}\n\t\t\tMatrix res(1, c, va);\n\t\t\treturn res;\n\t\t}\n\t\tMatrix concatenateColumns(const Matrix & M){\n\t\t\tT va[Max_index];\n\t\t\tint r = this->rows, c = this->colunms;\n\t\t\tfor (int i = 0; i < r;i++){\n\t\t\t\tfor (int j = 0; j < 2 * c;j++){\n\t\t\t\t\tif(j>=c){\n\t\t\t\t\t\tva[i * c * 2 + j] = M.values[i * c + j - c];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tva[i * c * 2 + j] = this->values[i * c + j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tMatrix res(r, c * 2, va);\n\t\t\treturn res;\n\t\t}\n\t\tMatrix concatenateRows(const Matrix & M){\n\t\t\tT v[Max_index];\n\t\t\tint r = this->rows, c = this->colunms;\n\t\t\tfor (int i = 0; i < 2 * c * r;i++){\n\t\t\t\tif(i>=c*r){\n\t\t\t\t\tv[i] = M.values[i-r*c];\n\t\t\t\t}else {\n\t\t\t\t\tv[i] = this->values[i];\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tMatrix res(r * 2, c, v);\n\t\t\treturn res;\n\t\t}\n\t\tMatrix reshape(int x,int y){\n\t\t\tT v[Max_index];\n\t\t\tint r = this->rows, c = this->colunms;\n\t\t\tint id = 0;\n\t\t\tfor (int i = 0; i < y;i++){\n\t\t\t\tfor (int j = 0; j < x;j++){\n\t\t\t\t\tv[j * y + i] = this->values[id];\n\t\t\t\t\tid = id + c;\n\t\t\t\t\tif(id>=r*c){\n\t\t\t\t\t\tid -= r * c;\n\t\t\t\t\t\tid++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tMatrix ling(x, y, v);\n\t\t\treturn ling;\n\t\t}\n\t\tMatrix transpose(){\n\t\t\tT v[Max_index];\n\t\t\tint r = this->rows, c = this->colunms;\n\t\t\tfor (int i = 0; i < r;i++){\n\t\t\t\tfor (int j = 0; j < c;j++){\n\t\t\t\t\tv[i * c + j] = this->values[j * r + i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tMatrix res(c,r,v);\n\t\t\treturn res;\n\t\t}\n\t\tMatrix operator+(const Matrix & M){\n\t\t\tT v[Max_index];\n\t\t\tint r = this->rows, c = this->colunms;\n\t\t\tfor (int i = 0; i < r * c;i++){\n\t\t\t\tv[i] = this->values[i] + M.values[i];\n\t\t\t}\n\t\t\tMatrix res(r,c,v);\n\t\t\treturn res;\n\t\t}\n\t\tMatrix operator+(const T val){\n\t\t\tT v[Max_index];\n\t\t\tint r = this->rows, c = this->colunms;\n\t\t\tfor (int i = 0; i < r * c;i++){\n\t\t\t\tv[i] = this->values[i] + val;\n\t\t\t}\n\t\t\tMatrix res(r, c, v);\n\t\t\treturn res;\n\t\t}\n\t\tMatrix operator-(const Matrix & M){\n\t\t\tT v[Max_index];\n\t\t\tint r = this->rows, c = this->colunms;\n\t\t\tfor (int i = 0; i < r * c;i++){\n\t\t\t\tv[i] = this->values[i] - M.values[i];\n\t\t\t}\n\t\t\tMatrix res(r, c, v);\n\t\t\treturn res;\n\t\t}\n\t\tMatrix operator-(const T val){\n\t\t\tT v[Max_index];\n\t\t\tint r = this->rows, c = this->colunms;\n\t\t\tfor (int i = 0; i < r * c; i++)\n\t\t\t{\n\t\t\t\tv[i] = this->values[i] - val;\n\t\t\t}\n\t\t\tMatrix res(r, c, v);\n\t\t\treturn res;\n\t\t}\n\t\tMatrix operator=(const Matrix &other){\n\t\t\tthis->rows = other.rows, this->colunms = other.colunms;\n\t\t\tint r = this->rows, c = this->colunms;\n\t\t\t\n\t\t\t\n\t\t\tfor (int i = 0; i < r * c;i++){\n\t\t\t\tthis->values[i] = other.values[i];\n\t\t\t}\n\t\t\treturn (*this);\n\t\t}\n\t\tMatrix operator*(const Matrix & M){\n\t\t\tT v[Max_index];\n\t\t\tint r = this->rows, c = this->colunms;\n\t\t\tdouble ling = 0;\n\t\t\tfor (int x = 0; x < r;x++){\n\t\t\t\tfor (int y = 0; y < r;y++){\n\t\t\t\t\tfor (int k = 0; k < c;k++){\n\t\t\t\t\t\tling += this->values[x * c + k] * M.values[k * M.colunms + y];\n\t\t\t\t\t}\n\t\t\t\t\tv[x * r + y] = ling;\n\t\t\t\t\tling = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tMatrix res(r,r,v);\n\t\t\treturn res;\n\t\t}\n\t\tMatrix operator*(const T val){\n\t\t\tT v[Max_index];\n\t\t\tint r = this->rows, c = this->colunms;\n\t\t\tfor (int i = 0; i < r * c;i++){\n\t\t\t\tv[i] = this->values[i] * val;\n\t\t\t}\n\t\t\tMatrix res(r, c, v);\n\t\t\treturn res;\n\t\t}\n\t\tMatrix max(){\n\t\t\tT v[Max_index];\n\t\t\tint r=this->rows,c=this->colunms;\n\t\t\tdouble maxn = 0;\n\t\t\tif(r!=1){\n\t\t\t\tfor (int i = 0; i < c;i++){\n\t\t\t\t\tfor (int j =0 ; j < r;j++){\n\t\t\t\t\t\tif(this->values[j*c+i]>maxn)\n\t\t\t\t\t\t\tmaxn = this->values[j * c + i];\n\t\t\t\t\t}\n\t\t\t\t\tv[i] = maxn;\n\t\t\t\t\tmaxn = 0;\n\t\t\t\t}\n\t\t\t\tMatrix res(1, c, v);\n\t\t\t\treturn res;\n\t\t\t}else{\n\t\t\t\tfor (int i = 0; i < c;i++){\n\t\t\t\t\tif(this->values[i]>maxn)\n\t\t\t\t\t\tmaxn = this->values[i];\n\t\t\t\t}\n\t\t\t\tv[0] = maxn;\n\t\t\t\tMatrix res(1, 1, v);\n\t\t\t\treturn res;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tMatrix min()\n\t\t{\n\t\t\tT v[Max_index];\n\t\t\tint r = this->rows, c = this->colunms;\n\t\t\tdouble maxn = Max_size;\n\t\t\tif (r != 1)\n\t\t\t{\n\t\t\t\tfor (int i = 0; i < c; i++)\n\t\t\t\t{\n\t\t\t\t\tfor (int j = 0; j < r; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this->values[j * c + i] < maxn)\n\t\t\t\t\t\t\tmaxn = this->values[j * c + i];\n\t\t\t\t\t}\n\t\t\t\t\tv[i] = maxn;\n\t\t\t\t\tmaxn = Max_size;\n\t\t\t\t}\n\t\t\t\tMatrix res(1, c, v);\n\t\t\t\treturn res;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor (int i = 0; i < c; i++)\n\t\t\t\t{\n\t\t\t\t\tif (this->values[i] < maxn)\n\t\t\t\t\t\tmaxn = this->values[i];\n\t\t\t\t}\n\t\t\t\tv[0] = maxn;\n\t\t\t\tMatrix res(1, 1, v);\n\t\t\t\treturn res;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tMatrix sum(){\n\t\t\tT v[Max_index];\n\t\t\tint r = this->rows, c = this->colunms;\n\t\t\tdouble sumn = 0;\n\t\t\tif(r!=1){\n\t\t\t\tfor (int j = 0; j < c;j++){\n\t\t\t\t\tfor (int i = 0; i < r;i++){\n\t\t\t\t\t\tsumn += this->values[i * c + j];\n\t\t\t\t\t}\n\t\t\t\t\tv[j] = sumn;\n\t\t\t\t\tsumn = 0;\n\t\t\t\t}\n\t\t\t\tMatrix res(1, c, v);\n\t\t\t\treturn res;\n\t\t\t}else {\n\t\t\t\tfor (int i = 0; i < c;i++){\n\t\t\t\t\tsumn += this->values[i];\n\t\t\t\t}\n\t\t\t\tv[0] = sumn;\n\t\t\t\tMatrix res(1, 1, v);\n\t\t\t\treturn res;\n\t\t\t}\n\t\t}\n\t\tvoid print(){\n\t\t\tint r = this->rows, c = this->colunms;\n\t\t\tfor (int i = 0; i < r; i++)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < c;j++){\n\t\t\t\t\tcout << \"    \" << values[i * c + j];\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t}\n\t\tT & get(int x,int y){\n\t\t\treturn values[(x - 1) * this->colunms + y - 1];\n\t\t}\n\t\t~Matrix(){\n\t\t\tdelete[] values;\n\t\t}\n};",
            1590129393.4410896,
            100,
            "# 答案正确"
        ],
        [
            "6.2 (C++)",
            "王筝",
            "#include <iostream>\n\n#include <string>\n#include <cstring>\n#include <vector>\n\nusing namespace std;\n\ntemplate <typename T>//任意类型定义\n\nclass Matrix{\n\tprivate:\n\t\tT * values;\n\t\tint rows;\n\t\tint colunms;\n\n\tpublic:\n\t\tMatrix(int r,int c){\n\t\t\tthis->rows = r, this->colunms = c;\n\t\t\tthis->values = new T[r * c ];\n\t\t\tmemset(values, 0, sizeof(T) * r * c);\n\t\t}\n\t\tMatrix(int r,int c,const double v[]){\n\t\t\tthis->rows = r, this->colunms = c;\n\t\t\tthis->values = new T[r * c ];\n\t\t\tfor (int i = 0; i < r * c;i++){\n\t\t\t\tthis->values[i] = v[i];\n\t\t\t}\n\t\t}\n\t\t\n\t\tMatrix(int r,int c,const T A){\n\t\t\tthis->rows = r, this->colunms = c;\n\t\t\tthis->values = new T[r * c];\n\t\t\tfor (int i = 0; i < r * c;i++){\n\t\t\t\tthis->values[i] = A;\n\t\t\t}\n\t\t}\n\t\tMatrix(const Matrix & M){\n\t\t\tthis->rows = M.rows, this->colunms = M.colunms;\n\t\t\tint r = M.rows, c = M.colunms;\n\t\t\tthis->values = new T[M.rows * M.colunms];\n\t\t\tfor (int i = 0; i < r*c;i++){\n\t\t\t\t\n\t\t\t\t\tthis->values[i] = M.values[i];\n\t\t\t\t\n\t\t\t}\n\t\t\t//memcpy(this->values, M.values, sizeof(T) * M.rows * M.colunms );\n\t\t}\n\t\t\n\t\tvoid print(){\n\t\t\tint r = this->rows, c = this->colunms;\n\t\t\tfor (int i = 0; i < r; i++)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < c;j++){\n\t\t\t\t\tcout << \"    \" << this->values[i * c + j];\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t}\n\t\t\n\t\t~Matrix(){\n\t\t\tdelete[] values;\n\t\t}\n};",
            1590633043.3984997,
            100,
            "# 答案正确"
        ],
        [
            "7.1 (C++)",
            "王筝",
            "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <cstring>\n#include <vector>\n#include <math.h>\nusing namespace std;\nclass Triangle : public GeometricObject \n{\nprivate:\n\tdouble side1, side2, side3;\n\t\npublic:\n\tTriangle()\n\t{\n\t\tthis->side1 = this->side2 = this->side3 = 1;\n\t\t\n\t}\n\tTriangle(double a, double b, double c)\n\t{\n\t\tthis->side1 = a;\n\t\tthis->side2 = b;\n\t\tthis->side3 = c;\n\t\t\n\t}\n\tdouble getSide1(){\n\t\treturn this->side1;\n\t}double getSide2(){\n\t\treturn this->side2;\n\t}double getSide3(){\n\t\treturn this->side3;\n\t}\n\tdouble getArea()\n\t{\n\t\tdouble a = this->side1, b = this->side2, c = this->side3;\n\t\tdouble s = (a + b + c) / 2;\n\t\tdouble res = sqrt(s * (s - a) * (s - b) * (s - c));\n\t\treturn res;\n\t}\n\tdouble getPerimeter()\n\t{\n\t\tdouble res = this->side3 + this->side2 + this->side1;\n\t\treturn res;\n\t}\n};",
            1590723033.78054,
            100,
            "# 答案正确"
        ],
        [
            "7.3 (C++)",
            "王筝",
            "template <typename A, typename R>\nvector<R> map2(const vector<A> &x, const vector<A> &y, R (*map_func)(const A &,const A &))\n{\n\tvector<R> res;\n\tfor (int i = 0; i < x.size();i++){\n\t\tres.push_back(map_func(x[i], y[i]));\n\t}\n\treturn res;\n}\n\ntemplate <typename A, typename R>\nvector<R> map2(const vector<A> &x, const int & y, R (*map_func)(const A &, const int &))\n{\n\tvector<R> res;\n\tfor (int i = 0; i < x.size(); i++)\n\t{\n\t\tres.push_back(map_func(x[i], y));\n\t}\n\treturn res;\n}\n",
            1590724332.212207,
            100,
            "# 答案正确"
        ],
        [
            "7.2 (C++)",
            "王筝",
            "#include <string>\n#include <vector>\nusing namespace std;\nvector<string> split(string line){\n\tvector<string> word;\n\tstring ling;\n\n\tint end = line.size();\n\n\tfor (int i = 0; i < end;i++){\n\t\tif(line[i] == ' ' || line[i]=='\\n'){\n\t\t\ti++;\n\t\t}else{\n\t\t\twhile (line[i] != ' ' && line[i] != '\\n' && i<end){\n\t\t\t\tling.push_back(line[i]);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tword.push_back(ling);\n\t\t\tling.clear();\n\t\t}\n\t}\n\t\treturn word;\n}",
            1591238426.3851178,
            100,
            "# 答案正确"
        ],
        [
            "8.1 (C++)",
            "王筝",
            "class Full:public Matrix {\n\tprivate:\n\t\tdouble *values;\n\t\tint row;\n\t\tint colunm;\n\n\tpublic:\n\t\tFull(int r,int c){\n\t\t\tthis->row = r, this->colunm = c;\n\t\t\tthis->values = new double[r * c];\n\t\t\tfor (int i = 0; i < r * c;i++)\n\t\t\t\tthis->values[i] = 0;\n\t\t}\n\t\tFull(int r,int c,double v[]){\n\t\t\tthis->row = r, this->colunm = c;\n\t\t\tthis->values = new double[r * c];\n\t\t\tfor (int i = 0; i < r * c;i++)\n\t\t\t\tthis->values[i] = v[i];\n\t\t}\n\t\tFull(const Matrix & M){\n\t\t\tthis->row = M.size(1), this->colunm = M.size(2);\n\t\t\tthis->values = new double[M.size(1) * M.size(2)];\n\t\t\tfor (int i = 0; i <  this->row;i++){\n\t\t\t\tfor (int j = 0; j < this->colunm;j++){\n\t\t\t\t\tthis->values[i * this->colunm + j] = M.get(i+1, j+1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//delete[] this->values;\n\t\t}\n\t\t~Full(){\n\t\t\tif(this->values != NULL){\n\t\t\t\t\n\t\t\t\tdelete[] values;\n\t\t\t\tthis->values=0;\n\t\t\t}\n\t\t}\n\t\tint size(int dimension)const{\n\t\t\tif(dimension==1)\n\t\t\t\treturn this->row;\n\t\t\telse if(dimension==2)\n\t\t\t\treturn this->colunm;\n\t\t}\n\t\tvoid set(int r,int c,double v){\n\t\t\tint index = (r-1) * this->colunm + c - 1;\n\t\t\tthis->values[index] = v;\n\t\t}\n\t\tdouble get(int r,int c)const{\n\t\t\tint index = (r-1) * this->colunm + c - 1;\n\t\t\treturn this->values[index];\n\t\t}\n\t\tvoid print()const{\n\t\t\tint r = this->row, c = this->colunm;\n\t\t\tfor (int i = 0; i < r;i++){\n\t\t\t\tfor (int j = 0; j < c;j++){\n\t\t\t\t\tcout << \"    \" << values[i * c + j];\n\t\t\t\t}\n\t\t\t\tcout << endl;\n\t\t\t}\n\t\t}\n\t\tMatrix & operator=(const Matrix & matrix2){\n\t\t\tthis->row = matrix2.size(1), this->colunm = matrix2.size(2);\n\t\t\t\n\t\t\tfor (int i = 0; i < this->row; i++)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < this->colunm; j++)\n\t\t\t\t{\n\t\t\t\t\tthis->values[i * this->colunm + j] = matrix2.get(i+1, j+1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//return (*this);\n\t\t}\n};",
            1591347897.5422912,
            100,
            "# 答案正确"
        ],
        [
            "8.3 (C++)",
            "王筝",
            "#include <iostream>\nusing namespace std;\nclass Sparse:public Matrix {\n\tprivate:\n\t\tEntry *values;\n\t\tint row;\n\t\tint colunm;\n\t\tint point;\n\n\tpublic:\n\t\tSparse(int r,int c){\n\t\t\tthis->row = r, this->colunm = c;\n\t\t\tthis->values = new Entry[10];\n\t\t\tthis->point = 0;\n\t\t}\n\t\t\n\t\t~Sparse(){\n\t\t\tif(this->values != NULL)\n\t\t\tdelete[] this->values;\n\t\t}\n\t\tint size(int dimension)const{\n\t\t\treturn this->point;\n\t\t}\n\t\tvoid set(int r,int c,double v){\n\t\t\tthis->values[this->point].row = r;\n\t\t\tthis->values[this->point].column = c;\n\t\t\tthis->values[this->point].value = v;\n\t\t\tthis->point++;\n\t\t}\n\t\tdouble get(int r,int c)const{\n\t\t\tfor (int i = 0; i < this->point;i++){\n\t\t\t\tif(r==this->values[i].row && c==this->values[i].column)\n\t\t\t\t\treturn this->values[i].value;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t\tint compare(Entry & a,Entry & b){\n\t\t\tif(a.row>b.row)\n\t\t\t\treturn 1;\n\t\t\tif(a.row==b.row && a.column>b.column)\n\t\t\t\treturn 1;\n\t\t\tif(a.row==b.row && a.column==b.column)\n\t\t\t\treturn 2;\n\t\t\treturn 0;\n\t\t}\n\t\tvoid print(){\n\t\t\tint r = this->point;\n\t\t\tEntry temp;\n\t\t\tfor (int i = 0; i < r;i++){\n\t\t\t\tfor (int j = r - 2; j >= i;j--){\n\t\t\t\t\tif(compare(this->values[j],this->values[j+1])==1){\n\t\t\t\t\t\ttemp = this->values[j];\n\t\t\t\t\t\tthis->values[j] = this->values[j + 1];\n\t\t\t\t\t\tthis->values[j + 1] = temp;\n\t\t\t\t\t}\n\t\t\t\t\telse if (compare(this->values[j], this->values[j + 1]) == 2){\n\t\t\t\t\t\tfor (int k = j + 1; j < this->point-1;j++){\n\t\t\t\t\t\t\tthis->values[k] = this->values[k + 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis->point--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\tfor (int i = 0; i < r; i++)\n\t\t\t\t{\n\t\t\t\t\tif (this->values[i].value == 0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tcout << \"(\" << this->values[i].row << \",\" << this->values[i].column << \",\" << this->values[i].value<<\")\";\n\t\t\t\t\tcout << endl;\n\t\t\t\t}\n\t\t}\n\t\tSparse operator+ (const Sparse & a){\n\t\t\tSparse result(a.row,a.colunm);\n\t\t\tfor (int i = 0; i < this->point;i++){\n\t\t\t\tresult.values[i].row = this->values[i].row;\n\t\t\t\tresult.values[i].column = this->values[i].column;\n\t\t\t\tresult.values[i].value = this->values[i].value + a.get(this->values[i].row, this->values[i].column);\n\t\t\t}\n\t\t\tfor (int i = 0; i < a.point; i++)\n\t\t\t{\n\t\t\t\tresult.values[i + this->point].row = a.values[i].row;\n\t\t\t\tresult.values[i + this->point].column = a.values[i].column;\n\t\t\t\tresult.values[i + this->point].value = this->get(result.values[i + this->point].row, result.values[i + this->point].column) + a.values[i].value;\n\t\t\t}\n\t\t\tresult.point = this->point+a.point;\n\t\t\treturn result;\n\t\t}\n};\n",
            1591332257.5566509,
            100,
            "# 答案正确"
        ],
        [
            "8.4 (C++)",
            "王筝",
            "#include <iostream>\nusing namespace std;\nclass Sparse:public Matrix {\n\tprivate:\n\t\tEntry *values;\n\t\tint row;\n\t\tint colunm;\n\t\tint point;\n\n\tpublic:\n\t\tSparse(int r,int c){\n\t\t\tthis->row = r, this->colunm = c;\n\t\t\tthis->values = new Entry[100];\n\t\t\tthis->point = 0;\n\t\t}\n\t\t\n\t\t~Sparse(){\n\t\t\tif(this->values != NULL)\n\t\t\tdelete[] this->values;\n\t\t}\n\t\tint size(int dimension)const{\n\t\t\treturn this->point;\n\t\t}\n\t\tvoid set(int r,int c,double v){\n\t\t\tthis->values[this->point].row = r;\n\t\t\tthis->values[this->point].column = c;\n\t\t\tthis->values[this->point].value = v;\n\t\t\tthis->point++;\n\t\t}\n\t\tdouble get(int r=-1,int c=-1)const{\n\t\t\tdouble sum = 0;\n\t\t\tfor (int i = 0; i < this->point;i++){\n\t\t\t\tif((r==-1 && c==this->values[i].column) || (c==-1 && r == this->values[i].row)\n\t\t\t\t|| (r==this->values[i].row && c==this->values[i].column))\n\t\t\t\t\treturn this->values[i].value;\n\t\t\t}\n\t\t\t\n\t\t\treturn sum;\n\t\t}\n\t\tint compare(Entry & a,Entry & b){\n\t\t\tif(a.row>b.row)\n\t\t\t\treturn 1;\n\t\t\tif(a.row==b.row && a.column>b.column)\n\t\t\t\treturn 1;\n\t\t\tif(a.row==b.row && a.column==b.column)\n\t\t\t\treturn 2;\n\t\t\treturn 0;\n\t\t}\n\t\tvoid print(){\n\t\t\t\n\t\t\tEntry temp;\n\t\t\tfor (int i = 0; i < this->point;i++){\n\t\t\t\tfor (int j = this->point - 2; j >= i;j--){\n\t\t\t\t\tif(compare(this->values[j],this->values[j+1])==1){\n\t\t\t\t\t\ttemp = this->values[j];\n\t\t\t\t\t\tthis->values[j] = this->values[j + 1];\n\t\t\t\t\t\tthis->values[j + 1] = temp;\n\t\t\t\t\t}\n\t\t\t\t\telse if (compare(this->values[j], this->values[j + 1]) == 2){\n\t\t\t\t\t\tthis->values[j].value += this->values[j + 1].value;\n\t\t\t\t\t\tfor (int k = j + 1; k < this->point;k++){\n\t\t\t\t\t\t\tthis->values[k] = this->values[k + 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis->point--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\tfor (int i = 0; i < this->point; i++)\n\t\t\t\t{\n\t\t\t\t\t/*if(i==r-2)\n\t\t\t\t\t\tcontinue;*/\n\t\t\t\t\tcout << \"(\" << this->values[i].row << \",\" << this->values[i].column << \",\" << this->values[i].value<<\")\";\n\t\t\t\t\tcout << endl;\n\t\t\t\t}\n\t\t}\n\t\tSparse operator* (const Sparse & a){\n\t\t\tSparse result(a.row,a.colunm);\n\t\t\tfor (int i = 0; i < this->point;i++){\n\t\t\t\tfor (int j = 0; j < a.point;j++){\n\t\t\t\t\tif(this->values[i].column==a.values[j].row){\n\t\t\t\t\t\tresult.values[result.point].row = this->values[i].row;\n\t\t\t\t\t\tresult.values[result.point].column = a.values[j].column;\n\t\t\t\t\t\tresult.values[result.point].value = this->values[i].value * a.values[j].value;\n\t\t\t\t\t\tresult.point++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\treturn result;\n\t\t}\n};\n\n",
            1591338354.5703244,
            100,
            "# 答案正确"
        ],
        [
            "8.5 (C++)",
            "王筝",
            "class Point3D:public Point2D{\n\tprivate:\n\t\tdouble z;\n\tpublic:\n\t\tPoint3D(double x,double y,double z){\n\t\t\tsetX(x);\n\t\t\tsetY(y);\n\t\t\tthis->z = z;\n\t\t}\n\t\t\n\t\tvirtual double getZ(){\n\t\t\treturn this->z;\n\t\t}\n\t\t double distance(Point2D & a){\n\t\t\tPoint3D& p = dynamic_cast<Point3D&> (a);\n\t\t\tdouble dx = this->getX() - a.getX();\n\t\t\tdouble dy = this->getY() - a.getY();\n\t\t\tdouble dz = z - p.getZ();\n\t\t\treturn sqrt(dx * dx + dy * dy + dz * dz);\n\t\t}\n};\n",
            1591846615.7516046,
            100,
            "# 答案正确"
        ],
        [
            "8.6 (C++)",
            "王筝",
            "#include <iostream>\nusing namespace std;\nclass MyTensor:public Tensor<double>{\n\tprivate :\n\t\tvector<double> temp;\n\tpublic:\n\t\tMyTensor(vector<int> indexes):Tensor(indexes){\n\t\t\tint num = 1;\n\t\t\tfor (int i = 0; i < indexes.size();i++){\n\t\t\t\tnum *= indexes[i];\n\t\t\t}\n\t\t\ttemp.resize(num);\n\t\t}\n\t\t~MyTensor(){};\n\t\tdouble & get(const vector<int> & indexes){\n\t\t\tint a = 0;\n\t\t\tfor (int i = 0; i < indexes.size();i++){\n\t\t\t\tif(i==indexes.size()-1){\n\t\t\t\t\ta += indexes[i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tint temp = indexes[i];\n\t\t\t\tfor (int j = i + 1; j < indexes.size();j++){\n\t\t\t\t\ttemp *= sizes[j];\n\t\t\t\t}\n\t\t\t\ta += temp;\n\t\t\t}\n\t\t\treturn temp[a];\n\t\t}\n};",
            1592449564.6887112,
            100,
            "# 答案正确"
        ],
        [
            "9.1 (C++)",
            "王筝",
            "class Circle{\n\tprivate:\n\t\tdouble value;\n\tpublic:\n\t\tCircle(double v){\n\t\t\tthis->value = v;\n\t\t}\n\t\tint operator<=(Circle & other){\n\t\t\tdouble a = this->value;\n\t\t\tif(a < other.value || a==other.value){\n\t\t\t\treturn 1;\n\t\t\t}else\n\t\t\t\treturn 0;\n\t\t}\n\t\tint operator<(Circle & o){\n\t\t\tdouble a = this->value;\n\t\t\tif(a < o.value)\n\t\t\t\treturn 1;\n\t\t\treturn 0;\n\t\t}\n\t\tint operator==(Circle & o){\n\t\t\tif(this->value==o.value)\n\t\t\t\treturn 1;\n\t\t\treturn 0;\n\t\t}\n\t\tint operator!=(Circle & o){\n\t\t\tif(*this == o)\n\t\t\t\treturn 0;\n\t\t\treturn 1;\n\t\t}\n\t\tint operator>=(Circle & o){\n\t\t\tif(this->value<o.value)\n\t\t\t\treturn 0;\n\t\t\treturn 1;\n\t\t}\n\t\tint operator>(Circle & o){\n\t\t\tif(this->value>o.value)\n\t\t\t\treturn 1;\n\t\t\treturn 0;\n\t\t}\n};",
            1592532747.6811485,
            100,
            "# 答案正确"
        ],
        [
            "9.2 (C++)",
            "王筝",
            "class I{\n\tprivate:\n\t\tvector<int> sizes;\n\n\tpublic:\n\t\t\n\t\tI(int a,int b=-1,int c=-1,int d=-1){\n\t\t\tsizes.push_back(a);\n\t\t\tif(b!=-1)\n\t\t\t\tsizes.push_back(b);\n\t\t\tif(c!=-1)\n\t\t\t\tsizes.push_back(c);\n\t\t\tif(d!=-1)\n\t\t\t\tsizes.push_back(d);\n\t\t}\n\t\t\n\t\toperator vector<int>() const{\n\t\t\treturn this->sizes;\n\t\t}\n\n};",
            1592533809.3780768,
            100,
            "# 答案正确"
        ],
        [
            "9.3 (C++)",
            "王筝",
            "class Complex{\n\tprivate:\n\t\tdouble reals;\n\t\tdouble image;\n\tpublic:\n\t\tComplex(double a,double b){\n\t\t\tthis->reals = a;\n\t\t\tthis->image = b;\n\t\t}\n\t\tdouble real(){\n\t\t\treturn this->reals;\n\t\t}\n\t\tdouble imag(){\n\t\t\treturn this->image;\n\t\t}\n\t\tComplex operator+ (Complex & o){\n\t\t\tdouble a = this->reals + o.reals;\n\t\t\tdouble b = this->image + o.image;\n\t\t\tComplex sum(a, b);\n\t\t\treturn sum;\n\t\t}\n\t\tComplex operator-(Complex &o)\n\t\t{\n\t\t\tdouble a = this->reals - o.reals;\n\t\t\tdouble b = this->image - o.image;\n\t\t\tComplex sum(a, b);\n\t\t\treturn sum;\n\t\t}\n\t\tComplex operator*(Complex &o)\n\t\t{\n\t\t\tdouble a = this->reals * o.reals - this->image * o.image;\n\t\t\tdouble b = this->image * o.reals + this->reals * o.image;\n\t\t\tComplex sum(a, b);\n\t\t\treturn sum;\n\t\t}\n\t\tComplex operator/ (Complex &o)\n\t\t{\n\t\t\tdouble r = this->reals, i = this->image;\n\t\t\tdouble a = (r * o.reals + i * o.image) / (o.reals * o.reals + o.image * o.image);\n\t\t\tdouble b = (i * o.reals - r * o.image) / (o.reals * o.reals + o.image * o.image);\n\t\t\tComplex sum(a, b);\n\t\t\treturn sum;\n\t\t}\n\t\tComplex operator-(double o)\n\t\t{\n\t\t\tdouble a = this->reals - o;\n\t\t\tdouble b = this->image;\n\t\t\tComplex sum(a, b);\n\t\t\treturn sum;\n\t\t}\n\t\t\n\t\tComplex & operator+=(Complex &o)\n\t\t{\n\t\t\tthis->reals = this->reals + o.reals;\n\t\t\tthis->image = this->image + o.image;\n\t\t\treturn (*this);\n\t\t}\n\t\tComplex & operator-=(Complex &o)\n\t\t{\n\t\t\tthis->reals = this->reals - o.reals;\n\t\t\tthis->image = this->image - o.image;\n\t\t\treturn (*this);\n\t\t}\n\t\tComplex & operator*=(Complex &o)\n\t\t{\n\t\t\tdouble r = this->reals, i = this->image;\n\t\t\tthis->reals = r * o.reals - i * o.image;\n\t\t\tthis->image = i * o.reals + r * o.image;\n\t\t\treturn (*this);\n\t\t}\n\t\tComplex & operator/=(Complex & o){\n\t\t\tdouble r = this->reals, i = this->image;\n\t\t\tthis->reals = (r * o.reals + i * o.image) / (o.reals * o.reals + o.image * o.image);\n\t\t\tthis->image = (i * o.reals - r * o.image) / (o.reals * o.reals + o.image * o.image);\n\t\t\treturn *this;\n\t\t}\n\t\t\n};\n\nComplex operator+(double o, Complex &oth)\n{\n\tdouble a = oth.real() + o;\n\tdouble b = oth.imag();\n\tComplex sum(a, b);\n\treturn sum;\n}\nint operator==(Complex &a,Complex &b){\n\tif(a.real()==b.real() && a.imag()==b.imag())\n\t\treturn 1;\n\treturn 0;\n}\nint operator!=(Complex &a,Complex &b){\n\tif(a==b)\n\t\treturn 0;\n\treturn 1;\n}",
            1592538412.462282,
            100,
            "# 答案正确"
        ],
        [
            "9.4 (C++)",
            "王筝",
            "class Complex{\n\tprivate:\n\t\tdouble reals;\n\t\tdouble image;\n\tpublic:\n\t\tComplex(double a,double b){\n\t\t\tthis->reals = a;\n\t\t\tthis->image = b;\n\t\t}\n\t\tComplex (){\n\t\t\tthis->image = this->reals = 0;\n\t\t}\n\t\tdouble set_real(double a){\n\t\t\t this->reals=a;\n\t\t}\n\t\tdouble set_imag(double a){\n\t\t\tthis->image=a;\n\t\t}\n\t\tdouble getv(int n){\n\t\t\tif(n==0)\n\t\t\t\treturn this->reals;\n\t\t\treturn this->image;\n\t\t}\n\t\tComplex operator+(Complex & o){\n\t\t\tdouble r = this->reals + o.reals;\n\t\t\tdouble i = this->image + o.image;\n\t\t\tComplex sum(r, i);\n\t\t\treturn sum;\n\t\t}\n\t\tComplex operator-(Complex & o){\n\t\t\tdouble r = this->reals - o.reals;\n\t\t\tdouble i = this->image - o.image;\n\t\t\tComplex sum(r, i);\n\t\t\treturn sum;\n\t\t}\n};\n\nistream & operator >> (istream &in,Complex & o){\n\tdouble r, c;\n\tin >> r >> c;\n\to.set_real(r);\n\to.set_imag(c);\n\treturn in;\n}\nostream & operator << (ostream&out,Complex & o){\n\tout << o.getv(0) << \" + \" << o.getv(1) << \" i\" ;\n}",
            1592539704.078145,
            100,
            "# 答案正确"
        ],
        [
            "9.5 (C++)",
            "王筝",
            "class Complex{\n\tprivate:\n\t\tdouble reals;\n\t\tdouble image;\n\tpublic:\n\t\tComplex(double a,double b){\n\t\t\tthis->reals = a;\n\t\t\tthis->image = b;\n\t\t}\n\t\tComplex (){\n\t\t\tthis->image = this->reals = 0;\n\t\t}\n\t\tComplex(Complex & o){\n\t\t\tthis->reals = o.reals;\n\t\t\tthis->image = o.image;\n\t\t}\n\t\tvoid set_real(double a){\n\t\t\t this->reals=a;\n\t\t}\n\t\tvoid set_imag(double a){\n\t\t\tthis->image=a;\n\t\t}\n\t\tdouble getv(int n)const{\n\t\t\tif(n==0)\n\t\t\t\treturn this->reals;\n\t\t\telse if(n==1)\n\t\t\t\treturn this->image;\n\t\t}\n\t\toperator double() \n\t\t{\n\t\t\treturn this->reals;\n\t\t}\n\t\tComplex operator ++(int){\n\t\t\tComplex res(*this);\n\t\t\t\n\t\t\tthis->reals++;\n\t\t\treturn res;\n\t\t}\n\t\tComplex & operator ++(){\n\t\t\tthis->reals++;\n\t\t\treturn *this;\n\t\t}\n\t\t\n};\n\nistream & operator >> (istream &in,Complex & o){\n\tdouble r, c;\n\tin >> r >> c;\n\to.set_real(r);\n\to.set_imag(c);\n\treturn in;\n}\nostream & operator << (ostream & out,const Complex & o){\n\tout << o.getv(0) << \" + \" << o.getv(1) << \" i\" ;\n}",
            1592543065.4940877,
            100,
            "# 答案正确"
        ],
        [
            "9.6 (C++)",
            "王筝",
            "class Tensor{\n\tprivate:\n\t\tint sizes[4];\n\t\tdouble *data;\n\t\tint numl;\n\n\tpublic:\n\t\tTensor(int a,int b=-1,int c=-1,int d=-1){\n\t\t\tint count = 1;\n\t\t\tint sum=a;\n\t\t\tthis->sizes[1] = a;\n\t\t\tif(b!= -1){\n\t\t\t\tcount++;\n\t\t\t\tthis->sizes[2] = b;\n\t\t\t\tsum *= b;\n\t\t\t}if(c!=-1){\n\t\t\t\tcount++;\n\t\t\t\tthis->sizes[3] = c;\n\t\t\t\tsum *= c;\n\t\t\t}if(d!=-1){\n\t\t\t\tcount++;\n\t\t\t\tthis->sizes[count] = d;\n\t\t\t\tsum *= d;\n\t\t\t}\n\t\t\tthis->numl = count;\n\t\t\tdata = new double[sum];\n\t\t}\n\t\t~Tensor(){\n\t\t\tdelete[] data;\n\t\t}\n\t\tdouble & operator()(int a,int b=-1,int c=-1,int d=-1){\n\t\t\tint index = a;\n\t\t\tif(b!=-1){\n\t\t\t\tindex += b * this->sizes[1];\n\t\t\t}\n\t\t\tif(c!=-1){\n\t\t\t\tindex += c * this->sizes[1] * this->sizes[2];\n\t\t\t}if(d!=-1){\n\t\t\t\tindex += d * this->sizes[1] * this->sizes[2] * this->sizes[3];\n\t\t\t}\n\t\t\treturn data[index];\n\t\t}\n};",
            1592548658.2693524,
            100,
            "# 答案正确"
        ],
        [
            "9.7 (C++)",
            "王筝",
            "class Tensor{\n\tprivate:\n\t\tint sizes[5];\n\t\tdouble *data;\n\t\tint numl;\n\n\tpublic:\n\t\tTensor(int a,int b=-1,int c=-1,int d=-1){\n\t\t\tint count = 1;\n\t\t\tint sum=a;\n\t\t\tfor (int i = 0; i <= 4;i++)\n\t\t\t\tsizes[i] = 0;\n\t\t\tthis->sizes[1] = a;\n\t\t\tif(b!= -1){\n\t\t\t\tcount++;\n\t\t\t\tthis->sizes[2] = b;\n\t\t\t\tsum *= b;\n\t\t\t}if(c!=-1){\n\t\t\t\tcount++;\n\t\t\t\tthis->sizes[3] = c;\n\t\t\t\tsum *= c;\n\t\t\t}if(d!=-1){\n\t\t\t\tcount++;\n\t\t\t\tthis->sizes[count] = d;\n\t\t\t\tsum *= d;\n\t\t\t}\n\t\t\tthis->numl = count;\n\t\t\tdata = new double[sum];\n\t\t}\n\t\tint get(int n){\n\t\t\t\n\t\t\treturn this->sizes[n];\n\t\t}\n\t\tvoid set_value(double va[]){\n\t\t\tint max = 1;\n\t\t\tfor (int i = 0; i < numl;i++)\n\t\t\t\tmax *= sizes[i + 1];\n\t\t\tfor (int i = 0; i < max;i++)\n\t\t\t\tthis->data[i] = va[i];\n\t\t}\n\t\tint get_numl(){\n\t\t\treturn this->numl;\n\t\t}\n\t\tvoid set_numl(int a){\n\t\t\tthis->numl = a;\n\t\t}\n\t\tvoid resize(int a, int b = -1, int c = -1, int d = -1){\n\t\t\t\n\t\t\tint max = a;\n\t\t\tfor (int i = 0; i <= 4; i++)\n\t\t\t\tsizes[i] = 0;\n\t\t\tthis->sizes[1] = a;\n\t\t\tif (b != -1)\n\t\t\t{\n\t\t\t\tthis->sizes[2] = b;\n\t\t\t\tmax *= b;\n\t\t\t}\n\t\t\tif (c != -1)\n\t\t\t{\n\t\t\t\tthis->sizes[3]=c;\n\t\t\t\tmax *= c;\n\t\t\t}\n\t\t\tif (d != -1)\n\t\t\t{\n\t\t\t\tthis->sizes[4]=d;\n\t\t\t\tmax *= d;\n\t\t\t}\n\t\t\tdata = new double[max];\n\t\t}\n\t\tTensor() {}\n\t\t~Tensor(){\n\t\t\tdelete[] data;\n\t\t}\n\t\tdouble & get_v(int index){\n\t\t\treturn data[index];\n\t\t}\n};\n\nistream & operator>>(istream & in,Tensor & o){\n\tdouble arr[5];\n\tdouble v[1000];\n\tint numl;\n\tin >> numl;\n\to.set_numl(numl);\n\tfor (int i = 0; i <= 4;i++)\n\t\tarr[i] = 1;\n\tint max = 1;\n\tfor (int i = 0; i < numl;i++){\n\t\tin >> arr[i + 1];\n\t\tmax *= arr[i + 1];\n\t}\n\to.resize(arr[1], arr[2], arr[3], arr[4]);\n\t\n\tfor (int i = 0; i < max;i++)\n\t\tin >> v[i];\n\to.set_value(v);\n\treturn in;\n}\nostream & operator <<(ostream &out,Tensor &o){\n\tint numl = o.get_numl();\n\tout << numl << endl;\n\tfor (int i = 1; i <= numl;i++)\n\t\tout << o.get(i) << \" \";\n\t\n\tout << endl;\n\tout<<endl;\n\tswitch (numl)\n\t{\n\tcase 2:\n\t\tfor (int a = 0; a < o.get(1); a++)\n\t\t{\n\t\t\tfor (int b = 0; b < o.get(2); b++)\n\t\t\t{\n\t\t\t\tout << o.get_v(a * o.get(2) + b) << \" \";\n\t\t\t}\n\t\t\tout << endl;\n\t\t}\n\t\tbreak;\n\tcase 3:\n\t\tfor (int a = 0; a < o.get(1); a++)\n\t\t{\n\t\t\tfor (int b = 0; b < o.get(2); b++)\n\t\t\t{\n\t\t\t\tfor (int c = 0; c < o.get(3); c++)\n\t\t\t\t{\n\t\t\t\t\tout << o.get_v(a * o.get(3) * o.get(2) + b * o.get(3) + c) << \" \";\n\t\t\t\t}\n\t\t\t\tout << endl;\n\t\t\t}\n\t\t\tout << endl;\n\t\t}\n\t\tbreak;\n\tcase 4:\n\t\tfor (int a = 0; a < o.get(1); a++)\n\t\t{\n\t\t\tfor (int b = 0; b < o.get(2); b++)\n\t\t\t{\n\t\t\t\tfor (int c = 0; c < o.get(3); c++)\n\t\t\t\t{\n\t\t\t\t\tfor (int d = 0; d < o.get(4); d++)\n\t\t\t\t\t{\n\t\t\t\t\t\tout << o.get_v(a * o.get(4) * o.get(2) * o.get(3) + b * o.get(4) * o.get(3) + c * o.get(4) + d) << \" \";\n\t\t\t\t\t}\n\t\t\t\t\tout << endl;\n\t\t\t\t}\n\t\t\t\tout << endl;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\tout << endl;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\t\n\treturn out;\n}",
            1592556800.2463887,
            100,
            "# 答案正确"
        ],
        [
            "10.1 (C++)",
            "王筝",
            "#include <iostream>\n#include <exception>\nclass MatrixSizesDoNotMatchException{\n};\n\ndouble Matrix::get(int r, int c) const\n{\n\tif (r > this->size(1) || c > this->size(2)){\n\t\tout_of_range error(\"A\");\n\t\tthrow error;\n\t}\n\t\t\n\tint size1 = size(2);\n\treturn elements[r * size1 + c];\n}\n\nvoid Matrix:: set(int r,int c,double v){\n\tint sizes1 = this->size(1), sizes2 = this->size(2);\n\tif(r>sizes1 || c > sizes2){\n\t\tout_of_range error(\"A\");\n\t\tthrow error;\n\t}\n\telse{\n\t\tint index = r * sizes2 + c;\n\t\tthis->elements[index] = v;\n\t}\n}\n\nMatrix Matrix::operator+(const Matrix & M)const{\n\tif(this->size(1) != M.size(1) || this->size(2) != M.size(2)){\n\t\tMatrixSizesDoNotMatchException error;\n\t\tthrow error;\n\t}\n\telse{\n\t\tMatrix result(M.size(1), M.size(2));\n\t\tfor (int i = 1; i <= M.size(1);i++){\n\t\t\tfor (int j = 1; j <= M.size(2);j++){\n\t\t\t\tresult.set(i, j, M.get(i, j) + this->get(i, j));\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}",
            1593317906.4774182,
            100,
            "# 答案正确"
        ],
        [
            "10.2 (C++)",
            "王筝",
            "catch (NonPositiveValueException & ex){\n\t\t\tcout << \"caught: NonPositiveValueException\" << endl;\n\t\t}catch(out_of_range & ex){\n\t\t\tcout << \"caught: out_of_range\" << endl;\n\t\t}",
            1593655705.4582124,
            100,
            "# 答案正确"
        ],
        [
            "15.1 (C++)",
            "王筝",
            "#include <string>\n#include <vector>\nusing namespace std;\nstring tostr(vector<string> value)\n{\n\tstring tmp;\n\tstring result;\n\tresult.push_back('\\t');\n\tresult.push_back('\\t');\n\tresult.push_back('[');\n\tfor (int i = 0; i < value.size(); i++)\n\t{\n\t\ttmp = value[i];\n\t\tresult.push_back('\\'');\n\t\tfor (int j = 0; j < tmp.size(); j++)\n\t\t\tresult.push_back(tmp[j]);\n\t\tresult.push_back('\\'');\n\t\tresult.push_back(',');\n\t}\n\tresult.insert(result.size(), \"],\\n\");\n\treturn result;\n}\n\nclass Table{\n\t\n\tvector<string> head;\n\tvector<vector<string>> value;\n\npublic:\n\t//friend ostream &operator<<(ostream &out, const Table &table);\n\tvoid addCol(string str){\n\t\thead.push_back(str);\n\t};\n\tTable(){\n\t\thead.resize(0);\n\t\tvalue.resize(0);\n\t}\n\tstring json()const\n\t{\n\t\tstring result;\n\t\tresult = \"{\\n\\theaders: [\";\n\t\tstring tmp;\n\t\tfor (int i = 0; i < head.size();i++){\n\t\t\ttmp = head[i];\n\t\t\tresult.push_back('\\'');\n\t\t\tfor (int j = 0; j < tmp.size();j++)\n\t\t\t\tresult.push_back(tmp[j]);\n\t\t\tresult.push_back('\\'');\n\t\t\t\n\t\t\tresult.push_back(',');\n\t\t}\n\t\tresult.insert(result.size(), \"],\\n\\trows: [\\n\");\n\t\tfor (int i = 0; i < value.size();i++)\n\t\t\tresult.insert(result.size(), tostr(value[i]));\n\n\t\tresult.insert(result.size(), \"\\t],\\n}\");\n\n\t\treturn result;\n\t}\n\tvector<string> & operator[](int index){\n\t\t\n\t\tif(index < value.size()){\n\t\t\t\n\t\t}else{\n\t\t\tvalue.resize(index+1);\n\t\t\t\n\t\t}\n\t\treturn value[index];\n\t}\n};",
            1593750586.2939363,
            100,
            "# 答案正确"
        ],
        [
            "2020-07-09 LAB",
            "王筝",
            "#include <iostream>\n\nusing namespace std;\n\nclass Integer{\n\tstatic int id;\n\t\n\nprivate:\n\tint index;\n\npublic:\n\tvoid static increase_all(int v)\n\t{\n\t\tid += v;\n\t}\n\tvoid static increase_all(Integer & v)\n\t{\n\t\tint ling = v.getnum();\n\t\tid += ling;\n\t}\n\tstatic int get() { return id; }\n\tInteger(){\n\t\tthis->index = 0;\n\t\t\n\t}\n\tInteger(int v){\n\t\tthis->index = v;\n\t\t\n\t}\n\tvoid set_index(int v){\n\t\tthis->index = v;\n\t}\n\tint getnum()const {\n\t\treturn this->index + this->get();\n\t}\n};\nistream &operator>>(istream &in, Integer &o)\n{\n\tint ling;\n\tin >> ling;\n\to.set_index(ling);\n\treturn in;\n}\nostream &operator<<(ostream &out,const Integer &o){\n\tout << o.getnum();\n\treturn out;\n}\nint Integer::id = 0;\n",
            1594263867.1949308,
            100,
            "# 答案正确"
        ],
        [
            "A.1 (C++)",
            "王筝",
            "LinkedList(const LinkedList &o) : _size(0), head(0), tail(0) { addAll(o);\n\t\t\n\t}\n\n\tLinkedList & operator= (const LinkedList & o){\n\t\tclear();\n\t\taddAll(o);\n\t}\n\t~LinkedList() { clear(); }\n\tvoid clear(){\n\t\twhile(_size > 0)\n\t\t\tremoveFirst();\n\t}\n\tvoid addAll(const LinkedList & o){\n\t\tNode<E> *temp = o.head;\n\t\tNode<E> *prev = 0;\n\t\tNode<E> *next = temp->next_node(prev);\n\t\tfor (int i = 0; i < o._size-1;i++){\n\t\t\tadd( i, temp->element);\n\t\t\tprev = temp;\n\t\t\ttemp = next;\n\t\t\tnext = next->next_node(prev);\n\t\t}\n\t\tadd(o._size, temp->element);\n\t}\n\tvoid print(const LinkedList &o)\n\t{\n\t\tNode<E> *temp = o.head;\n\t\tNode<E> *prev = 0;\n\t\tNode<E> *next = temp->next_node(prev);\n\t\tfor (int i = 0; i < o._size-1;i++){\n\t\t\tcout << temp->element << \" \";\n\t\t\tprev = temp;\n\t\t\ttemp = next;\n\t\t\tnext = next->next_node(prev);\n\t\t}\n\t\tcout <<temp->element<< endl;\n\t}\n\t\n\tvoid add(int index,const E o){\n\t\tNode<E> *node = new Node<E>();\n\t\tnode->element = o;\n\t\tif(this->head == 0){\n\t\t\tthis->head = node;\n\t\t\tthis->tail = this->head;\n\t\t}else if(index==0 && this->head != 0){\n\t\t\thead->update_prev_node(0, node);\n\t\t\tnode->update_next_node(0, head);\n\t\t\thead = node;\n\t\t}else if(index=this->_size){\n\t\t\tNode<E> *temp = this->tail;\n\t\t\tNode<E> *next = 0;\n\t\t\tnext = node;\n\t\t\tnode->update_prev_node(0, temp);\n\t\t\ttemp->update_next_node(0, next);\n\t\t\ttail = node;\n\t\t}\n\t\t++_size;\n\t}\n\tvoid remove(int index){\n\t\t\n\t\tif(index==0){\n\t\t\tNode<E> *temp = this->head;\n\t\t\tNode<E> *next = temp->next_node(0);\n\t\t\tNode<E> *prev = 0;\n\t\t\tif(next!=0){\n\t\t\tnext->update_prev_node(head,0);}\n\t\t\thead = next;\n\t\t\tdelete temp;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tNode<E> *temp = this->tail;\n\t\t\tNode<E> *prev = temp->prev_node(0);\n\t\t\tthis->tail = prev;\n\t\t\tprev->update_next_node(temp, 0);\n\t\t\tdelete temp;\n\t\t}\n\t\tthis->_size--;\n\t}\n\tvoid addFirst(E val){\n\t\tadd(0, val);\n\t}\n\tvoid addLast(E val){\n\t\tadd(_size, val);\n\t}\n\tvoid removeFirstOccurrence(int val){\n\t\tNode<E> *temp = this->head;\n\t\tNode<E> *next = temp->next_node(0);\n\t\tNode<E> *prev = 0;\n\t\tif(this->tail->element == val){\n\t\t\tremoveLast();\n\t\t\treturn;\n\t\t}else if(this->head->element==val){\n\t\t\tremoveFirst();\n\t\t\treturn;\n\t\t}\n\t\tfor (int i = 0; i < this->_size-1;i++){\n\t\t\tprev = temp, temp = next;\n\t\t\tnext = temp->next_node(prev);\n\t\t\tif (temp->element == val)\n\t\t\t\tbreak;\n\t\t}\n\t\tprev->update_next_node(temp, next);\n\t\tnext->update_prev_node(temp, prev);\n\t\tdelete temp;\n\t\tthis->_size--;\n\t}\n\tint get(int index){\n\t\tNode<E> *temp = this->head;\n\t\tNode<E> *prev = 0;\n\t\tNode<E> *next = temp->next_node(prev);\n\t\tif(index==this->_size-1)\n\t\t\treturn this->tail->element;\n\t\telse if(index==0){\n\t\t\treturn temp->element;\n\t\t}\n\t\treturn temp->element;\n\t}\n\tvoid removeLast() { remove(this->_size);\n\t\t\n\t}\n\tvoid removeFirst() { remove(0);\n\t\t\n\t}",
            1594361397.5702045,
            100,
            "# 答案正确"
        ],
        [
            "A.2 (C++)",
            "王筝",
            "template <typename E>\nvoid LinkedList<E>::removeAll(const E &val)\n{\n\ttry{\n\t\twhile(1)\n\t\t\tremoveFirstOccurrence(val);\n\t}catch(NotSuchElementException & o){\n\t\treturn;\n\t}\n}",
            1594865907.3693511,
            100,
            "# 答案正确"
        ],
        [
            "A.4 (C++)",
            "王筝",
            "#include <iostream>\n#include <sstream>\n#include <string>\nusing namespace std;\n\t\tclass Tuple\n\t\t{\n\t\tpublic:\n\t\t\tint key;\n\t\t\tint val;\n\t\t\tTuple() {}\n\t\t\tTuple(int k, int v)\n\t\t\t{\n\t\t\t\tkey = k;\n\t\t\t\tval = v;\n\t\t\t}\n\t\t\toperator int(){\n\t\t\t\treturn this->val;\n\t\t\t}\n\t\t\toperator string(){\n\t\t\t\tstring result;\n\t\t\t\tstringstream ss;\n\t\t\t\tss << this->val;\n\t\t\t\tss >> result;\n\t\t\t\treturn result;\n\t\t\t}\n\t\t};\nclass HT{\n\tprivate:\n\t\tTuple dict[10];\n\t\tint _size;\n\tpublic:\n\t\tHT(): _size(0) {}\n\t\t~HT(){}\n\t\ttemplate<typename K,typename V>\n\t\tvoid put(K key,V val){\n\t\t\tint ke;\n\t\t\tint va;\n\t\t\tke = str_to_int(key);\n\t\t\tva = str_to_int(val);\n\t\t\tTuple ling(ke, va);\n\t\t\tdict[this->_size] = ling;\n\t\t\tthis->_size++;\n\t\t}\n\t\tint size(){\n\t\t\treturn this->_size;\n\t\t}\n\t\tint str_to_int(int str) { return str; }\n\t\tint str_to_int(string str){\n\t\t\tstringstream ss;\n\t\t\tss << str;\n\t\t\tint res;\n\t\t\tss >> res;\n\t\t\treturn res;\n\t\t}\n\t\tstring int_to_str(string v) { return v; }\n\t\tstring int_to_str(int v){\n\t\t\tstring result;\n\t\t\tstringstream ss;\n\t\t\tss << v;\n\t\t\tss >> result;\n\t\t\treturn result;\n\t\t}\n\t\ttemplate < typename V>\n\t\tTuple operator[](const V &index)\n\t\t{\n\t\t\tint ling;\n\t\t\tling = str_to_int(index);\n\t\t\tfor (int i = 0; i <= 10;i++){\n\t\t\t\tif(dict[i].key == ling){\n\t\t\t\t\treturn dict[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};",
            1595568988.0280664,
            100,
            "# 答案正确"
        ],
        [
            "A.5 (C++)",
            "王筝",
            "#include <iostream>\n#include <sstream>\n#include <string>\n\nusing namespace std;\n\n\n\t\tclass Tuple\n\t\t{\n\t\tpublic:\n\t\t\tint key;\n\t\t\tint val;\n\t\t\tbool used;\n\t\t\tTuple() : used(false)\n\t\t\t{\n\t\t\t}\n\t\t\tTuple(int k, int v)\n\t\t\t{\n\t\t\t\tused = true;\n\t\t\t\tkey = k;\n\t\t\t\tval = v;\n\t\t\t}\n\t\t\toperator int(){\n\t\t\t\treturn this->val;\n\t\t\t}\n\t\t\toperator string(){\n\t\t\t\tstring result;\n\t\t\t\tstringstream ss;\n\t\t\t\tss << this->val;\n\t\t\t\tss >> result;\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tint str_to_int(string &str){\n\t\t\t\tstringstream ss;\n\t\t\t\tss << str;\n\t\t\t\tint res;\n\t\t\t\tss >> res;\n\t\t\t\treturn res;\n\t\t\t}\n\t\t\tint str_to_int(int a) { return a; }\n\t\t\ttemplate<typename K>\n\t\t\tTuple& operator= (K oth)\n\t\t\t{\n\t\t\t\tthis->val = str_to_int(oth);\n\t\t\t\tthis->used = true;\n\t\t\t\treturn *this;\n\t\t\t}\n\t\t\t\n\t\t\t/*template<typename K>\n\t\t\tconst Tuple & operator=(const K & oth)const{\n\t\t\t\treturn this->val;\n\t\t\t}*/\n\t\t};\n\t#define max_index 100\nclass HT{\n\tprivate:\n\t\t\n\t\tTuple dict[max_index+2];\n\t\tint _size;\n\n\tpublic:\n\t\tHT(): _size(0) {}\n\t\t~HT(){}\n\t\tsize_t size(){\n\t\t\tsize_t count=0;\n\t\t\tfor (size_t i = 0; i <= max_index;i++)\n\t\t\t\tif(dict[i].used==true)\n\t\t\t\t\tcount++;\n\t\t\t\treturn count;\n\t\t}\n\t\tint str_to_int(int str) { return str; }\n\t\tint str_to_int(string str){\n\t\t\tstringstream ss;\n\t\t\tss << str;\n\t\t\tint res;\n\t\t\tss >> res;\n\t\t\treturn res;\n\t\t}\n\t\t/*string int_to_str(string v) { return v; }\n\t\tstring int_to_str(int v){\n\t\t\tstring result;\n\t\t\tstringstream ss;\n\t\t\tss << v;\n\t\t\tss >> result;\n\t\t\treturn result;\n\t\t}*/\n\t\tint find_index(int key)\n\t\t{\n\t\t\treturn key%max_index;\n\t\t}\n\t\ttemplate < typename V>\n\t\tTuple & operator[](const V &index)\n\t\t{\n\t\t\tint ling;\n\t\t\tling = str_to_int(index);\n\t\t\treturn dict[find_index(ling)];\n\t\t}\n\t\t\n};",
            1595576323.8420615,
            100,
            "# 答案正确"
        ]
    ],
    "table_name": "答案"
}