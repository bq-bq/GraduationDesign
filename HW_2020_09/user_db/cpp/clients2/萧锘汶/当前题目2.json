{
    "__update_time__": 1595065379.2007184,
    "field_names": [
        "题目名",
        "问题",
        "主程序",
        "答案",
        "评语",
        "开始时间",
        "截止时间",
        "分数",
        "提交时间"
    ],
    "field_types": [
        "text",
        "text",
        "text",
        "text",
        "text",
        "time",
        "time",
        "number",
        "time"
    ],
    "rows": [
        [
            "A.4 (C++)",
            "<p>写出一个键和值的类型都可以是string或int的哈希表类, HT。<br>本题难度大，<span style=\"font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;; font-size: 1rem;\">参考</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;; font-size: 1rem;\">答案有200行，截止时间延长4天。</span></p><p>注意<br></p><ol><li>HT不是一个模版类，但是HT的一个对象可以同时使用int和string的对象作为键。</li></ol><p><span style=\"font-weight: bolder;\">EXAMPLE INPUT</span></p><pre style=\"font-size: 14px;\">1 2 3 4 5 6 7 8\n</pre><p><span style=\"font-weight: bolder;\">EXAMPLE OUTPUT</span></p><pre style=\"font-size: 14px;\">4\n2\n4\n6\n8</pre>",
            "#include \"source.cpp\"\n\n#include <iostream>\n#include <sstream>\nusing namespace std;\n\nint main() {\n\tHT map;\n\t\n\tint key1;\n\tint value1;\n\tcin >> key1 >> value1;\n\tmap.put(key1, value1);\n\t\n\tstring key2;\n\tstring value2;\n\tcin >> key2 >> value2;\n\tmap.put(key2, value2);\n\t\n\tint key3;\n\tstring value3;\n\tcin >> key3 >> value3;\n\tmap.put(key3, value3);\n\t\n\tstring key4;\n\tint value4;\n\tcin >> key4 >> value4;\n\tmap.put(key4, value4);\n\t\n\tcout << map.size() << endl;\n\tcout << (int)map[key1] << endl;\n\tcout << (string)map[key2] << endl;\n\tcout << (string)map[key3] << endl;\n\tcout << (int)map[key4] << endl;\n}",
            "#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <vector>\n#include <string>\n#include <stdexcept>\nusing namespace std;\n\nclass NoSuchKeyExceotion{};\n\nsize_t circular_shift(size_t bits,int shift_bits){\n\tconst int num_bits = 8 * sizeof(size_t);\n\tshift_bits = shift_bits % num_bits;\n\treturn bits < < shift_bits | bits > > (num_bits - shift_bits);\n}\n\nsize_t hash_funtion(const string & key){\n\tsize_t code = 0;\n\tfor (int i = 0; i < key.size(); ++ i){\n\t\tcode ^= circular_shift(key[i],i * 5);\n\t} \n\treturn code;\n}\n\nclass Tuple\n{\n\tstring key;\n\tint val;\n\tbool in_use;\n\t\n\tTuple():in_use(false){};\n};\nclass HT\n{\n\tvector<Tuple>tuples;\n\tsize_t _size;\n\t\n\tsize_t canonical_index(const string & key)const{\n\t\tsize_t hash_code = hash_funtion(key);\n\t\treturn hash_code % tuples.size();\n\t}\n\t\n\tsize_t indexOfKey(const string & key)const{\n\t\tsize_t index = canonical_index(key);\n\t\twhile(ture){\n\t\t\tif(!tuples[index].in_use) return index;\n\t\t\tif(tuples[index].key == key) return index;\n\t\t\tindex = (index + 1) % tuples.size();\n \t\t}\n\t}\n\t\npublic:\n\tHT():size(0){\n\t\ttuples.resize(2);\n\t}\n\t\n\tbool containsKey(const string & key)const{\n\t\tsize_t index = indexOfKey(key);\n\t\treturn tuples[index].in_use;\n\t}\n\t\n\tconst int & operator [] (const string & key)const{\n\t\tsize_t index = indexOfKey(key);\n\t\tif(!tuples[index].in_use){\n\t\t\tthrow NoSuchKeyExceotion();\n\t\t}\n\t\treturn tuples[index].val;\n\t}\n\t\n\tvoid put(const string & key,const int & val){\n\t\tsize_t index = indexOfKey(key);\n\t\ttuples[index].key = key;\n\t\ttuples[index].val = val;\n\t\tif(tuples[index].in_use)return;\n\t\ttuples[index].in_use = ture;\n\t\t++ _size;\n\t\tif(2 * _size > tuples.size()) _double_tuples();\n\t}\n\t\n\tvoid _double_tuples(){\n\t\tvector<Tuple>non_empty_tuples;\n\t\tfor (int i = 0; i < tuples.size(); ++ i){\n\t\t\tif(tuples.in_use){\n\t\t\t\tnon_empty_tuples.push_back(tuples[i]);\n\t\t\t} \n\t\t} \n\t\tclear();\n\t\ttuples,resize(tuples.size() * 2);\n\t\tfor (int i = 0; i < non_empty_tuples.size(); ++ i){\n\t\t\tput(non_empty_tuples[i].key,non_empty_tuples[i].val);\n\t\t} \n\t}\n\t\n\tstatic bool _between(size_t hole,size_t canonical,size_t tuple_index){\n\t\tif(hole < tuple_index){\n\t\t\treturn canonical > hole && canonical <= tuple_index;\n\t\t}\n\t\telse{\n\t\t\treturn canonical > hole || canonical <= tuple_index;\n\t\t}\n\t}\n\t\n\tvoid remove(const string & key){\n\t\tsize_t index = indexOfKey(key);\n\t\tif(!tuples[index].in_use){\n\t\t\tthrow NoSuchKeyExceotion();\n\t\t}\n\t\ttuples[index].in_use = false;\n\t\t-- _size;\n\t\tsize_t hole = index;\n\t\tsize_t tuple_index = hole;\n\t\twhile(true){\n\t\t\ttuple_index = (tuple_index + 1) % tuples.size();\n\t\t\tif(!tuples[tuple_index].in_use)return;\n\t\t\tsize_t canonical = canonical_index(tuples[tuple_index].key);\n\t\t\tif(_between(hole,canonical,tuple_index))continue;\n\t\t\ttuples[hole] = tuples[tuple_index];\n\t\t\thole = tuple_index;\n\t\t\ttuple[hole].in_use = false;\n\t\t}\n\t}\n\t\n\tsize_t size() const{\n\t\treturn _size;\n\t}\n\t\n\tvoid clear(){\n\t\tfor(int i = 0;i < tuples.size();++ i){\n\t\t\ttuples[i].in_use = false;\n\t\t}\n\t\t_size = 0;\n\t}\n\t\n\t\n};",
            "",
            1594951200,
            1595854800,
            0,
            -2209017943.0
        ]
    ]
}