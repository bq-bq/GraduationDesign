{
    "__update_time__": 1595913332.4819937,
    "field_names": [
        "题目名",
        "问题",
        "主程序",
        "答案",
        "评语",
        "开始时间",
        "截止时间",
        "分数",
        "提交时间"
    ],
    "field_types": [
        "text",
        "text",
        "text",
        "text",
        "text",
        "time",
        "time",
        "number",
        "time"
    ],
    "rows": [
        [
            "A.5 (C++)",
            "<p>写出一个键和值的类型都可以是string或int的哈希表类, HT。<br>本题难度大，参考答案有270行，截止时间延长8天。<br>注意<br></p><ol><li>HT不是一个模版类，但是HT的一个对象可以同时使用int和string的对象作为键。</li><li>HT中去掉了put函数，HT的[]操作符同时具有get和put的功能。</li></ol><p><span style=\"font-weight: bolder;\">EXAMPLE INPUT</span></p><pre style=\"font-size: 14px;\">1 2 3 4 5 6 7 8\n</pre><p><span style=\"font-weight: bolder;\">EXAMPLE OUTPUT</span></p><pre style=\"font-size: 14px;\">4\n2\n4\n6\n8</pre>",
            "#include \"source.cpp\"\n\n#include <iostream>\n#include <sstream>\nusing namespace std;\n\nint main() {\n\tHT map;\n\t\n\tint key1;\n\tint value1;\n\tcin >> key1 >> value1;\n\tmap[key1] = value1;\n\t\n\tstring key2;\n\tstring value2;\n\tcin >> key2 >> value2;\n\tmap[key2] = value2;\n\t\n\tint key3;\n\tstring value3;\n\tcin >> key3 >> value3;\n\tmap[key3] = value3;\n\t\n\tstring key4;\n\tint value4;\n\tcin >> key4 >> value4;\n\tmap[key4] = value4;\n\t\n\tcout << map.size() << endl;\n\tcout << (int)map[key1] << endl;\n\tcout << (string)map[key2] << endl;\n\tcout << (string)map[key3] << endl;\n\tcout << (int)map[key4] << endl;\n}",
            "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <stdexcept>\nusing namespace std;\n\n#define I(i,n) for (size_t i = 0; i < n; ++ i)\n\nclass NoSuchKeyException {};\n\nsize_t circular_shift(size_t bits, int shift_bits) {\n\tconst int num_bits = 8 * sizeof(size_t);\n\tshift_bits = shift_bits % num_bits;\n\treturn bits << shift_bits | bits >> (num_bits - shift_bits);\n}\n\nsize_t hash_function(const string & key) {\n\tsize_t code = 0;\n\tI(i, key.size())\n\t\tcode ^= circular_shift(key[i], i * 5);\n\treturn code;\n}\n\nclass HT {\n\tclass Tuple {\n\tpublic:\n\t\tstring key;\n\t\tstring val;\n\t\tbool in_use;\n\n\t\tTuple() : in_use(false) {}\n\t};\n\n    class TupleRef {\n    public:\n        HT * ht;\n        Tuple * tuple;\n        const string & key;\n\n        TupleRef(HT * ht, Tuple * tuple, const string & key) : ht(ht), tuple(tuple), key(key) {}\n\n        operator string() const {\n            if(tuple == 0) throw NoSuchKeyException();\n            return tuple->val;\n        }\n\n        operator int() const {\n            if(tuple == 0) throw NoSuchKeyException();\n            int num = 0;\n            stringstream ss;\n            ss << tuple->val;\n            ss >> num;\n            return num;\n        }\n\n        TupleRef & operator = (const string & val) {\n            if(tuple == 0) {\n                ht->put(key, val);\n            }\n            else {\n                tuple->val = val; \n                ++ ht->_size;\n            }\n            return *this;\n        }\n\n        TupleRef & operator = (const int & val1) {\n            string val;\n            stringstream ss;\n            ss << val1;\n            ss >> val;\n            if(tuple == 0) {\n                ht->put(key, val);\n            }\n            else {\n                tuple->val = val; \n                ++ ht->_size;\n            }\n            return *this;\n        }\n    };\n\n\tvector<Tuple> tuples;\n\tsize_t _size;\n\n\tsize_t canonical_index(const string & key) const {\n\t\tsize_t hash_code = hash_function(key); // needs hash_function(K)\n\t\treturn hash_code % tuples.size();\n\t}\n\n\t// the returned tuple is either empty or with the same key\n\tsize_t indexOfKey(const string & key) const {\n\t\tsize_t index = canonical_index(key);\n\t\twhile (true) { // will enter a dead loop if there is not empty tuple\n\t\t\tif (! tuples[index].in_use) return index;\n\t\t\tif (tuples[index].key == key) return index;\n\t\t\tindex = (index + 1) % tuples.size();\n\t\t}\n\t}\n\npublic:\n\tHT() : _size(0) {\n\t\ttuples.resize(10);\n\t}\n\n    TupleRef operator [] (const string & key) {\n        size_t index = indexOfKey(key);\n        if(index == -1) {\n            return TupleRef(this, 0, key);\n        }\n        return TupleRef(this, &tuples[index], key);\n    }\n\n    TupleRef operator [] (const int & key1) {\n        string key;\n        stringstream ss;\n        ss << key1;\n        ss >> key;\n        size_t index = indexOfKey(key);\n        if(index == -1) {\n            return TupleRef(this, 0, key);\n        }\n        return TupleRef(this, &tuples[index], key);\n    }\n\n\tvoid put(const string & key, const string & val) {\n\t\tsize_t index = indexOfKey(key);\n\t\ttuples[index].key = key;\n\t\ttuples[index].val = val;\n\t\tif (tuples[index].in_use) return;\n\t\ttuples[index].in_use = true;\n\t\t++ _size;\n\t\t// make sure empty > size / 2\n\t\tif (2 * _size > tuples.size())\n\t\t\t_double_tuples();\n\t}\n\n\tvoid _double_tuples() {\n\t\tvector<Tuple> non_empty_tuples;\n\t\tI(i, tuples.size())\n\t\t\tif (tuples[i].in_use)\n\t\t\t\tnon_empty_tuples.push_back(tuples[i]);\n\t\tclear();\n\t\ttuples.resize(tuples.size() * 2);\n\t\tI(i, non_empty_tuples.size())\n\t\t\tput(non_empty_tuples[i].key, non_empty_tuples[i].val);\n\t}\n\n\tsize_t size() const { return _size; }\n\n\tvoid clear() {\n\t\tI(i, tuples.size())\n\t\t\ttuples[i].in_use = false;\n\t\t_size = 0;\n\t}\n};",
            "# 答案不正确\n\n# 随机输入:\n85 87 72 54 40 46 85 13 \n\n# 参考答案:\n4\n87\n54\n46\n13\n\n\n# 我的答案:\n4\n13\n54\n13\n13\n",
            1594951200,
            1596200400,
            100,
            1595913261.9061322
        ]
    ]
}