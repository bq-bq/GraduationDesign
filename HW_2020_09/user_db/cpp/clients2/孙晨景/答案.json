{
    "__update_time__": 1594899457.2494535,
    "field_names": [
        "题目名",
        "用户名",
        "答案",
        "提交时间",
        "分数",
        "评语"
    ],
    "field_types": [
        "text",
        "text",
        "text",
        "time",
        "number",
        "text"
    ],
    "foreign_keys": {},
    "primary_keys": [],
    "rows": [
        [
            "测试1",
            "孙晨景",
            "#include<iostream>\nusing namespace std;\n\tint main(){\n\t\tchar a[3][20]={0};\n\t\tfor(int i=0;i<3;i++){\n\t\t\tscanf(\"%s\",a[i]);\n\t\t}\n\t\tfor(int j=2;j>=0;j--){\n\t\t\tprintf(\"%s \",a[j]);\n\t\t}\n\t}",
            1587609955.7689934,
            100,
            "# 答案正确"
        ],
        [
            "测试2",
            "孙晨景",
            "#include<iostream>\nusing namespace std;\nint strcmp(char *src,char *dst){\n    int ret=0;\n    while(!(ret = *(unsigned char *)src - *(unsigned char *)dst) && *dst)\n        ++src,++dst;\n    if(ret<0)\n        ret=-1;\n    else if(ret>0)\n        ret=1;\n    return(ret);\n}\n\tint main(){\n\t\tchar a[10][20]={0};\n\t\tfor(int i=0;i<10;i++){\n\t\t\tscanf(\"%s\",a[i]);\n\t}\n\t\t\tchar *temb;\n\t\t\tfor(int k=0;k<10;k++){\n\t\t\t\tfor(int l=0;l<10-k-1;l++){\n\t\t\t\t\tif(strcmp(a[l]，a[l+1])>0){\n\t\t\t\t\t\ta[l]=temb;\n\t\t\t\t\t\ta[l]=a[l+1];\n\t\t\t\t\t\ta[l+1]=temb;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i=0;i<10;i++){\n\t\t\t\tprintf(\"%s \",a[i]);\n\t\t\t}\n\t\t}\n",
            1587610710.2053826,
            50,
            "In file included from main.cpp:1:0:\nsource.cpp:21:6: error: stray ‘\\357’ in program\n      if(strcmp(a[l]，a[l+1])>0){\n      ^\nsource.cpp:21:6: error: stray ‘\\274’ in program\nsource.cpp:21:6: error: stray ‘\\214’ in program\nsource.cpp: In function ‘int main()’:\nsource.cpp:21:23: error: expected ‘)’ before ‘a’\n      if(strcmp(a[l]，a[l+1])>0){\n                       ^\nsource.cpp:21:29: error: too few arguments to function ‘int strcmp(char*, char*)’\n      if(strcmp(a[l]，a[l+1])>0){\n                             ^\nsource.cpp:3:5: note: declared here\n int strcmp(char *src,char *dst){\n     ^\nsource.cpp:22:11: error: incompatible types in assignment of ‘char*’ to ‘char [20]’\n       a[l]=temb;\n           ^\nsource.cpp:23:11: error: invalid array assignment\n       a[l]=a[l+1];\n           ^\nsource.cpp:24:13: error: incompatible types in assignment of ‘char*’ to ‘char [20]’\n       a[l+1]=temb;\n             ^\n"
        ],
        [
            "2.1 (C++)",
            "孙晨景",
            "#include <iostream>\n#include<iomanip>\n#include<cstring>\nusing namespace std;\n\nclass Matrix {\nprivate:\n    int rows,columns;\n    double values[10][10];\npublic:\n    Matrix(int rows,int columns) {\n        this->rows = rows;\n        this->columns = columns;\n        memset(values,0,sizeof(values));\n    }\n    ~Matrix() {}\n    void print () {\n        for (int i = 0; i < rows; ++i) {\n            for (int j = 0; j < columns; ++j) {\n                cout<<setw(5)<<values[i][j];\n            }\n            cout<<endl;\n        }\n    }\n};",
            1589420282.994291,
            100,
            "# 答案正确"
        ],
        [
            "2.2 (C++)",
            "孙晨景",
            "#include <iostream>\n#include<iomanip>\n#include<cstring>\nusing namespace std;\n\nclass Matrix {\nprivate:\n    int rows,columns;\n    double values[10][10];\npublic:\n    Matrix(int rows,int columns,double *value) {\n        this->rows = rows;\n        this->columns = columns;\n\t\t\tint p=0;\n        for (int i = 0; i < rows; ++i) {\n            for (int j = 0; j < columns; ++j) {\n                values[i][j]=value[p];\n\t\t\t\t\t\tp++;\n     }\n    }\n\t}\n    ~Matrix() {}\n    void print () {\n        for (int i = 0; i < rows; ++i) {\n            for (int j = 0; j < columns; ++j) {\n                cout<<setw(5)<<values[i][j];\n            }\n            cout<<endl;\n        }\n    }\n};",
            1589421431.2848434,
            100,
            "# 答案正确"
        ],
        [
            "2.3 (C++)",
            "孙晨景",
            "#include <iostream>\n#include<iomanip>\n#include<cstring>\nusing namespace std;\n\nclass Matrix {\nprivate:\n    int rows,columns;\n    double values[10][10];\npublic:\n    Matrix(int rows,int columns,double *value) {\n        this->rows = rows;\n        this->columns = columns;\n\t\t\tint p=0;\n        for (int i = 0; i < rows; ++i) {\n            for (int j = 0; j < columns; ++j) {\n                values[i][j]=value[p];\n\t\t\t\t\t\tp++;\n     }\n    }\n\t}\n    ~Matrix() {}\n    void print () {\n        for (int i = 0; i < rows; ++i) {\n            for (int j = 0; j < columns; ++j) {\n                cout<<setw(5)<<values[i][j];\n            }\n            cout<<endl;\n        }\n    }\n};",
            1589421514.5509927,
            10,
            "# 答案不正确\n\n# 随机输入:\n9 7\n58 53 17 50 57 63 35 63 14 80 2 85 46 14 35 99 49 80 27 86 87 59 53 32 76 84 69 4 60 56 59 95 55 42 88 93 48 69 73 10 26 24 52 56 8 2 37 67 21 36 84 77 47 68 42 62 13 64 77 38 25 47 54 \n\n# 参考答案:\n    58    53    17    50    57    63    35\n    63    14    80    2    85    46    14\n    35    99    49    80    27    86    87\n    59    53    32    76    84    69    4\n    60    56    59    95    55    42    88\n    93    48    69    73    10    26    24\n    52    56    8    2    37    67    21\n    36    84    77    47    68    42    62\n    13    64    77    38    25    47    54\n\n\n# 我的答案:\n   58   53   17   50   57   63   35\n   63   14   80    2   85   46   14\n   35   99   49   80   27   86   87\n   59   53   32   76   84   69    4\n   60   56   59   95   55   42   88\n   93   48   69   73   10   26   24\n   52   56    8    2   37   67   21\n   36   84   77   47   68   42   62\n   13   64   77   38   25   47   54\n"
        ],
        [
            "2.9 (C++)",
            "孙晨景",
            "#include <iostream>\n#include<iomanip>\n#include<cstring>\nusing namespace std;\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble ma[10][10];\n\tpublic:\n\t\tMatrix(int row, int column, double values[]){\n\t\t\tthis->rows=row;\n\t\t\tthis->columns=column;\n\t\t\tint p=0;\n\t \tfor(int i=0;i<rows;i++){\n\t \t\tfor(int j=0;j<column;j++){\n\t \t\t\tma[i][j]=values[p];\n\t \t\t\tp++;\n\t\t\t }\n\t\t }\n\t } \n\t \tvoid print(){\n\t \t\tfor(int i=0;i<rows;i++){\n\t \t\t\tfor(int j=0;j<columns;j++){\n\t \t\t\t\tcout<<\" \"<<\" \"<<\" \"<<\" \"<<ma[i][j];\n\t\t\t\t }\n\t\t\t\t cout<<endl;\n\t\t\t }\n\t\t }\n\t\t Matrix operator + (const Matrix & matrix2)const{\n\t\t \tint a=this->rows; int b=this->columns;\n\t\t \tdouble c[1000];int p=0;\n\t\t \tfor(int i=0;i<rows;i++){\n\t \t\tfor(int j=0;j<columns;j++){\n\t \t\t\tc[p]=(*this).ma[i][j]+matrix2.ma[i][j];\n\t \t\t\tp++;\n\t\t\t }\n\t\t }\n\t\t \tMatrix matrix3(a,b,c);\n\t\t \treturn matrix3;\n\t\t }\n\t\t \n\t\t Matrix operator + (double value)const{\n\t\t \tint a=this->rows; int b=this->columns;\n\t\t \tdouble c[1000];int p=0;\n\t\t \tfor(int i=0;i<rows;i++){\n\t \t\tfor(int j=0;j<columns;j++){\n\t \t\t\tc[p]=(*this).ma[i][j]+value;\n\t \t\t\tp++;\n\t\t\t }\n\t\t }\n\t\t \tMatrix matrix3(a,b,c);\n\t\t \treturn matrix3;\n\t\t }\n\t\t \n\t\t Matrix operator - (const Matrix & matrix2)const{\n\t\t \tint a=this->rows; int b=this->columns;\n\t\t \tdouble c[1000];int p=0;\n\t\t \tfor(int i=0;i<rows;i++){\n\t \t\tfor(int j=0;j<columns;j++){\n\t \t\t\tc[p]=(*this).ma[i][j]-matrix2.ma[i][j];\n\t \t\t\tp++;\n\t\t\t }\n\t\t }\n\t\t \tMatrix matrix3(a,b,c);\n\t\t \treturn matrix3;\n\t\t }\n\t\t \n\t\t  Matrix operator - (double value)const{\n\t\t \tint a=this->rows; int b=this->columns;\n\t\t \tdouble c[1000];int p=0;\n\t\t \tfor(int i=0;i<rows;i++){\n\t \t\tfor(int j=0;j<columns;j++){\n\t \t\t\tc[p]=(*this).ma[i][j]-value;\n\t \t\t\tp++;\n\t\t\t }\n\t\t }\n\t\t \tMatrix matrix3(a,b,c);\n\t\t \treturn matrix3;\n\t\t }\t \n};\n",
            1590030745.916818,
            100,
            "# 答案正确"
        ],
        [
            "2.4 (C++)",
            "孙晨景",
            "#include <iostream>\nusing namespace std;\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble ma[10][10];\n\t\t\n\tpublic:\n\t\tMatrix(int row, int column,double values[]){\n\t\t\tthis->rows=row;\n\t\t\tthis->columns=column;\n\t\t\tint p=0;\n\t \tfor(int i=0;i<row;i++){\n\t \t\tfor(int j=0;j<column;j++){\n\t \t\t\tma[i][j]=values[p];\n\t \t\t\tp++;\n\t\t\t }\n\t\t }\n\t }\n\t \n\t \tvoid print(){\n\t \t\tfor(int i=0;i<rows;i++){\n\t \t\t\tfor(int j=0;j<columns;j++){\n\t \t\t\t\tcout<<\" \"<<\" \"<<\" \"<<\" \"<<ma[i][j];\n\t\t\t\t }\n\t\t\t\t cout<<endl;\n\t\t\t }\n\t\t }\t\n\t\t\n\t\tMatrix(int row, int column){\n\t\t\tthis->rows=row;\n\t\t\tthis->columns=column;\n\t\t\tint p=0;\n\t \tfor(int i=0;i<row;i++){\n\t \t\tfor(int j=0;j<column;j++){\n\t \t\t\tma[i][j]=0;\n\t\t\t }\n\t\t }\n\t }\n\t \n\t \tvoid set(int row,int column,double value){\n\t \t\tma[row-1][column-1]=value;\n\t\t }\n\t\t\n};",
            1590047750.6221786,
            100,
            "# 答案正确"
        ],
        [
            "2.7 (C++)",
            "孙晨景",
            "#include <iostream>\nusing namespace std;\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble ma[10][10];\n\t\t\n\tpublic:\n\t\tMatrix(int row, int column, double values[]){\n\t\t\tthis->rows=row;\n\t\t\tthis->columns=column;\n\t\t\tint p=0;\n\t \tfor(int i=0;i<row;i++){\n\t \t\tfor(int j=0;j<column;j++){\n\t \t\t\tma[i][j]=values[p];\n\t \t\t\tp++;\n\t\t\t }\n\t\t }\n\t }\n\t \n\t \tvoid print(){\n\t \t\tfor(int i=0;i<rows;i++){\n\t \t\t\tfor(int j=0;j<columns;j++){\n \t\t\t\tcout<<\" \"<<\" \"<<\" \"<<\" \"<<ma[i][j];\n\t\t\t\t}\n\t\t\t\t cout<<endl;\n\t\t\t }\n\t\t}\n\t\t\n\t\tMatrix reshape(int a,int b){\n\t\t\tint c=this->rows; int d=this->columns;\n\t\t\tdouble temp[100];int p=0;int q=0;int o=0;\n\t\t\tfor(int j=0;j<d;j++){\n\t\t\t\tfor(int i=0;i<c;i++){\n\t\t\t\t\ttemp[p]=(*this).ma[i][j];\n\t\t\t\t\tp++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdouble temb[10][10];\n\t\t\t for(int j=0;j<b;j++){\n\t\t\t\tfor(int i=0;i<a;i++){\n\t\t\t\t\ttemb[i][j]=temp[q];\n\t\t\t\t\tq++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdouble tot[100];\n\t\t\tfor(int i=0;i<a;i++){\n\t\t\t\tfor(int j=0;j<b;j++){\n\t\t\t\t\ttot[o]=temb[i][j];\n\t\t\t\t\to++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tMatrix matrix3(a,b,tot);\n\t\t\treturn matrix3;\n\t\t}\n};",
            1590055356.8120608,
            100,
            "# 答案正确"
        ],
        [
            "2.8 (C++)",
            "孙晨景",
            "#include <iostream>\nusing namespace std;\nclass Matrix{\n\tprivate:\n\t\tint rows;\n\t\tint columns;\n\t\tdouble ma[10][10];\n\t\t\n\tpublic:\n\t\tMatrix(int row, int column, double values[]){\n\t\t\tthis->rows=row;\n\t\t\tthis->columns=column;\n\t\t\tint p=0;\n\t \tfor(int i=0;i<row;i++){\n\t \t\tfor(int j=0;j<column;j++){\n\t \t\t\tma[i][j]=values[p];\n\t \t\t\tp++;\n\t\t\t }\n\t\t }\n\t }\n\t \n\t \tvoid print(){\n\t \t\tfor(int i=0;i<rows;i++){\n\t \t\t\tfor(int j=0;j<columns;j++){\n\t \t\t\t\tcout<<\" \"<<\" \"<<\" \"<<\" \"<<ma[i][j];\n\t\t\t\t }\n\t\t\t\t cout<<endl;\n\t\t\t }\n\t\t }\t\n\t\t\n\t\tMatrix transpose(){\n\t\t\tint c=this->rows; int d=this->columns;\n\t\t\tint a=d; int b=c;\n\t\t\tdouble temp[100];int p=0;\n\t\t\tfor(int j=0;j<d;j++){\n\t\t\t\tfor(int i=0;i<c;i++){\n\t\t\t\t\ttemp[p]=(*this).ma[i][j];\n\t\t\t\t\tp++;\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\tMatrix matrix3(a,b,temp);\n\t\t\treturn matrix3;\n\t\t}\n};",
            1590055398.943052,
            100,
            "# 答案正确"
        ],
        [
            "2.10 (C++)",
            "孙晨景",
            "#include <iostream>\n#include<iomanip>\n#include<cstring>\nusing namespace std;\n\nclass Matrix {\nprivate:\n    int rows,columns;\n    double values[100][100];\npublic:\n    Matrix(int rows,int columns) {\n        this->rows = rows;\n        this->columns = columns;\n        memset(values,0,sizeof(values));\n    }\n    Matrix(int rows,int columns,double values[]) {\n        this->rows = rows;\n        this->columns = columns;\n        int k = 0;\n        for (int i = 1; i <= rows; ++i) {\n            for (int j = 1; j <= columns; ++j) {\n                this->values[i][j] = values[k++];\n            }\n        }\n    }\n    Matrix(const Matrix & matrix2) {\n        rows = matrix2.rows;\n        columns = matrix2.columns;\n        for (int i = 1; i <= rows; ++i) {\n            for (int j = 1; j <= columns; ++j) {\n                values[i][j] = matrix2.values[i][j];\n            }\n        }\n    }\n    ~Matrix() {}\n    void print () {\n        for (int i = 1; i <= rows; ++i) {\n            for (int j = 1; j <= columns; ++j) {\n                cout<<\"    \"<<values[i][j];\n            }\n            cout<<endl;\n        }\n    }\n    Matrix operator * (const Matrix & matrix2) const {\n        Matrix s(rows,matrix2.columns);\n        for (int i = 1; i <= s.rows; ++i) {\n            for (int j = 1; j <= s.columns; ++j) {\n                for (int k = 1; k <= columns; ++k) {\n                    s.values[i][j] += values[i][k] * matrix2.values[k][j];\n                }\n            }\n        }\n        return s;\n    }\n    Matrix operator * (double value) const {\n        Matrix s(rows,columns);\n        for (int i = 1; i <= s.rows; ++i) {\n            for (int j = 1; j <= s.columns; ++j) {\n                s.values[i][j] = values[i][j] * value;\n            }\n        }\n        return s;\n    }\n};",
            1590063513.2100682,
            100,
            "# 答案正确"
        ],
        [
            "2.11 (C++)",
            "孙晨景",
            "#include <iostream>\n#include<iomanip>\n#include<cstring>\nusing namespace std;\n\nclass Matrix {\nprivate:\n    int rows,columns;\n    double values[100][100];\npublic:\n    Matrix(int rows,int columns) {\n        this->rows = rows;\n        this->columns = columns;\n        memset(values,0,sizeof(values));\n    }\n    Matrix(int rows,int columns,double values[]) {\n        this->rows = rows;\n        this->columns = columns;\n        int k = 0;\n        for (int i = 1; i <= rows; ++i) {\n            for (int j = 1; j <= columns; ++j) {\n                this->values[i][j] = values[k++];\n            }\n        }\n    }\n    Matrix(const Matrix & matrix2) {\n        rows = matrix2.rows;\n        columns = matrix2.columns;\n        for (int i = 1; i <= rows; ++i) {\n            for (int j = 1; j <= columns; ++j) {\n                values[i][j] = matrix2.values[i][j];\n            }\n        }\n    }\n    ~Matrix() {}\n    void print () {\n        for (int i = 1; i <= rows; ++i) {\n            for (int j = 1; j <= columns; ++j) {\n                cout<<\"    \"<<values[i][j];\n            }\n            cout<<endl;\n        }\n    }\n    Matrix max() const {\n        if (rows > 1) {\n            Matrix s(1,columns);\n            for (int j = 1; j <= columns; ++j) {\n                for (int i = 1; i <= rows; ++i) {\n                    if (s.values[1][j] < values[i][j])\n                        s.values[1][j] = values[i][j];\n                }\n            }\n            return s;\n        }\n        else {\n            Matrix s(1,1);\n            for (int j = 1; j <= columns; ++j) {\n                if (s.values[1][1] < values[1][j])\n                    s.values[1][1] = values[1][j];\n            }\n            return s;\n        }\n    }\n    Matrix min() const {\n        if (rows > 1) {\n            Matrix s(1,columns);\n            for (int j = 1; j <= columns; ++j)\n                s.values[1][j] = 10000;\n            for (int j = 1; j <= columns; ++j) {\n                for (int i = 1; i <= rows; ++i) {\n                    if (s.values[1][j] > values[i][j])\n                        s.values[1][j] = values[i][j];\n                }\n            }\n            return s;\n        }\n        else {\n            Matrix s(1,1);\n            s.values[1][1] = 10000;\n            for (int j = 1; j <= columns; ++j) {\n                if (s.values[1][1] > values[1][j])\n                    s.values[1][1] = values[1][j];\n            }\n            return s;\n        }\n    }\n    Matrix sum() const {\n        if (rows > 1) {\n            Matrix s(1,columns);\n            for (int j = 1; j <= columns; ++j) {\n                for (int i = 1; i <= rows; ++i) {\n                    s.values[1][j] += values[i][j];\n                }\n            }\n            return s;\n        }\n        else {\n            Matrix s(1,1);\n            for (int j = 1; j <= columns; ++j) {\n                s.values[1][1] += values[1][j];\n            }\n            return s;\n        } \n    }\n};",
            1590063547.2178211,
            100,
            "# 答案正确"
        ],
        [
            "2.12 (C++)",
            "孙晨景",
            "#include <iostream>\n#include<cstring>\n#include<cmath>\nusing namespace std;\n\nclass Matrix {\nprivate:\n    int rows,columns;\n    double values[100][100];\npublic:\n    Matrix(int rows,int columns) {\n        this->rows = rows;\n        this->columns = columns;\n        memset(values,0,sizeof(values));\n    }\n    Matrix(int rows,int columns,double values[]) {\n        this->rows = rows;\n        this->columns = columns;\n        int k = 0;\n        for (int i = 1; i <= rows; ++i) {\n            for (int j = 1; j <= columns; ++j) {\n                this->values[i][j] = values[k++];\n            }\n        }\n    }\n    Matrix(const Matrix & matrix2) {\n        rows = matrix2.rows;\n        columns = matrix2.columns;\n        for (int i = 1; i <= rows; ++i) {\n            for (int j = 1; j <= columns; ++j) {\n                values[i][j] = matrix2.values[i][j];\n            }\n        }\n    }\n    ~Matrix() {}\n    void print () {\n        for (int i = 1; i <= rows; ++i) {\n            for (int j = 1; j <= columns; ++j) {\n                cout<<\"    \"<<values[i][j];\n            }\n            cout<<endl;\n        }\n    }\n\tMatrix pow(double exponent) {\n        Matrix s(rows,columns);\n        for (int i = 1; i <= rows; ++i) {\n            for (int j = 1; j <= columns; ++j) {\n                s.values[i][j] = ::pow(values[i][j],exponent);\n            }\n        }\n        return s;\n    }\n    Matrix exp() {\n        Matrix s(rows,columns);\n        for (int i = 1; i <= rows; ++i) {\n            for (int j = 1; j <= columns; ++j) {\n                s.values[i][j] = ::exp(values[i][j]);\n            }\n        }\n        return s;\n    }\n    Matrix log() {\n        Matrix s(rows,columns);\n        for (int i = 1; i <= rows; ++i) {\n            for (int j = 1; j <= columns; ++j) {\n                s.values[i][j] = ::log(values[i][j]);\n            }\n        }\n        return s;\n    }\n    Matrix abs() {\n        Matrix s(rows,columns);\n        for (int i = 1; i <= rows; ++i) {\n            for (int j = 1; j <= columns; ++j) {\n                s.values[i][j] = ::abs(values[i][j]);\n            }\n        }\n        return s;\n    }\n};",
            1590063603.5404801,
            100,
            "# 答案正确"
        ],
        [
            "6.2 (C++)",
            "孙晨景",
            "#include <iostream>\n#include<cstring>\nusing namespace std;\n\ntemplate <typename T>\nclass Matrix{\nprivate:\n    int rows;\n    int columns;\n    T * values;\npublic:\n    Matrix(int row, int column):rows(row), columns(column) {\n        values = new T[row * columns];\n        for(int i=0;i<row * columns;i++){\n\t\t\t\tvalues[i]=0;\n\t\t}\n    }\n    ~Matrix() {\n        delete [] values;\n    }\n    void print() const{\n        for(int i = 0; i < rows; ++i){\n            for(int j = 0; j < columns; ++j){\n                cout << \"    \" << values[i * columns + j];\n            }\n            cout << endl; \n        }\n    }\n};\n",
            1590634263.4901278,
            100,
            "# 答案正确"
        ],
        [
            "6.1 (C++)",
            "孙晨景",
            "#include <iostream>\n#include <string>\nusing namespace std;\n#include<cstring>\ntemplate <typename T>\nclass Matrix{\nprivate:\n    int rows;\n    int columns;\n    T * values;\npublic:\n    Matrix(int row, int column) {\n\t\t\trows=row; columns=column;\n        values = new T[row * columns];\n        for(int i=0;i<row*column;i++){\n\t\t\tvalues[i]=T();\n\t}\n    }\n    Matrix(int row, int column, const T *value) {\n\t\t\trows=row; columns=column;\n        values = new T[row * column];\n        for(int k = 0; k < row * column; ++k){\n            values[k] = value[k];\n        }\n    }\n    ~Matrix() {\n        delete [] values;\n    }\n    void print() const{\n        for(int i = 0; i < rows; ++i){\n            for(int j = 0; j < columns; ++j){\n                cout << \"    \" << values[i * columns + j];\n            }\n            cout << endl; \n        }\n    }\n    T & get(int x,int y) {\n        return values[(x-1)*columns+(y-1)];\n    }\n    Matrix(const Matrix &matrix2) {\n        this->rows = matrix2.rows;\n        this->columns = matrix2.columns;\n        this->values = new T[rows * columns];\n        for(int i = 0;i < rows*columns;i++) {\n            this->values[i] = matrix2.values[i];\n        }\n    }\n    Matrix & operator = (const Matrix& m){\n        rows = m.rows;\n        columns = m.columns;\n        if (values!=NULL)\n            delete [] this->values;\n        this->values = new T[rows*columns]; \n        for(int k = 0; k < rows*columns; ++k){\n            this->values[k] = m.values[k];\n        }\n        return *this;\n    }\n};",
            1590666079.4650493,
            100,
            "# 答案正确"
        ],
        [
            "6.3 (C++)",
            "孙晨景",
            "#include <iostream>\n#include <string>\nusing namespace std;\n#include<cstring>\ntemplate <typename T>\nclass Matrix{\nprivate:\n    int rows;\n    int columns;\n    T * values;\npublic:\n    Matrix(int row, int column):rows(row), columns(column) {\n        values = new T[row * columns];\n        memset(values,0,sizeof(T)*rows*columns);\n    }\n    Matrix(int row, int column, const T *value): rows(row), columns(column) {\n        values = new T[row * column];\n        for(int k = 0; k < row * column; ++k){\n            values[k] = value[k];\n        }\n    }\n    ~Matrix() {\n        delete [] values;\n    }\n    void print() const{\n        for(int i = 0; i < rows; ++i){\n            for(int j = 0; j < columns; ++j){\n                cout << \"    \" << values[i * columns + j];\n            }\n            cout << endl; \n        }\n    }\n    T & get(int x,int y) {\n        return values[(x-1)*columns+(y-1)];\n    }\n    Matrix(const Matrix &matrix2) {\n        this->rows = matrix2.rows;\n        this->columns = matrix2.columns;\n        this->values = new T[rows * columns];\n        for(int i = 0;i < rows*columns;i++) {\n            this->values[i] = matrix2.values[i];\n        }\n    }\n    Matrix & operator = (const Matrix<T> & m){\n        rows = m.rows;\n        columns = m.columns;\n        if (values!=NULL)\n            delete [] this->values;\n        this->values = new T[rows*columns]; \n        for(int k = 0; k < rows*columns; ++k){\n            this->values[k] = m.values[k];\n        }\n        return *this;\n    }\n};",
            1590665765.765291,
            0,
            "main.cpp: In function ‘int main()’:\nmain.cpp:13:2: error: ‘vector’ was not declared in this scope\n  vector<double> values2;\n  ^\nmain.cpp:13:9: error: expected primary-expression before ‘double’\n  vector<double> values2;\n         ^\nmain.cpp:15:3: error: ‘values2’ was not declared in this scope\n   values2.push_back(values1[i]);\n   ^\nmain.cpp:19:31: error: ‘values2’ was not declared in this scope\n  Matrix<double> matrix2(3, 3, values2);\n                               ^\nmain.cpp:32:10: error: ‘class Matrix<double>’ has no member named ‘getColumn’\n  matrix2.getColumn(2).print();\n          ^\nmain.cpp:34:10: error: ‘class Matrix<double>’ has no member named ‘getRow’\n  matrix2.getRow(2).print();\n          ^\nmain.cpp:37:10: error: ‘class Matrix<double>’ has no member named ‘concatenateRows’\n  matrix1.concatenateRows(matrix2).print();\n          ^\nmain.cpp:39:10: error: ‘class Matrix<double>’ has no member named ‘concatenateColumns’\n  matrix1.concatenateColumns(matrix2).print();\n          ^\nmain.cpp:42:10: error: ‘class Matrix<double>’ has no member named ‘concatenateColumns’\n  matrix1.concatenateColumns(matrix2).\n          ^\nmain.cpp:46:10: error: ‘class Matrix<double>’ has no member named ‘transpose’\n  matrix2.transpose().print();\n          ^\nmain.cpp:49:11: error: no match for ‘operator+’ (operand types are ‘Matrix<double>’ and ‘Matrix<double>’)\n  (matrix2 + matrix2).print();\n           ^\nIn file included from /usr/include/c++/5/bits/stl_algobase.h:67:0,\n                 from /usr/include/c++/5/bits/char_traits.h:39,\n                 from /usr/include/c++/5/ios:40,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/stl_iterator.h:334:5: note: candidate: template<class _Iterator> std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\n     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n     ^\n/usr/include/c++/5/bits/stl_iterator.h:334:5: note:   template argument deduction/substitution failed:\nmain.cpp:49:13: note:   ‘Matrix<double>’ is not derived from ‘const std::reverse_iterator<_Iterator>’\n  (matrix2 + matrix2).print();\n             ^\nIn file included from /usr/include/c++/5/bits/stl_algobase.h:67:0,\n                 from /usr/include/c++/5/bits/char_traits.h:39,\n                 from /usr/include/c++/5/ios:40,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/stl_iterator.h:1152:5: note: candidate: template<class _Iterator> std::move_iterator<_Iterator> std::operator+(typename std::move_iterator<_Iterator>::difference_type, const std::move_iterator<_Iterator>&)\n     operator+(typename move_iterator<_Iterator>::difference_type __n,\n     ^\n/usr/include/c++/5/bits/stl_iterator.h:1152:5: note:   template argument deduction/substitution failed:\nmain.cpp:49:13: note:   ‘Matrix<double>’ is not derived from ‘const std::move_iterator<_Iterator>’\n  (matrix2 + matrix2).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4783:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4783:5: note:   template argument deduction/substitution failed:\nmain.cpp:49:13: note:   ‘Matrix<double>’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  (matrix2 + matrix2).print();\n             ^\nIn file included from /usr/include/c++/5/string:53:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.tcc:1151:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const _CharT*, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\n     operator+(const _CharT* __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.tcc:1151:5: note:   template argument deduction/substitution failed:\nmain.cpp:49:13: note:   mismatched types ‘const _CharT*’ and ‘Matrix<double>’\n  (matrix2 + matrix2).print();\n             ^\nIn file included from /usr/include/c++/5/string:53:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.tcc:1167:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(_CharT, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\n     operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n     ^\n/usr/include/c++/5/bits/basic_string.tcc:1167:5: note:   template argument deduction/substitution failed:\nmain.cpp:49:13: note:   ‘Matrix<double>’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  (matrix2 + matrix2).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4820:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const _CharT*)\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4820:5: note:   template argument deduction/substitution failed:\nmain.cpp:49:13: note:   ‘Matrix<double>’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  (matrix2 + matrix2).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4836:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, _CharT)\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)\n     ^\n/usr/include/c++/5/bits/basic_string.h:4836:5: note:   template argument deduction/substitution failed:\nmain.cpp:49:13: note:   ‘Matrix<double>’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  (matrix2 + matrix2).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4848:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4848:5: note:   template argument deduction/substitution failed:\nmain.cpp:49:13: note:   ‘Matrix<double>’ is not derived from ‘std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  (matrix2 + matrix2).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4854:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&)\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4854:5: note:   template argument deduction/substitution failed:\nmain.cpp:49:13: note:   ‘Matrix<double>’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  (matrix2 + matrix2).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4860:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&)\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4860:5: note:   template argument deduction/substitution failed:\nmain.cpp:49:13: note:   ‘Matrix<double>’ is not derived from ‘std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  (matrix2 + matrix2).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4872:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&)\n     operator+(const _CharT* __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4872:5: note:   template argument deduction/substitution failed:\nmain.cpp:49:13: note:   mismatched types ‘const _CharT*’ and ‘Matrix<double>’\n  (matrix2 + matrix2).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4878:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(_CharT, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&)\n     operator+(_CharT __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4878:5: note:   template argument deduction/substitution failed:\nmain.cpp:49:13: note:   ‘Matrix<double>’ is not derived from ‘std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  (matrix2 + matrix2).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4884:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&, const _CharT*)\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4884:5: note:   template argument deduction/substitution failed:\nmain.cpp:49:13: note:   ‘Matrix<double>’ is not derived from ‘std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  (matrix2 + matrix2).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4890:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&, _CharT)\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4890:5: note:   template argument deduction/substitution failed:\nmain.cpp:49:13: note:   ‘Matrix<double>’ is not derived from ‘std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  (matrix2 + matrix2).print();\n             ^\nmain.cpp:51:11: error: no match for ‘operator+’ (operand types are ‘Matrix<double>’ and ‘int’)\n  (matrix2 + 10).print();\n           ^\nIn file included from /usr/include/c++/5/bits/stl_algobase.h:67:0,\n                 from /usr/include/c++/5/bits/char_traits.h:39,\n                 from /usr/include/c++/5/ios:40,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/stl_iterator.h:334:5: note: candidate: template<class _Iterator> std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\n     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n     ^\n/usr/include/c++/5/bits/stl_iterator.h:334:5: note:   template argument deduction/substitution failed:\nmain.cpp:51:13: note:   mismatched types ‘const std::reverse_iterator<_Iterator>’ and ‘int’\n  (matrix2 + 10).print();\n             ^\nIn file included from /usr/include/c++/5/bits/stl_algobase.h:67:0,\n                 from /usr/include/c++/5/bits/char_traits.h:39,\n                 from /usr/include/c++/5/ios:40,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/stl_iterator.h:1152:5: note: candidate: template<class _Iterator> std::move_iterator<_Iterator> std::operator+(typename std::move_iterator<_Iterator>::difference_type, const std::move_iterator<_Iterator>&)\n     operator+(typename move_iterator<_Iterator>::difference_type __n,\n     ^\n/usr/include/c++/5/bits/stl_iterator.h:1152:5: note:   template argument deduction/substitution failed:\nmain.cpp:51:13: note:   mismatched types ‘const std::move_iterator<_Iterator>’ and ‘int’\n  (matrix2 + 10).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4783:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4783:5: note:   template argument deduction/substitution failed:\nmain.cpp:51:13: note:   ‘Matrix<double>’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  (matrix2 + 10).print();\n             ^\nIn file included from /usr/include/c++/5/string:53:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.tcc:1151:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const _CharT*, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\n     operator+(const _CharT* __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.tcc:1151:5: note:   template argument deduction/substitution failed:\nmain.cpp:51:13: note:   mismatched types ‘const _CharT*’ and ‘Matrix<double>’\n  (matrix2 + 10).print();\n             ^\nIn file included from /usr/include/c++/5/string:53:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.tcc:1167:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(_CharT, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\n     operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n     ^\n/usr/include/c++/5/bits/basic_string.tcc:1167:5: note:   template argument deduction/substitution failed:\nmain.cpp:51:13: note:   mismatched types ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’ and ‘int’\n  (matrix2 + 10).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4820:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const _CharT*)\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4820:5: note:   template argument deduction/substitution failed:\nmain.cpp:51:13: note:   ‘Matrix<double>’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  (matrix2 + 10).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4836:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, _CharT)\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)\n     ^\n/usr/include/c++/5/bits/basic_string.h:4836:5: note:   template argument deduction/substitution failed:\nmain.cpp:51:13: note:   ‘Matrix<double>’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  (matrix2 + 10).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4848:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4848:5: note:   template argument deduction/substitution failed:\nmain.cpp:51:13: note:   ‘Matrix<double>’ is not derived from ‘std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  (matrix2 + 10).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4854:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&)\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4854:5: note:   template argument deduction/substitution failed:\nmain.cpp:51:13: note:   ‘Matrix<double>’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  (matrix2 + 10).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4860:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&)\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4860:5: note:   template argument deduction/substitution failed:\nmain.cpp:51:13: note:   ‘Matrix<double>’ is not derived from ‘std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  (matrix2 + 10).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4872:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&)\n     operator+(const _CharT* __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4872:5: note:   template argument deduction/substitution failed:\nmain.cpp:51:13: note:   mismatched types ‘const _CharT*’ and ‘Matrix<double>’\n  (matrix2 + 10).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4878:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(_CharT, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&)\n     operator+(_CharT __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4878:5: note:   template argument deduction/substitution failed:\nmain.cpp:51:13: note:   mismatched types ‘std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’ and ‘int’\n  (matrix2 + 10).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4884:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&, const _CharT*)\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4884:5: note:   template argument deduction/substitution failed:\nmain.cpp:51:13: note:   ‘Matrix<double>’ is not derived from ‘std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  (matrix2 + 10).print();\n             ^\nIn file included from /usr/include/c++/5/string:52:0,\n                 from /usr/include/c++/5/bits/locale_classes.h:40,\n                 from /usr/include/c++/5/bits/ios_base.h:41,\n                 from /usr/include/c++/5/ios:42,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/basic_string.h:4890:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&, _CharT)\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n     ^\n/usr/include/c++/5/bits/basic_string.h:4890:5: note:   template argument deduction/substitution failed:\nmain.cpp:51:13: note:   ‘Matrix<double>’ is not derived from ‘std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’\n  (matrix2 + 10).print();\n             ^\nmain.cpp:53:11: error: ‘class Matrix<double>’ has no member named ‘transpose’\n  (matrix2.transpose() - matrix2).print();\n           ^\nmain.cpp:55:11: error: no match for ‘operator-’ (operand types are ‘Matrix<double>’ and ‘int’)\n  (matrix2 - 10).print();\n           ^\nIn file included from /usr/include/c++/5/bits/stl_algobase.h:67:0,\n                 from /usr/include/c++/5/bits/char_traits.h:39,\n                 from /usr/include/c++/5/ios:40,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/stl_iterator.h:328:5: note: candidate: template<class _Iterator> typename std::reverse_iterator<_Iterator>::difference_type std::operator-(const std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_Iterator>&)\n     operator-(const reverse_iterator<_Iterator>& __x,\n     ^\n/usr/include/c++/5/bits/stl_iterator.h:328:5: note:   template argument deduction/substitution failed:\nmain.cpp:55:13: note:   ‘Matrix<double>’ is not derived from ‘const std::reverse_iterator<_Iterator>’\n  (matrix2 - 10).print();\n             ^\nIn file included from /usr/include/c++/5/bits/stl_algobase.h:67:0,\n                 from /usr/include/c++/5/bits/char_traits.h:39,\n                 from /usr/include/c++/5/ios:40,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/stl_iterator.h:380:5: note: candidate: template<class _IteratorL, class _IteratorR> decltype ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)\n     operator-(const reverse_iterator<_IteratorL>& __x,\n     ^\n/usr/include/c++/5/bits/stl_iterator.h:380:5: note:   template argument deduction/substitution failed:\nmain.cpp:55:13: note:   ‘Matrix<double>’ is not derived from ‘const std::reverse_iterator<_Iterator>’\n  (matrix2 - 10).print();\n             ^\nIn file included from /usr/include/c++/5/bits/stl_algobase.h:67:0,\n                 from /usr/include/c++/5/bits/char_traits.h:39,\n                 from /usr/include/c++/5/ios:40,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/stl_iterator.h:1138:5: note: candidate: template<class _IteratorL, class _IteratorR> decltype ((__x.base() - __y.base())) std::operator-(const std::move_iterator<_Iterator>&, const std::move_iterator<_IteratorR>&)\n     operator-(const move_iterator<_IteratorL>& __x,\n     ^\n/usr/include/c++/5/bits/stl_iterator.h:1138:5: note:   template argument deduction/substitution failed:\nmain.cpp:55:13: note:   ‘Matrix<double>’ is not derived from ‘const std::move_iterator<_Iterator>’\n  (matrix2 - 10).print();\n             ^\nIn file included from /usr/include/c++/5/bits/stl_algobase.h:67:0,\n                 from /usr/include/c++/5/bits/char_traits.h:39,\n                 from /usr/include/c++/5/ios:40,\n                 from /usr/include/c++/5/ostream:38,\n                 from /usr/include/c++/5/iostream:39,\n                 from source.cpp:1,\n                 from main.cpp:1:\n/usr/include/c++/5/bits/stl_iterator.h:1145:5: note: candidate: template<class _Iterator> decltype ((__x.base() - __y.base())) std::operator-(const std::move_iterator<_Iterator>&, const std::move_iterator<_Iterator>&)\n     operator-(const move_iterator<_Iterator>& __x,\n     ^\n/usr/include/c++/5/bits/stl_iterator.h:1145:5: note:   template argument deduction/substitution failed:\nmain.cpp:55:13: note:   ‘Matrix<double>’ is not derived from ‘const std::move_iterator<_Iterator>’\n  (matrix2 - 10).print();\n             ^\nmain.cpp:58:11: error: ‘class Matrix<double>’ has no member named ‘transpose’\n  (matrix2.transpose() * matrix2).print();\n           ^\nmain.cpp:60:11: error: no match for ‘operator*’ (operand types are ‘Matrix<double>’ and ‘int’)\n  (matrix2 * 2).print();\n           ^\nmain.cpp:63:18: error: ‘class Matrix<double>’ has no member named ‘max’\n  cout << matrix2.max().max().get(1, 1) << endl;\n                  ^\nmain.cpp:65:18: error: ‘class Matrix<double>’ has no member named ‘min’\n  cout << matrix2.min().min().get(1, 1) << endl;\n                  ^\nmain.cpp:67:18: error: ‘class Matrix<double>’ has no member named ‘sum’\n  cout << matrix2.sum().sum().get(1, 1) << endl;  \n                  ^\n"
        ],
        [
            "7.2 (C++)",
            "孙晨景",
            "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nvector<string> split(const string & line) {\n    vector<string> words;\n    int st = 0;\n    while (st < line.size()) {\n        int end = line.find(\" \",st);\n        if (end == st) {\n            for (int i = end; i < line.size(); ++i) {\n                if (line[i]!= ' ') {\n                    st = i;\n                    break;\n                }\n                if (i==line.size()-1) {\n                    st = line.size()+1;\n                }\n            }\n        }\n        else {\n            if (end == -1) {\n                words.push_back(line.substr(st));\n                break;\n            }\n            words.push_back(line.substr(st,end - st));\n            for (int i = end; i < line.size(); ++i) {\n                if (line[i]!= ' ') {\n                    st = i;\n                    break;\n                }\n                if (i==line.size()-1) {\n                    st = line.size()+1;\n                }\n            }\n        }  \n    }\n    return words;\n}",
            1591239467.8144073,
            100,
            "# 答案正确"
        ],
        [
            "7.1 (C++)",
            "孙晨景",
            "#include<iostream>\n#include<string>\n#include<math.h> \nusing namespace std;\nclass Triangle : public GeometricObject{\n\tprivate:\n\t\tdouble side1;\n\t\tdouble side2;\n\t\tdouble side3;\n\t\tstring color;\n\t\t\n\tpublic:\n\t\tTriangle(){\n\t\t\tside1=1.0;\n\t\t\tside2=1.0;\n\t\t\tside3=1.0;\n\t\t}\n\t\t\n\t\tTriangle(double a, double b, double c){\n\t\t\tside1=a;\n\t\t\tside2=b;\n\t\t\tside3=c;\n\t\t}\n\t\t\n\t\tdouble getSide1(){\n\t\t\treturn side1;\n\t\t}\n\t\t\n\t\tdouble getSide2(){\n\t\t\treturn side2;\n\t\t}\n\t\t\n\t\tdouble getSide3(){\n\t\t\treturn side3;\n\t\t}\n\t\t\n\t\tdouble getArea(){\n\t\t\tdouble s=(side1+side2+side3)/2;\n\t\t\treturn sqrt(s * (s - side1) * (s - side2) * (s - side3));\n\t\t}\n\t\t\n\t\tdouble getPerimeter(){\n\t\t\treturn side1+side2+side3;\n\t\t}\n};",
            1591257586.0343144,
            100,
            "# 答案正确"
        ],
        [
            "7.3 (C++)",
            "孙晨景",
            "\ntemplate <typename T>\nvector<T> map2(const vector<T> & x,  const T data , T(*map2_func)(const T &, const T &) )\n{\n    vector<T> res;\n    for (int i = 0; i < x.size(); i++)\n    {\n        res.push_back(map2_func(x[i], data));\n    }\n    return res;\n}\ntemplate <typename T>\nvector<T> map2(const vector<T> & x,  const vector<T> & y, T(*map2_func)(const T &, const T &) )\n{\n    vector<T> res;\n    for (int i = 0; i < x.size(); i++)\n    {\n        res.push_back(map2_func(x[i], y[i]));\n    }\n    return res;\n}",
            1591260933.382707,
            100,
            "# 答案正确"
        ],
        [
            "8.5 (C++)",
            "孙晨景",
            "#include<iostream>\nusing namespace std;\nclass Point3D : public Point2D{\n\tprivate:\n\t\tdouble x;\n\t\tdouble y;\n\t\tdouble z;\n\t\t\n\tpublic:\n\t\tPoint3D(){\n\t\t\tsetX(0);\n\t\t\tsetY(0);\n\t\t\tz=0;\n\t\t}\n\t\t\n\t\tPoint3D(double a, double b, double c){\n\t\t\tsetX(a);\n\t\t\tsetY(b);\n\t\t\tz=c;\n\t\t}\n\t\t\n\t\tdouble getZ(){\n\t\t\treturn z;\n\t\t}\n\t\t\n\t\tdouble distance(Point3D & point2){\n\t\t\tdouble dx = getX() - point2.getX();\n\t\t\tdouble dy = getY() - point2.getY();\n\t\t\tdouble dz = getZ() - point2.getZ();\n\t\t\treturn sqrt(dx * dx + dy * dy + dz * dz);\n\t\t}\n};\n\n\tvoid printDistance(Point3D & point1, Point3D & point2) {\n    cout << \"point1.distance(point2) = \" << \n        point1.distance(point2) << endl;\n}",
            1591844080.18388,
            100,
            "# 答案正确"
        ],
        [
            "8.1 (C++)",
            "孙晨景",
            "#include <iostream>\n#include <cstring>\n#include <cmath>\nusing namespace std;\n\nclass Full : public Matrix {\npublic:\n    int rows,columns;\n    double values[100][100];\n    Full(int row,int column):rows(row),columns(column) {\n        memset(values,0,sizeof(values));\n    }\n    Full(int row,int column,double value[]):rows(row),columns(column) {\n        int k = 0;\n        for (int i = 0; i < rows; ++i) {\n            for (int j = 0; j < columns; ++j) {\n                values[i][j] = value[k++];\n            }\n        }\n    }\n    Full(const Matrix & matrix2){\n        rows = matrix2.size(1);\n        columns = matrix2.size(2);\n        for (int i = 0; i < rows; ++i) {\n            for (int j = 0; j < columns; ++j) {\n                values[i][j] = matrix2.get(i+1,j+1);\n            }\n        }\n    }\n    ~Full() {}\n    void print() const {\n        for (int i = 0; i < rows; ++i) {\n            for (int j = 0; j < columns; ++j) {\n                cout << \"    \" << values[i][j];\n            }\n            cout << endl;\n        }\n    }\n    Matrix & operator = (const Matrix & matrix2) {\n        rows = matrix2.size(1);\n        columns = matrix2.size(2);\n        for (int i = 0; i < rows; ++i) {\n            for (int j = 0; j < columns; ++j) {\n                values[i][j] = matrix2.get(i+1,j+1);\n            }\n        }\n    }\n    int size(int dimension) const {\n        if (dimension == 1) return rows;\n        if (dimension == 2) return columns;\n    }\n    void set(int row, int column, double value) {\n        values[row-1][column-1] = value;\n    }\n    double get(int row, int column) const {\n        return values[row-1][column-1];\n    }\n};",
            1591866739.5135238,
            100,
            "# 答案正确"
        ],
        [
            "8.3 (C++)",
            "孙晨景",
            "\n#include <iostream>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool comp(const Entry& a, const Entry& b)\n{\n    if (a.row == b.row)\n    {\n        return a.column < b.column;\n    }\n    else\n    {\n        return a.row < b.row;\n    }\n}\nclass Sparse : public Matrix\n{\npublic:\n    Sparse(int r, int c)\n    {\n        this->rows = r;\n        this->columns = c ;\n        values.clear();\n    }\n  Sparse  operator+ (Sparse& sparse2)\n    {\n        Sparse temp(this->rows, this->columns);\n        temp.values = this->values;\n\n        for (int i = 0; i < sparse2.values.size();i++)\n        {\n            Entry t = sparse2.values[i];\n            double v = temp.get(t.row, t.column);\n            temp.set(t.row,t.column, sparse2.get(t.row,t.column) + v);\n        }\n        return temp;\n    }\n\n    int findIndex(int r, int c) const\n    {\n        for (int i = 0; i < values.size(); i++)\n        {\n            if (values[i].row == r && values[i].column == c)\n            {\n                return i;\n            }\n        }\n        return -1;\n    }\n    virtual int size(int dimension) const\n    {\n        if (dimension == 1)\n            return rows;\n        else\n        {\n            return columns;\n        }\n    }\n\n\n    virtual void set(int r, int c, double v)\n    {\n        int index = findIndex(r, c);\n        if (index != -1)\n        {\n            if (v == 0)\n            {\n                values.erase(values.begin() + index);\n            }\n            else\n            {\n                values[index].value = v;\n            }\n        }\n        else\n        {\n            if (v != 0)\n            {\n                Entry t;\n                t.row = r;\n                t.column = c;\n                t.value = v;\n                values.push_back(t);\n            }\n        }\n    }\n\n    virtual double get(int r, int c) const\n    {\n        int index = findIndex(r, c);\n        if (index == -1)\n            return 0;\n        else\n        {\n            return values[index].value;\n        }\n    }\n\n    virtual void print()\n    {\n\n        sort(values.begin(), values.end(),comp);\n        for (int i = 0; i < values.size(); i++)\n        {\n            cout << \"(\" << values[i].row << \",\" << values[i].column << \",\" << values[i].value << \")\" << endl;\n        }\n    }\n\nprivate:\n    int rows;\n    int columns;\n    vector<Entry> values;\n};",
            1591878853.0111408,
            100,
            "# 答案正确"
        ],
        [
            "8.4 (C++)",
            "孙晨景",
            "\n#include <iostream>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool comp(const Entry& a, const Entry& b)\n{\n    if (a.row == b.row)\n    {\n        return a.column < b.column;\n    }\n    else\n    {\n        return a.row < b.row;\n    }\n}\nclass Sparse : public Matrix\n{\npublic:\n    Sparse(int r, int c)\n    {\n        this->rows = r;\n        this->columns = c ;\n        values.clear();\n    }\n\n  Sparse  operator+ (Sparse& sparse2)\n    {\n        Sparse temp(this->rows, this->columns);\n        temp.values = this->values;\n\n        for (int i = 0; i < sparse2.values.size();i++)\n        {\n            Entry t = sparse2.values[i];\n            double v = temp.get(t.row, t.column);\n            temp.set(t.row,t.column,t.value+v);\n        }\n        return temp;\n    }\n\n    int findIndex(int r, int c) const\n    {\n        for (int i = 0; i < values.size(); i++)\n        {\n            if (values[i].row == r && values[i].column == c)\n            {\n                return i;\n            }\n        }\n        return -1;\n    }\n    virtual int size(int dimension) const\n    {\n        if (dimension == 1)\n            return rows;\n        else\n        {\n            return columns;\n        }\n    }\n\n\n    virtual void set(int r, int c, double v)\n    {\n        int index = findIndex(r, c);\n        if (index != -1)\n        {\n            if (v == 0)\n            {\n                values.erase(values.begin() + index);\n            }\n            else\n            {\n                values[index].value = v;\n            }\n        }\n        else\n        {\n            if (v != 0)\n            {\n                Entry t;\n                t.row = r;\n                t.column = c;\n                t.value = v;\n                values.push_back(t);\n            }\n        }\n    }\n\n    virtual double get(int r, int c) const\n    {\n        int index = findIndex(r, c);\n        if (index == -1)\n            return 0;\n        else\n        {\n            return values[index].value;\n        }\n    }\nSparse  operator * (Sparse & sparse2)\n    {\n        Sparse temp(this->rows, sparse2.columns);\n        for(int i = 0; i < values.size(); i++)\n        {\n            for(int j = 0; j < sparse2.values.size(); j++)\n            {\n                Entry a = this->values[i];\n                Entry b = sparse2.values[j];\n                if(a.column == b.row)\n                {\n                    double t = a.value * b.value;\n                    temp.set(a.row,b.column, temp.get(a.row,b.column) + t);\n                }\n            }\n        }\n        return temp;\n    }\n    virtual void print()\n    {\n\n        sort(values.begin(), values.end(),comp);\n        for (int i = 0; i < values.size(); i++)\n        {\n            cout << \"(\" << values[i].row << \",\" << values[i].column << \",\" << values[i].value << \")\" << endl;\n        }\n    }\n\nprivate:\n    int rows;\n    int columns;\n    vector<Entry> values;\n};\n\n",
            1591878931.6317432,
            100,
            "# 答案正确"
        ],
        [
            "8.6 (C++)",
            "孙晨景",
            "#include<vector>\n#include<iostream>\nusing namespace std;\nclass MyTensor : public Tensor<double>\n{\nprivate:\n    vector<double> cap;\n\npublic:\n    MyTensor(vector<int> indexes) : Tensor(indexes)\n    {\n        int num = 1;\n        for (int i = 0; i < indexes.size(); i++)\n        {\n            num *= indexes[i];\n        }\n        cap.resize(num);\n    }\n    ~MyTensor(){};\n    double &get(const vector<int> &indexes)\n    {\n        int pos = 0;\n        for (int i = 0; i < indexes.size(); i++)\n        {\n            if (i == indexes.size() - 1)\n            {\n                pos += indexes[i];\n                break;\n            }\n            int temp = indexes[i];\n            for (int j = i + 1; j < indexes.size(); j++)\n            {\n                temp *= sizes[j];\n            }\n            pos += temp;\n        }\n        return cap[pos];\n    }\n};",
            1592450352.320657,
            100,
            "# 答案正确"
        ],
        [
            "9.1 (C++)",
            "孙晨景",
            "#include <iostream>\nusing namespace std;\nclass Circle{\n\tprivate:\n\t\tdouble r;\n\t\t\n\tpublic:\n\t\tCircle(double a){\n\t\t\tr=a;\n\t\t}\n\t\t\n\t\tbool operator < (Circle y){\n\t\t\tif(r<y.r){\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tbool operator <= (Circle y){\n\t\t\tif(r<=y.r){\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tbool operator == (Circle y){\n\t\t\tif(r==y.r){\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tbool operator != (Circle y){\n\t\t\tif(r!=y.r){\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tbool operator > (Circle y){\n\t\t\tif(r>y.r){\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tbool operator >= (Circle y){\n\t\t\tif(r>=y.r){\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\t\n};",
            1593058663.4686987,
            100,
            "# 答案正确"
        ],
        [
            "9.4 (C++)",
            "孙晨景",
            "#include <iostream> \nusing namespace std;\nclass Complex{\n\tprivate:\n\t\tdouble real;\n\t\tdouble imag;\n\t\t\n\tpublic:\n\t\tComplex(){\n\t\t\treal=0;\n\t\t\timag=0;\n\t\t}\n\t\t\n\t\tComplex(double a, double b){\n\t\t\treal=a;\n\t\t\timag=b;\n\t\t}\n\t\t\n\t\tComplex(const Complex&c){\n\t\t\treal=c.real;\n\t\t\timag=c.imag;\n\t\t}\n\t\t\n\t\tdouble get(int cho)const{\n\t\t\tif(cho==0)return real;\n\t\t\treturn imag;\n\t\t}\n\t\t\n\t\tComplex operator+(Complex & c){\n\t\t\tdouble a=(*this).get(0)+c.get(0);\n\t\t\tdouble b=(*this).get(1)+c.get(1);\n\t\t\tComplex res(a,b);\n\t\t\treturn res;\n\t\t}\n\t\t\n\t\tComplex operator-(Complex & c){\n\t\t\tdouble a=(*this).get(0)-c.get(0);\n\t\t\tdouble b=(*this).get(1)-c.get(1);\n\t\t\tComplex res(a,b);\n\t\t\treturn res;\n\t\t}\n};\n\tostream & operator<<( ostream & os,const Complex & c){\n    os << c.get(0)<<\" \"<< \"+\" <<\" \"<< c.get(1)<< \" i\"; \n    return os;\n\t}\n\n\tistream & operator>>(istream & is, Complex & c){\n\t\tdouble a,b;\n\t\tis>>a>>b;\n\t\tComplex temp(a,b);\n\t\tc=temp;\n\t\treturn is;\n\t}",
            1593061450.3884435,
            100,
            "# 答案正确"
        ],
        [
            "9.5 (C++)",
            "孙晨景",
            "#include <iostream> \nusing namespace std;\nclass Complex{\n\tprivate:\n\t\tdouble real;\n\t\tdouble imag;\n\t\t\n\tpublic:\n\t\tComplex(){\n\t\t\treal=0;\n\t\t\timag=0;\n\t\t}\n\t\t\n\t\tComplex(double a, double b){\n\t\t\treal=a;\n\t\t\timag=b;\n\t\t}\n\t\t\n\t\tComplex(const Complex&c){\n\t\t\treal=c.real;\n\t\t\timag=c.imag;\n\t\t}\n\t\t\n\t\tdouble get(int cho)const{\n\t\t\tif(cho==0)return real;\n\t\t\treturn imag;\n\t\t}\n\t\t\n\t\tComplex operator++(){\n\t\t\t(*this).real=(*this).real+1;\n\t\t\treturn *this;\n\t\t}\n\t\t\n\t\tComplex operator++(int){\n\t\t\tComplex pre(*this);\n\t\t\t(*this).real=(*this).real+1;\n\t\t\treturn pre;\n\t\t}\n\t\t\n\t\toperator double()const{\n\t\t\treturn (*this).get(0);\n\t\t}\n};\n\tostream & operator<<( ostream & os,const Complex & c){\n    os << c.get(0) << \" + \" << c.get(1) << \" i\"; \n    return os;\n\t}\n\n\tistream & operator>>(istream & is, Complex & c){\n\t\tdouble a,b;\n\t\tis>>a>>b;\n\t\tComplex temp(a,b);\n\t\tc=temp;\n\t\treturn is;\n\t}",
            1593075382.0876331,
            100,
            "# 答案正确"
        ],
        [
            "9.3 (C++)",
            "孙晨景",
            "#include <iostream> \n#include <cmath>\nusing namespace std;\nclass Complex{\n\tprivate:\n\t\tdouble reals;\n\t\tdouble imags;\n\t\t\n\tpublic:\n\t\tComplex(){\n\t\t\treals=0;\n\t\t\timags=0;\n\t\t}\n\t\t\n\t\tComplex(double a, double b){\n\t\t\treals=a;\n\t\t\timags=b;\n\t\t}\n\t\t\n\t\tComplex(const Complex&c){\n\t\t\treals=c.reals;\n\t\t\timags=c.imags;\n\t\t}\n\t\t\n\t\tdouble real()const{\n\t\t\treturn reals;\n\t\t}\n\t\t\n\t\tdouble imag()const{\n\t\t\treturn imags;\n\t\t}\n\t\t\n\t\tComplex operator+(Complex & c){\n\t\t\tdouble a=(*this).real()+c.real();\n\t\t\tdouble b=(*this).imag()+c.imag();\n\t\t\tComplex res(a,b);\n\t\t\treturn res;\n\t\t}\n\t\t\n\t\tComplex operator-(Complex & c){\n\t\t\tdouble a=(*this).real()-c.real();\n\t\t\tdouble b=(*this).imag()-c.imag();\n\t\t\tComplex res(a,b);\n\t\t\treturn res;\n\t\t}\n\t\t\n\t\tComplex operator*(Complex & c){\n\t\t\tdouble a=(*this).real()*c.real()-(*this).imag()*c.imag();\n\t\t\tdouble b=(*this).real()*c.imag()+(*this).imag()*c.real();\n\t\t\tComplex res(a,b);\n\t\t\treturn res;\n\t\t}\n\t\t\n\t\tComplex operator/(Complex & c){\n\t\t\tdouble m=c.real()*c.real()+c.imag()*c.imag();\n\t\t\tdouble a=((*this).real()*c.real()+(*this).imag()*c.imag())/m;\n\t\t\tdouble b=((*this).imag()*c.real()-(*this).real()*c.imag())/m;\n\t\t\tComplex res(a,b);\n\t\t\treturn res;\n\t\t}\n\t\n\t\tComplex operator-(double m){\n\t\t\tdouble a=(*this).real()-m;\n\t\t\tdouble b=(*this).imag();\n\t\t\tComplex res(a,b);\n\t\t\treturn res;\n\t\t}\n\t\t\n\t\tComplex operator+=(Complex & m){\n\t\t\tComplex t = *this + m;\n    \t\t*this = t;\n    \t\treturn *this;\n\t\t}\n\t\t\n\t\tComplex operator-=(Complex & m){\n\t\t\tComplex t = *this - m;\n    \t\t*this = t;\n    \t\treturn *this;\n\t\t}\n\t\t\n\t\tComplex operator*=(Complex & m){\n\t\t\tComplex t = *this * m;\n    \t\t*this = t;\n    \t\treturn *this;\n\t\t}\n\t\t\n\t\tComplex operator/=(Complex & m){\n\t\t\tComplex t = *this / m;\n    \t\t*this = t;\n    \t\treturn *this;\n\t\t}\n\t\t\n\t\tbool operator==(Complex & m){\n\t\t\tif(((*this).real()==m.real())&&((*this).imag()==m.imag()))return 1;\n\t\t\treturn 0;\n\t\t}\n\t\t\n\t\tbool operator!=(Complex & m){\n\t\t\tif(((*this).real()==m.real())&&((*this).imag()==m.imag()))return 0;\n\t\t\treturn 1;\n\t\t}\n\t\n\t\tComplex(double x){\n\t\treals=x;\n\t\timags=0;\n\t}\n};\n\n\t\t\n\t\tComplex operator+(const Complex & a,const Complex & b){\n\t\t\tdouble x=a.real()+b.real();\n\t\t\tdouble y=a.imag()+b.imag();\n\t\t\tComplex res(x,y);\n\t\t\treturn res;\n\t\t}",
            1593088812.3527148,
            100,
            "# 答案正确"
        ],
        [
            "9.2 (C++)",
            "孙晨景",
            "class I\n{\t\n\tprivate:\n    vector<int> indexes;\n\t\n\tpublic:\n    I(int i1 = -1, int i2=-1, int i3=-1, int i4=-1)\n    {\n\t\tif(i1 != -1)\n            indexes.push_back(i1);\n        if (i2 != -1)\n            indexes.push_back(i2);\n        if (i3 != -1)\n            indexes.push_back(i3);\n        if (i4 != -1)\n            indexes.push_back(i4);\n    };\n\t\n    operator vector<int> ()\n    {\n        return indexes;\n    }\n\n\t\n};",
            1593081069.5152721,
            100,
            "# 答案正确"
        ],
        [
            "9.6 (C++)",
            "孙晨景",
            "class Tensor\n{\n\t private:\n     \tvector <double> data;\n     \tvector <int> sizes;\n\t\n    public:\n    Tensor(int a = -1, int b = -1, int c = -1, int d = -1)\n    {\n        int size = 1;\n        if(a != -1)\n        {\n            sizes.push_back(a);\n            size *= a;\n        }\n        \n        if(b != -1)\n        {\n            sizes.push_back(b);\n            size *= b; \n        }\n        \n        if(c != -1)\n        {\n            sizes.push_back(c);\n            size *= c; \n        }\n        \n        if(d != -1)\n        {\n            sizes.push_back(d);\n            size *= d; \n        }\n        data.resize(size);\n    }\n    double& operator()(int a , int b , int c , int d = 0)\n    {\n        int index = 0;\n        if(sizes.size() == 1)\n        {\n            index = a;\n        }\n        if(sizes.size() == 2)\n        {\n            index = a * sizes[1] + b;\n        }\n        if(sizes.size() == 3)\n        {\n            index = a * sizes[1]* sizes[2] + b * sizes[2] + c;\n        }\n        if(index == 4)\n        {\n            index = a * sizes[1]* sizes[2] * sizes[3] + b *sizes[2] * sizes[3] + c * sizes[3] + d;\n        }\n        return data[index];\n    }\n\n};",
            1593081043.3102517,
            100,
            "# 答案正确"
        ],
        [
            "9.7 (C++)",
            "孙晨景",
            "class Tensor\n{\n    friend istream & operator>>(istream &in, Tensor &A);\n    friend ostream & operator<<(ostream &out, Tensor A);\n\t private:\n    vector<double> data;\n    vector<int>sizes;\n    int total;\n    int dimention;\n\t\n\tpublic:\n    Tensor()\n    {\n        total = 0;\n        dimention = 0;\n    }\n    \n};\n\tistream & operator>>(istream &in, Tensor &A)\n\t{\n    \tin >> A.dimention;\n    \tint total = 1;\n    \tfor(int i = 0; i < A.dimention; i++)\n    \t{\n        int t;\n        in >> t;\n        total *= t; \n        A.sizes.push_back(t);\n    }\n    A.total = total;\n    for(int i = 0; i < total; i++)\n    {\n        double t;\n        in >> t;\n        A.data.push_back(t);\n    }\n    return in;\n\t}\n\tostream & operator<<(ostream &out, Tensor A)\n\t{\n        out << A.dimention << endl;\n        if(A.dimention == 3 )\n\t\t{\n\t\t\tout << A.sizes [0] << \" \" << A.sizes[1] <<\" \"<<A.sizes[2] << endl << endl;\n\t\t\t\tfor(int i = 0; i < A.sizes[0]; i++)\n                {\n\t\t\t\t\tfor (int j = 0; j < A.sizes[1]; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (int k = 0; k < A.sizes[2]; k++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint index = i * A.sizes[1] * A.sizes[2] + j * A.sizes[2] + k;\n\t\t\t\t\t\t\tout << A.data[index] << \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tout << endl;\n\t\t\t\t\t}\n                    out << endl;\n                }\n\t\t}\n\t\tif(A.dimention == 4 )\n\t\t{\n            out << A.sizes [0] << \" \" << A.sizes[1] <<\" \"<<A.sizes[2] <<\" \"<< A.sizes[3] \t<< endl << endl ;\n            for(int i = 0; i < A.sizes[0] * A.sizes[1]; i++)\n                {\n\t\t\t\t\tfor (int j = 0; j < A.sizes[2]; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (int k = 0; k < A.sizes[3]; k++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint index =  i * A.sizes[2] * A.sizes[3] + j * A.sizes[3] + k; \n\t\t\t\t\t\t\tout << A.data[index] << \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tout << endl;\n\t\t\t\t\t}\n                    out << endl;\n                }\n\t\t}\n    return out;\n\t}\n",
            1593089026.3822289,
            100,
            "# 答案正确"
        ],
        [
            "10.2 (C++)",
            "孙晨景",
            "catch(NonPositiveValueException & ex){\n\tcout<<\"caught: NonPositiveValueException\"<<endl;\n}\ncatch(out_of_range & ex){\n\tcout<<\"caught: out_of_range\"<<endl;\n}",
            1593656357.4452195,
            100,
            "# 答案正确"
        ],
        [
            "10.1 (C++)",
            "孙晨景",
            "#include <iostream>\n#include <stdexcept>\n#include <vector>\nusing namespace std;\nclass MatrixSizesDoNotMatchException : public out_of_range{\n\tpublic:\n\tMatrixSizesDoNotMatchException() : out_of_range(\"out_of_range\") {}\n};\n\tdouble Matrix::get(int row, int column) const{\n\t\tif((row>rows)||(column>columns)){\n\t\t\tthrow out_of_range(\"wrong\");\n\t\t}\n\t\treturn elements[row*column-1];\n\t}\n\t\n\tvoid Matrix::set(int row, int column, double value){\n\t\telements[row*column-1]=value;\n\t}\n\t\n\tMatrix Matrix::operator + (const Matrix & matrix2) const{\n\t\tif((this->rows!=matrix2.size(1))||(this->columns!=matrix2.size(2))){\n\t\t\tthrow MatrixSizesDoNotMatchException();\n\t\t\t}\n\t\tvector<double> res;\n\t\tMatrix temp(rows,columns);\n\t\tfor (int i = 0; i < matrix2.size(1); ++ i) {\n\t\tfor (int j = 0; j < matrix2.size(2); ++ j) {\n\t\t\tres[i*matrix2.size(2)+j]=(*this).get(i+1,j+1)+matrix2.get(i+1,j+1);\n\t\t\ttemp.set(i+1,j+1,res[i*matrix2.size(2)+j]);\n\t\t}\n\t\treturn temp;\n\t}\n\t}",
            1593678299.557861,
            100,
            "# 答案正确"
        ],
        [
            "2020-07-09 LAB",
            "孙晨景",
            "#include<iostream>\nusing namespace std;\nclass Integer{\n\tpublic:\n\t\tint a;\n\t\tstatic int b;\n\t\n\t\n\t\tInteger(){\n\t\t\ta=0;\n\t\t}\n\t\t\n\t\tint get(){\n\t\t\treturn a;\n\t\t}\n\t\t\n\t\tInteger(int m){\n\t\t\ta=m;\n\t\t}\n\t\t\n\t\tstatic void increase_all(int m){\n\t\t\tb=m;\n\t\t}\n\t\t\n\t\tstatic void increase_all(Integer m){\n\t\t\tb=m.a;\n\t\t}\n};\n\tint Integer::b=0;\n\t\n\tistream & operator>>(istream & is, Integer & c){\n\t\tint b;\n\t\tis>>b;\n\t\tInteger temp(b);\n\t\tc=temp;\n\t\treturn is;\n\t}\n\t\n\tostream & operator<<(ostream & os, Integer & c){\n\t\tc.a+=Integer::b;\n    os << c.get(); \n    return os;\n\t}",
            1594263630.6102011,
            100,
            "# 答案正确"
        ],
        [
            "15.1 (C++)",
            "孙晨景",
            "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nclass Table {\nprivate:\n    int headsize;\n    int size;\n    vector<string> head;\n    vector<vector<string>> element;\n\npublic:\n    Table () {\n        headsize = 0;\n        size = 0;\n    }\n    void addCol(string m) {\n        ++ headsize;\n        head.push_back(m);\n    }\n    vector<string> & operator [] (int n) {\n        size++;\n        element.resize(n+1);\n        return element[n];\n    }\n    string json() const{\n        string s = \"}\";\n        cout<<\"{\"<<endl;\n        cout<<\"    headers: [\";\n        for (int i = 0; i < headsize; ++i) \n            cout<<\"'\"<<head[i]<<\"',\";\n        cout<<\"],\"<<endl;\n        cout<<\"    rows: [\"<<endl;\n        \n        for (int i = 0; i < size; ++i) {\n            cout<<\"        [\";\n            for (int j = 0; j < headsize; ++j)\n                cout<<\"'\"<<element[i][j]<<\"',\";\n            cout<<\"],\"<<endl;\n        }\n        cout<<\"    ],\"<<endl;\n        return s;\n    }\n};",
            1594281476.9645827,
            100,
            "# 答案正确"
        ],
        [
            "A.2 (C++)",
            "孙晨景",
            "#include<iostream>\nusing namespace std;\ntemplate <typename E>\nvoid LinkedList<E>::removeAll(const E & e){\n\tint i=0;\n\twhile(i<_size){\n\t\tif((*this).get(i)==e){\n\t\t\tremove(i);\n\t\t}\n\t\telse ++i;\n\t}\n}",
            1594867416.4461906,
            100,
            "# 答案正确"
        ],
        [
            "A.1 (C++)",
            "孙晨景",
            "void addFirst(const E & e)\n    {\n        Node<E> * node = new Node<E>;\n        node -> element = e;\n        node -> update_prev_and_next_node(nullptr, head);\n        if (head != nullptr) head -> update_prev_node(nullptr, node);\n        head = node;\n        if (tail == nullptr) tail = node;\n        ++_size;\n    }\n\n    void addLast(const E & e)\n    {\n        Node<E> * node = new Node<E>;\n        node -> element = e;\n        node -> update_prev_and_next_node(tail, nullptr);\n        if (tail != nullptr) tail -> update_next_node(nullptr, node);\n        tail = node;\n        if (head == nullptr) head = node;\n        ++_size;\n    }\n\n  void remove (int index) {\n\t\t\n\t\tif (index < 0 || index >= _size)\n        throw NotSuchElementException();\n\n        Node<E> * node =  get_node(index);\n        Node<E> * nextofnode;\n\t\t\tNode<E> * preofnode;\n        if(index == _size - 1)\n        {\n\t\t\tnextofnode = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextofnode = get_node( index + 1 );\n\t\t}\n        if (index == 0)\n\t\t{\n\t\t\tpreofnode = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpreofnode = node->prev_node(nextofnode);\n\t\t}\n        if(preofnode != 0)\n        {\n            preofnode->update_next_node(node,nextofnode );\n        }\n        if(nextofnode != 0)\n        {\n            nextofnode->update_prev_node(node, preofnode);\n        }\n        if(index == 0)\n        {\n            head = nextofnode;\n        }\n        if(index == _size - 1)\n        {\n            tail = preofnode;\n        }\n        delete node;\n\t\t-- _size;\n\t}\n\n\n    void removeFirst()\n    {\n        remove(0);\n    }\n\n    void removeLast()\n    {\n        remove(_size - 1);\n    }\n\n   void removeFirstOccurrence(const E & e) {\n\t\tint index = indexOf(e);\n\t\tif (index == -1)\n\t\t\tthrow NotSuchElementException();\n\t\tremove(index);\n\t}\n\n    E & get(int index)\n    {\n        Node<E> * node = get_node(index);\n        return node -> element;\n    }\n\n\tint indexOf(const E & e) const \n    {\n\t\t\n            Node<E> * node = head;\n            Node<E> * preofnow = 0;\n            Node<E> * temp = 0;\n\t\t\tI(i, _size)\n            {\n                if(node->element == e)\n                return i;\n\n                temp = node;\n                node = node -> next_node(preofnow);\n                preofnow = temp;\n            }\n            return EOF;\n\t}\nprivate:\n   \tNode<E> * get_node(int index) const \n\t{\n\t\tif (index < 0 || index >= _size) \n\t\t\tthrow NotSuchElementException();\n\t\tif (index < _size / 2) \n        {\n\t\t\tNode<E> * node = head;\n            Node<E> * preofnow = 0;\n            Node<E> * temp = 0;\n\t\t\tI(i, index)\n            {\n                temp = node;\n                node = node -> next_node(preofnow);\n                preofnow = temp;\n            }\n\t\t\treturn node;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tNode<E> * node = tail;\n            Node<E> * nextofnow = 0;\n            Node<E> * temp =0;\n\t\t\tI(i, (_size - 1 - index) )\n            {\n                temp = node;\n                node = node -> prev_node(nextofnow);\n                nextofnow = node;\n            }\n\t\t\treturn node;\n\t\t}\n\t}",
            1594899456.365835,
            100,
            "# 答案正确"
        ]
    ],
    "table_name": "答案"
}