{
    "__update_time__": 1608089833.6274762,
    "field_names": [
        "题目名",
        "问题",
        "主程序",
        "答案",
        "评语",
        "开始时间",
        "截止时间",
        "分数",
        "提交时间"
    ],
    "field_types": [
        "text",
        "text",
        "text",
        "text",
        "text",
        "time",
        "time",
        "number",
        "time"
    ],
    "rows": [
        [
            "9.2 Subsequence",
            "<h3>Longest common subsequence problem (最长公共字串)</h3>\n\n如果字符串一的所有字符按其在字符串中的顺序出现在另外一个字符串二中，则字符串一称之为字符串二的子串。注意，并不要求子串（字符串一）的字符必须连续出现在字符串二中。请编写一个函数，输入两个字符串，求它们的最长公共子序列，并打印出最长公共子序列。<br><br>\n\n例如：输入两个字符串BDCABA和ABCBDAB，字符串BCBA和BDAB都是是它们的最长公共子序列，则输出它们的长度4。<br><br>\n\n当然这里，我们也是要先找递归的。假设我的两个sequence，一个是X，长度为n；另一个是Y，长度为m。\n现在假设我有两个point，一个是i，指在X的最后一个元素上，另一个是j，指在Y的最后一个元素上。我们的递归应该是分三种情况的。\n<ol>\n<li>如果X[i] == Y[j] 那么LCS(X[0:i],Y[0:j]) = LCS(X[0:i-1],Y[0:j-1]) + 1<br>\n这个很明显，因为发现了一组公共元素，就看剩下的有多少公共元素。</li>\n\n<li>如果X[i] != Y[j] 那么 LCS(X[0:i],Y[0:j]) = max( LCS(X[0:i-1], Y[0:j]), LCS(X[0:i], Y[0:j-1]) )<br>\n这个其实也很容易相同，就是如果发现不同的，就去掉X或Y的最后一个，然后和另一个完整的比较，这样去掉X还是Y的最后一个，就有两种可能，所以就是要找中间max的一个。</li>\n\n<li>如果 i=0 或者 j=0，就return 0<br>\n因为有一个sequence已经完了。</li>\n\n</ol>\n\n<b><u>EXAMPLE INPUT</u></b>\n<pre>\nBDCABA\nABCBDAB\n</pre>\n\n<b><u>EXAMPLE OUTPUT</u></b>\n<pre>\n4\n</pre>",
            "#include \"source.c\"\n\n#include <stdio.h>\n\nint main() {\n\tchar text1[100];\n\tchar text2[100];\n\tscanf(\"%s\", text1);\n\tscanf(\"%s\", text2);\n\t\n\tprintf(\"%d\", LCS(text1, text2));\n}",
            "int max(int x, int y){\n\tif(x>y){return x;}\n\telse return y;\n}\n\nint  LCS(char * X,char * Y){\n\tint a ,b;\n\tfor (int i = 0; X!='\\0' ; ++ i){a=i;} \n\tfor (int i = 0; Y!='\\0' ; ++ i){b=i;} \n   for (; a>0 ; -- a) {\n\t   for (; b>0 ; --b) {\n\t\t   if (X[a] == Y[b]){LCS(X[a],Y[b]) = LCS(X[a-1],Y[b-1]) + 1}\n\t\t   if(X[a] != Y[b] )  LCS(X[a],Y[b]) = max( LCS(X[a-1], Y[b]), LCS(X[a], Y[b-1]) );\n\t\t  if (X==0||Y==0){return 0;}\n   }\n\t}\n\treturn LCS(X[a],Y[b]);\n}\n",
            "In file included from main.c:1:0:\nsource.c: In function ‘LCS’:\nsource.c:11:28: warning: passing argument 1 of ‘LCS’ makes pointer from integer without a cast [-Wint-conversion]\n      if (X[i] == Y[j]){LCS(X[i],Y[j]) = LCS(X[i+1],Y[j+1]) + 1}\n                            ^\nsource.c:6:6: note: expected ‘char *’ but argument is of type ‘char’\n int  LCS(char * X,char * Y){\n      ^~~\nsource.c:11:33: warning: passing argument 2 of ‘LCS’ makes pointer from integer without a cast [-Wint-conversion]\n      if (X[i] == Y[j]){LCS(X[i],Y[j]) = LCS(X[i+1],Y[j+1]) + 1}\n                                 ^\nsource.c:6:6: note: expected ‘char *’ but argument is of type ‘char’\n int  LCS(char * X,char * Y){\n      ^~~\nsource.c:11:45: warning: passing argument 1 of ‘LCS’ makes pointer from integer without a cast [-Wint-conversion]\n      if (X[i] == Y[j]){LCS(X[i],Y[j]) = LCS(X[i+1],Y[j+1]) + 1}\n                                             ^\nsource.c:6:6: note: expected ‘char *’ but argument is of type ‘char’\n int  LCS(char * X,char * Y){\n      ^~~\nsource.c:11:52: warning: passing argument 2 of ‘LCS’ makes pointer from integer without a cast [-Wint-conversion]\n      if (X[i] == Y[j]){LCS(X[i],Y[j]) = LCS(X[i+1],Y[j+1]) + 1}\n                                                    ^\nsource.c:6:6: note: expected ‘char *’ but argument is of type ‘char’\n int  LCS(char * X,char * Y){\n      ^~~\nsource.c:11:39: error: lvalue required as left operand of assignment\n      if (X[i] == Y[j]){LCS(X[i],Y[j]) = LCS(X[i+1],Y[j+1]) + 1}\n                                       ^\nsource.c:11:63: error: expected ‘;’ before ‘}’ token\n      if (X[i] == Y[j]){LCS(X[i],Y[j]) = LCS(X[i+1],Y[j+1]) + 1}\n                                                               ^\nsource.c:12:29: warning: passing argument 1 of ‘LCS’ makes pointer from integer without a cast [-Wint-conversion]\n      if(X[i] != Y[j] )  LCS(X[i],Y[j]) = max( LCS(X[i+1], Y[j]), LCS(X[i], Y[j+1]) );\n                             ^\nsource.c:6:6: note: expected ‘char *’ but argument is of type ‘char’\n int  LCS(char * X,char * Y){\n      ^~~\nsource.c:12:34: warning: passing argument 2 of ‘LCS’ makes pointer from integer without a cast [-Wint-conversion]\n      if(X[i] != Y[j] )  LCS(X[i],Y[j]) = max( LCS(X[i+1], Y[j]), LCS(X[i], Y[j+1]) );\n                                  ^\nsource.c:6:6: note: expected ‘char *’ but argument is of type ‘char’\n int  LCS(char * X,char * Y){\n      ^~~\nsource.c:12:51: warning: passing argument 1 of ‘LCS’ makes pointer from integer without a cast [-Wint-conversion]\n      if(X[i] != Y[j] )  LCS(X[i],Y[j]) = max( LCS(X[i+1], Y[j]), LCS(X[i], Y[j+1]) );\n                                                   ^\nsource.c:6:6: note: expected ‘char *’ but argument is of type ‘char’\n int  LCS(char * X,char * Y){\n      ^~~\nsource.c:12:59: warning: passing argument 2 of ‘LCS’ makes pointer from integer without a cast [-Wint-conversion]\n      if(X[i] != Y[j] )  LCS(X[i],Y[j]) = max( LCS(X[i+1], Y[j]), LCS(X[i], Y[j+1]) );\n                                                           ^\nsource.c:6:6: note: expected ‘char *’ but argument is of type ‘char’\n int  LCS(char * X,char * Y){\n      ^~~\nsource.c:12:70: warning: passing argument 1 of ‘LCS’ makes pointer from integer without a cast [-Wint-conversion]\n      if(X[i] != Y[j] )  LCS(X[i],Y[j]) = max( LCS(X[i+1], Y[j]), LCS(X[i], Y[j+1]) );\n                                                                      ^\nsource.c:6:6: note: expected ‘char *’ but argument is of type ‘char’\n int  LCS(char * X,char * Y){\n      ^~~\nsource.c:12:76: warning: passing argument 2 of ‘LCS’ makes pointer from integer without a cast [-Wint-conversion]\n      if(X[i] != Y[j] )  LCS(X[i],Y[j]) = max( LCS(X[i+1], Y[j]), LCS(X[i], Y[j+1]) );\n                                                                            ^\nsource.c:6:6: note: expected ‘char *’ but argument is of type ‘char’\n int  LCS(char * X,char * Y){\n      ^~~\nsource.c:12:40: error: lvalue required as left operand of assignment\n      if(X[i] != Y[j] )  LCS(X[i],Y[j]) = max( LCS(X[i+1], Y[j]), LCS(X[i], Y[j+1]) );\n                                        ^\nsource.c:16:13: warning: passing argument 1 of ‘LCS’ makes pointer from integer without a cast [-Wint-conversion]\n  return LCS(X[i],Y[j]);\n             ^\nsource.c:6:6: note: expected ‘char *’ but argument is of type ‘char’\n int  LCS(char * X,char * Y){\n      ^~~\nsource.c:16:18: warning: passing argument 2 of ‘LCS’ makes pointer from integer without a cast [-Wint-conversion]\n  return LCS(X[i],Y[j]);\n                  ^\nsource.c:6:6: note: expected ‘char *’ but argument is of type ‘char’\n int  LCS(char * X,char * Y){\n      ^~~\n",
            1607654400,
            1608210000,
            0,
            1608089231.640576
        ]
    ]
}