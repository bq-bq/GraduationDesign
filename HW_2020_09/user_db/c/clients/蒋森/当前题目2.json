{
    "__update_time__": 1607859802.3593004,
    "field_names": [
        "题目名",
        "问题",
        "主程序",
        "答案",
        "评语",
        "开始时间",
        "截止时间",
        "分数",
        "提交时间"
    ],
    "field_types": [
        "text",
        "text",
        "text",
        "text",
        "text",
        "time",
        "time",
        "number",
        "time"
    ],
    "rows": [
        [
            "9.3 Subsequence 2",
            "<h3>Longest common subsequence problem (最长公共字串)</h3>\n\n如果字符串一的所有字符按其在字符串中的顺序出现在另外一个字符串二中，则字符串一称之为字符串二的子串。注意，并不要求子串（字符串一）的字符必须连续出现在字符串二中。请编写一个函数，输入两个字符串，求它们的最长公共子序列，并打印出最长公共子序列。<br><br>\n\n例如：输入两个字符串BDCABA和ABCBDAB，字符串BCBA和BDAB都是是它们的最长公共子序列，则输出BDAB。<br><br>\n\n当然这里，我们也是要先找递归的。假设我的两个sequence，一个是X，长度为n；另一个是Y，长度为m。\n现在假设我有两个point，一个是i，指在X的最后一个元素上，另一个是j，指在Y的最后一个元素上。我们的递归应该是分三种情况的。\n<ol>\n<li>如果X[i] == Y[j] 那么LCS(X[i],Y[j]) = X[i] + LCS(X[i-1],Y[j-1])<br>\n这个很明显，因为发现了一组公共元素，就看剩下的有多少公共元素。</li>\n\n<li>如果X[i] != Y[j] 那么 LCS(X[i],Y[j]) = max_len( LCS(X[i-1], Y[j]), LCS(X[i], Y[j-1]) )<br>\n这个其实也很容易相同，就是如果发现不同的，就去掉X或Y的最后一个，然后和另一个完整的比较，这样去掉X还是Y的最后一个，就有两种可能，所以就是要找中间max的一个。</li>\n\n<li>如果 i=0 或者 j=0，就return ''<br>\n因为有一个sequence已经完了。</li>\n\n</ol>\n\n<b><u>EXAMPLE INPUT</u></b>\n<pre>\nBDCABA\nABCBDAB\n</pre>\n\n<b><u>EXAMPLE OUTPUT</u></b>\n<pre>\nBDAB\n</pre>",
            "struct Result\n{\n\tchar LCS[100];\n};\n\n#include \"source.c\"\n\n#include <stdio.h>\n\nint main() {\n\tchar text1[100];\n\tchar text2[100];\n\tscanf(\"%s\", text1);\n\tscanf(\"%s\", text2);\n\t\n\tstruct Result result = LCS(text1, text2);\n\tprintf(\"%s\", result.LCS);\n}",
            "#include <string.h>\n#define MAX(x , y) (x > y ? x : y)\nint LENGTH(char text1[], char text2[]){\n\tint x = strlen(text1) - 1;\n\tint y = strlen(text2) - 1;\n\tint sum = 0;\n\tif (strlen(text1) == 0 || strlen(text2) == 0)\n\t\treturn 0;\n\tif (text1[x] == text2[y]){\n\t\tchar text3[100];\n\t\tchar text4[100];\n\t\tstrcpy(text3,text1);\n\t\tstrcpy(text4,text2);\n\t\ttext3[x] = '\\0';\n\t\ttext4[y] = '\\0';\n\t\tsum =LENGTH(text3,text4) + 1;\n\t}\n\tif (text1[x] != text2[y]){\n\t\tchar text3[100];\n\t\tchar text4[100];\n\t\tstrcpy(text3,text1);\n\t\tstrcpy(text4,text2);\n\t\ttext3[x] = '\\0';\n\t\ttext4[y] = '\\0';\n\t\tsum = MAX( LENGTH(text1,text4), LENGTH(text3,text2));\n\t}\nreturn sum;\t\t\n}\n#include<stdio.h>\n#include <string.h>\n#define MAX(x , y) (x > y ? x : y)\nint cnt = 0;\nint judge = 0;\nint judge2 = 0;\nstruct Result result;\nstruct Result LCS(char text1[], char text2[]){\n\tjudge2 = 0;\n\tint length = LENGTH(text1,text2);\n\tif (judge == 0)\n\t\tresult.LCS[length] = '\\0';\n\tjudge ++;\n\tcnt = length - 1;\n\tint x = strlen(text1) - 1;\n\tint y = strlen(text2) - 1;\n\tif (strlen(text1) == 0 || strlen(text2) == 0)\n\t\treturn result;\n\tif (text1[x] == text2[y]){\n\t\tjudge2 = 1;\n\t\tchar text3[100];\n\t\tchar text4[100];\n\t\tstrcpy(text3,text1);\n\t\tstrcpy(text4,text2);\n\t\tresult.LCS[cnt] =text1[x];\n\t\ttext3[x] = '\\0';\n\t\ttext4[y] = '\\0';\n\t\tresult = LCS(text3,text4);\n\t}\n\telse{\n\t\tchar text3[100];\n\t\tchar text4[100];\n\t\tstrcpy(text3,text1);\n\t\tstrcpy(text4,text2);\n\t\ttext3[x] = '\\0';\n\t\ttext4[y] = '\\0';\n\t\t if ( LENGTH(text1,text4) > LENGTH(text3,text2))\n\t\t\t result = LCS(text1,text4);\n\t   \telse \n\t\t\t result = LCS(text3,text2);\n\t}\n\treturn result;\t\t\n\n}",
            "# 答案正确",
            1607654400,
            1608210000,
            100,
            1607859800.5953531
        ]
    ]
}