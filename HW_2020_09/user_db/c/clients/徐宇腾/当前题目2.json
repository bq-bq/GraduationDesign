{
    "__update_time__": 1608096314.237851,
    "field_names": [
        "题目名",
        "问题",
        "主程序",
        "答案",
        "评语",
        "开始时间",
        "截止时间",
        "分数",
        "提交时间"
    ],
    "field_types": [
        "text",
        "text",
        "text",
        "text",
        "text",
        "time",
        "time",
        "number",
        "time"
    ],
    "rows": [
        [
            "9.4 Matrix multiplication",
            "矩阵链相乘，求最小的乘法次数<br>\n<br>\n\nGiven a sequence of matrices, we want to find the most efficient way to multiply these matrices together. The problem is not actually to perform the multiplications, but merely to decide in which order to perform the multiplications.<br>\n\nWe have many options because matrix multiplication is associative. In other words, no matter how we parenthesize the product, the result will be the same. For example, if we had four matrices A, B, C, and D, we would have:<br>\n(ABC)D = (AB)(CD) = A(BCD) = A(BC)D = ....<br>\n<br>\n\nHowever, the order in which we parenthesize the product affects the number of simple arithmetic operations needed to compute the product, or the efficiency. For example, suppose A is a 10 × 30 matrix, B is a 30 × 5 matrix, and C is a 5 × 60 matrix. Then,<br>\n(AB)C = (10×30×5) + (10×5×60) = 1500 + 3000 = 4500 operations<br>\nA(BC) = (30×5×60) + (10×30×60) = 9000 + 18000 = 27000 operations.<br>\n<br>\n\nClearly the first method is the more efficient. Now that we have identified the problem, how do we determine the optimal parenthesization of a product of n matrices? We could go through each possible parenthesization (brute force), but this would require time exponential in the number of matrices, which is very slow and impractical for large n. The solution, as we will see, is to break up the problem into a set of related subproblems. By solving subproblems one time and reusing these solutions many times, we can drastically reduce the time required. This is known as dynamic programming.<br>\n<br>\n\n先形式化一下我们的input，矩阵链{A<sub>1</sub>，A<sub>2</sub>，...，A<sub>n</sub>}，其中对于矩阵A<sub>i</sub>，它是一个P<sub>i-1</sub> * P<sub>i</sub>的矩阵。m[i,j] 表示{A<sub>i</sub>,A<sub>i+1</sub>,..., A<sub>j</sub>}相乘的最小的乘法次数<br>\n<br>\n\n这个递归的思路其实和第一个问题有点类似，先看怎么递归。<br>\n<br>\n\n首先我们要找出一个点来分隔这个链，相当于这个点把这个问题转换为了 该点前一部分的矩阵链的最小的乘法次数问题和该点后一部分的矩阵链的最小的乘法次数问题。<br>\n<br>\n\n但是这个点怎么找呢？和第一个例子一样，我们直接遍历的来找。<br>\n<br>\n\n所以我们的递归应该是这样的：<br>\nm[i,j] = min<sub>i&lt;=k&lt;=j</sub> (m[i,k] + m[k+1,j] + P<sub>i-1</sub>*P<sub>k</sub>*P<sub>j</sub>)<br>\n<br>\n\n当然，这是对于i!=j的情况，当i==j的时候呢？显然 是0了，因为我们的矩阵链就一个矩阵。<br>\n<br>\n\n<b><u>EXAMPLE INPUT</u></b>\n<pre>9     6    10    11     8     4     5     7    12    13\n</pre>\n\n<b><u>EXAMPLE OUTPUT</u></b>\n<pre>2816\n</pre>",
            "#include \"source.c\"\n#include <stdio.h>\n\nint main() {\n\tint dimensions[10];\n\tfor (int i = 0; i < 10; ++ i) {\n\t\tscanf(\"%d\", &dimensions[i]);\n\t}\n\tprintf(\"%d\", getMultiplications(9, dimensions));\n}",
            "int m[7][7];\nint s[7][7];\nint getMultiplications(9,int dimensions[])\n{\n    int n=7-1;\n    int i,l,j,k,q;\n    for(i=1;i<= n;i++)\n      m[i][i]=0;\n           //上面两句语句是对矩阵m[i][j]的对角线初始化； \n   //不要以为后面有了对矩阵更加好的初始化，从而不必需要这语句；这个语句是如果矩阵是一个，则相乘数目为0； \n    for(l=2;l<= n;l++)\n    {\n       for(i=1;i<= n-l+1;i++)\n       {\n          j=i+l-1;\n          m[i][j]=1000000;  //由于是计算矩阵的运算最小量，从而对它的初始化取一个相对比较大的值；从而不影响后面的计算； \n          for(k=i;k<= j-1;k++)   //对矩阵的上三角形进行分析； \n           {\n             q=m[i][k]+m[k+1][j]+dimensions[i-1]*dimensions[k]*dimensions[j];\n              if(q)\n              {\n                 m[i][j]=q;     //矩阵计算进行的最小运算次数的保存； \n                 s[i][j]=k;     //对矩阵最小运算的坐标记住方便，括号的标记保存； \n              }\n       }\n    }\n}\n}\n",
            "In file included from main.c:1:0:\nsource.c: In function ‘getMultiplications’:\nsource.c:19:34: error: ‘dimensions’ undeclared (first use in this function)\n              q=m[i][k]+m[k+1][j]+dimensions[i-1]*dimensions[k]*dimensions[j];\n                                  ^~~~~~~~~~\nsource.c:19:34: note: each undeclared identifier is reported only once for each function it appears in\n",
            1607654400,
            1608210000,
            50,
            1608096229.1117258
        ]
    ]
}