{
    "__update_time__": 1608086667.6080608,
    "field_names": [
        "题目名",
        "问题",
        "主程序",
        "答案",
        "评语",
        "开始时间",
        "截止时间",
        "分数",
        "提交时间"
    ],
    "field_types": [
        "text",
        "text",
        "text",
        "text",
        "text",
        "time",
        "time",
        "number",
        "time"
    ],
    "rows": [
        [
            "9.3 Subsequence 2",
            "<h3>Longest common subsequence problem (最长公共字串)</h3>\n\n如果字符串一的所有字符按其在字符串中的顺序出现在另外一个字符串二中，则字符串一称之为字符串二的子串。注意，并不要求子串（字符串一）的字符必须连续出现在字符串二中。请编写一个函数，输入两个字符串，求它们的最长公共子序列，并打印出最长公共子序列。<br><br>\n\n例如：输入两个字符串BDCABA和ABCBDAB，字符串BCBA和BDAB都是是它们的最长公共子序列，则输出BDAB。<br><br>\n\n当然这里，我们也是要先找递归的。假设我的两个sequence，一个是X，长度为n；另一个是Y，长度为m。\n现在假设我有两个point，一个是i，指在X的最后一个元素上，另一个是j，指在Y的最后一个元素上。我们的递归应该是分三种情况的。\n<ol>\n<li>如果X[i] == Y[j] 那么LCS(X[i],Y[j]) = X[i] + LCS(X[i-1],Y[j-1])<br>\n这个很明显，因为发现了一组公共元素，就看剩下的有多少公共元素。</li>\n\n<li>如果X[i] != Y[j] 那么 LCS(X[i],Y[j]) = max_len( LCS(X[i-1], Y[j]), LCS(X[i], Y[j-1]) )<br>\n这个其实也很容易相同，就是如果发现不同的，就去掉X或Y的最后一个，然后和另一个完整的比较，这样去掉X还是Y的最后一个，就有两种可能，所以就是要找中间max的一个。</li>\n\n<li>如果 i=0 或者 j=0，就return ''<br>\n因为有一个sequence已经完了。</li>\n\n</ol>\n\n<b><u>EXAMPLE INPUT</u></b>\n<pre>\nBDCABA\nABCBDAB\n</pre>\n\n<b><u>EXAMPLE OUTPUT</u></b>\n<pre>\nBDAB\n</pre>",
            "struct Result\n{\n\tchar LCS[100];\n};\n\n#include \"source.c\"\n\n#include <stdio.h>\n\nint main() {\n\tchar text1[100];\n\tchar text2[100];\n\tscanf(\"%s\", text1);\n\tscanf(\"%s\", text2);\n\t\n\tstruct Result result = LCS(text1, text2);\n\tprintf(\"%s\", result.LCS);\n}",
            "#include <string.h>\nstruct Result LCS(char *str1, char *str2)\n{\n    //int char1[size_c][size_c] = {0};\n    //int char2[size_c][size_c] = {0};\n\n    struct Result a;\n\n    int m = strlen(str1);\n    int n = strlen(str2); //求出两个数组的边界长度\n    int char1[m][n];\n    int char2[m][n];\n\n    for (int i = 0; i < 100; i++)\n        a.LCS[i] = 0;\n    int i, j;\n    int b = 0;\n    for (i = 0; i <= m; i++)\n    {\n        char1[i][0] = 0;\n        char2[i][0] = 0;\n    }\n\n    for (j = 0; j <= n; j++) //初始化边界条件\n    {\n        char1[0][j] = 0;\n        char2[0][j] = 0;\n    }\n\n    for (i = 1; i <= m; i++)\n    {\n        for (j = 1; j <= n; j++)\n        {\n            if (str1[i - 1] == str2[j - 1])\n            // 这里使用i-1以及j-1是由于数组的下标从0开始\n            //另一种实现方式是逆序实现，对于路径的确定更方便\n            {\n                char1[i][j] = char1[i - 1][j - 1] + 1;\n                char2[i][j] = 0;\n            }\n            else if (char1[i - 1][j] >= char1[i][j - 1]) //在j循环时若字符串不等\n            {                                            // 则只用判断char中的元素\n                char1[i][j] = char1[i - 1][j];\n                char2[i][j] = 1;\n            }\n            else\n            {\n                char1[i][j] = char1[i][j - 1];\n                char2[i][j] = -1;\n            }\n        }\n    }\n    while (i > 0 || j > 0)\n    {\n        if (char2[i][j] == 0)\n        {\n            a.LCS[b++] = str1[i - 1];\n            i--;\n            j--;\n        }\n        else if(char2[i][j]==1)\n            i--;\n            else\n                j--;\n    }\n    \n    return a; //递归的最终位存储的数字就是LCS长度\n\n}\n\n",
            "# 答案不正确\n\n# 随机输入:\nBBBFCABACCF\nBCBFAABCEFD\n\n\n# 参考答案:\nBBFABCF\n\n# 我的答案:\nFCCABACFBBB",
            1607654400,
            1608210000,
            100,
            1607784436.9280095
        ]
    ]
}