{
    "__update_time__": 1607672042.4573905,
    "field_names": [
        "题目名",
        "问题",
        "主程序",
        "答案",
        "评语",
        "开始时间",
        "截止时间",
        "分数",
        "提交时间"
    ],
    "field_types": [
        "text",
        "text",
        "text",
        "text",
        "text",
        "time",
        "time",
        "number",
        "time"
    ],
    "rows": [
        [
            "9.1 Rod cutting",
            "Input：有一个长n米的木头，和一个price table，table如下：<br>\n\n长度 i     1　　2　　3　　4　　5　　6 。。。<br>\n\n价格 Pi　1　　5　　8　　9　　10　　17。。。<br>\n<br>\n\n意思很明显，就是长度为1米的木头可以买1元，长5米的可以卖10元，依次类推<br>\n\nOutput：找一个cut的方法，使最后赚的钱最多。<br>\n\n很显然，这个递归的主要思路是我切一刀之后，分成两段，一段我按table的价钱卖了，另一段我当成一个新的子问题，继续作为我的函数的新的参数，这样不就递归了吗？但是问题是这一刀怎么切，没错，我们就来个找最大值，即max<sub>i =1 to n</sub> Pi + Cut(n-i).<br>\n<br>\n\n<b><u>EXAMPLE INPUT</u></b>\n<pre>1 2 3 4 5 6\n1 5 8 9 10 17\n\n17 16 15 14 13 12 11 10 9 8\n</pre>\n\n<b><u>EXAMPLE OUTPUT</u></b>\n<pre>47\n44\n42\n39\n35\n34\n30\n27\n25\n22\n</pre>",
            "#include \"source.c\"\n\n#include <stdio.h>\n\nvoid readPriceTable(int prices[][2], int priceCount) {\n\tfor (int i = 0; i < priceCount; ++ i) {\n\t\tscanf(\"%d\", &prices[i][0]);\n\t}\n\tfor (int i = 0; i < priceCount; ++ i) {\n\t\tscanf(\"%d\", &prices[i][1]);\n\t}\n}\n\nvoid test(int prices[][2], int priceCount) {\n\tint rodLength;\n\tscanf(\"%d\", &rodLength);\n\tprintf(\"%d\\n\", getMaxCuttingPrice(prices, priceCount, rodLength));\n}\n\nint main() {\n\tint prices[6][2];\n\treadPriceTable(prices, 6);\n\t\n\tfor (int i = 0; i < 10; ++ i) {\n\t\ttest(prices, 6);\n\t}\n}",
            "\nint max_price[10000]={0};\nint getMaxCuttingPrice(int prices[][2],int priceCount,int rodLength){\n\tif (max_price[rodLength]>0){\n\t\treturn maxprice[rodLength];\n\t}\n\tint MaxPrice=(rodLength<=6? prices[rodLength-1][1]:0);\n\tfor(int i=0;i<rodLength-1;++i){\n\t\tint first=i+1;\n\t\tint prices=getMaxCuttingPrice( prices,priceCount,first)+getMaxCuttingPrice( prices , priceCount ,rodLength-first);\n\t\tif(MaxPrice<prices) MaxPrice=prices;\n\t}\n\tmax_price[rodLength]=MaxPrice;\n\treturn MaxPrice;\n}/*\nint max_price_memory[10000]={0};\nint getMaxCuttingPrice( int prices[][2],int priceCount,int rodLength){ //价目表，价格类，长度\n\t\tif (max_price_memory[rodLength]>0)\n\t\treturn max_price_memory[rodLength];\n\tint cur_max_price=(rodLength<=6?prices[rodLength-1][1]:0);\n\tfor (int i = 0; i <rodLength-1 ; ++ i)\n\t{\n\t\tint first_cut=i+1;\n\t\tint price=getMaxCuttingPrice(prices,priceCount,first_cut)+getMaxCuttingPrice(prices,priceCount,rodLength-first_cut);\n\t\tcur_max_price=(price>cur_max_price?price:cur_max_price);\n\t\t\n\t}\n\tmax_price_memory[rodLength]=cur_max_price;\n\treturn cur_max_price;\n\n}*/",
            "In file included from main.c:1:0:\nsource.c: In function ‘getMaxCuttingPrice’:\nsource.c:5:10: error: ‘maxprice’ undeclared (first use in this function); did you mean ‘max_price’?\n   return maxprice[rodLength];\n          ^~~~~~~~\n          max_price\nsource.c:5:10: note: each undeclared identifier is reported only once for each function it appears in\nsource.c:10:34: warning: passing argument 1 of ‘getMaxCuttingPrice’ makes pointer from integer without a cast [-Wint-conversion]\n   int prices=getMaxCuttingPrice( prices,priceCount,first)+getMaxCuttingPrice( prices , priceCount ,rodLength-first);\n                                  ^~~~~~\nsource.c:3:5: note: expected ‘int (*)[2]’ but argument is of type ‘int’\n int getMaxCuttingPrice(int prices[][2],int priceCount,int rodLength){\n     ^~~~~~~~~~~~~~~~~~\nsource.c:10:79: warning: passing argument 1 of ‘getMaxCuttingPrice’ makes pointer from integer without a cast [-Wint-conversion]\n   int prices=getMaxCuttingPrice( prices,priceCount,first)+getMaxCuttingPrice( prices , priceCount ,rodLength-first);\n                                                                               ^~~~~~\nsource.c:3:5: note: expected ‘int (*)[2]’ but argument is of type ‘int’\n int getMaxCuttingPrice(int prices[][2],int priceCount,int rodLength){\n     ^~~~~~~~~~~~~~~~~~\nsource.c: At top level:\nsource.c:15:2: error: unterminated comment\n }/*\n  ^\n",
            1607654400,
            1608210000,
            100,
            1607671977.2433574
        ]
    ]
}